
DigitalOTATremolo_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a4c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002114  08004b0c  08004b0c  00014b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c20  08006c20  00020884  2**0
                  CONTENTS
  4 .ARM          00000000  08006c20  08006c20  00020884  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c20  08006c20  00020884  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c20  08006c20  00016c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c24  08006c24  00016c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000884  20000000  08006c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  20000884  080074ac  00020884  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f2c  080074ac  00020f2c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020884  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f86  00000000  00000000  000208ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b26  00000000  00000000  00031832  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f70  00000000  00000000  00034358  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de0  00000000  00000000  000352c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017af7  00000000  00000000  000360a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e4d2  00000000  00000000  0004db9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e979  00000000  00000000  0005c071  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da9ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003868  00000000  00000000  000daa68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000884 	.word	0x20000884
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004af4 	.word	0x08004af4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000888 	.word	0x20000888
 8000104:	08004af4 	.word	0x08004af4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_DAC_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000226:	003b      	movs	r3, r7
 8000228:	0018      	movs	r0, r3
 800022a:	2308      	movs	r3, #8
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f004 f851 	bl	80042d6 <memset>

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <MX_DAC_Init+0x6c>)
 8000236:	4a16      	ldr	r2, [pc, #88]	; (8000290 <MX_DAC_Init+0x70>)
 8000238:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800023a:	4b14      	ldr	r3, [pc, #80]	; (800028c <MX_DAC_Init+0x6c>)
 800023c:	0018      	movs	r0, r3
 800023e:	f001 f893 	bl	8001368 <HAL_DAC_Init>
 8000242:	1e03      	subs	r3, r0, #0
 8000244:	d001      	beq.n	800024a <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 8000246:	f000 fadd 	bl	8000804 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800024a:	003b      	movs	r3, r7
 800024c:	2204      	movs	r2, #4
 800024e:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000250:	003b      	movs	r3, r7
 8000252:	2200      	movs	r2, #0
 8000254:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000256:	0039      	movs	r1, r7
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <MX_DAC_Init+0x6c>)
 800025a:	2200      	movs	r2, #0
 800025c:	0018      	movs	r0, r3
 800025e:	f001 f8bf 	bl	80013e0 <HAL_DAC_ConfigChannel>
 8000262:	1e03      	subs	r3, r0, #0
 8000264:	d001      	beq.n	800026a <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 8000266:	f000 facd 	bl	8000804 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800026a:	003b      	movs	r3, r7
 800026c:	2214      	movs	r2, #20
 800026e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000270:	0039      	movs	r1, r7
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <MX_DAC_Init+0x6c>)
 8000274:	2210      	movs	r2, #16
 8000276:	0018      	movs	r0, r3
 8000278:	f001 f8b2 	bl	80013e0 <HAL_DAC_ConfigChannel>
 800027c:	1e03      	subs	r3, r0, #0
 800027e:	d001      	beq.n	8000284 <MX_DAC_Init+0x64>
  {
    Error_Handler();
 8000280:	f000 fac0 	bl	8000804 <Error_Handler>
  }

}
 8000284:	46c0      	nop			; (mov r8, r8)
 8000286:	46bd      	mov	sp, r7
 8000288:	b002      	add	sp, #8
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000d00 	.word	0x20000d00
 8000290:	40007400 	.word	0x40007400

08000294 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b08a      	sub	sp, #40	; 0x28
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029c:	2314      	movs	r3, #20
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	0018      	movs	r0, r3
 80002a2:	2314      	movs	r3, #20
 80002a4:	001a      	movs	r2, r3
 80002a6:	2100      	movs	r1, #0
 80002a8:	f004 f815 	bl	80042d6 <memset>
  if(dacHandle->Instance==DAC)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a42      	ldr	r2, [pc, #264]	; (80003bc <HAL_DAC_MspInit+0x128>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d000      	beq.n	80002b8 <HAL_DAC_MspInit+0x24>
 80002b6:	e07c      	b.n	80003b2 <HAL_DAC_MspInit+0x11e>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80002b8:	4b41      	ldr	r3, [pc, #260]	; (80003c0 <HAL_DAC_MspInit+0x12c>)
 80002ba:	69da      	ldr	r2, [r3, #28]
 80002bc:	4b40      	ldr	r3, [pc, #256]	; (80003c0 <HAL_DAC_MspInit+0x12c>)
 80002be:	2180      	movs	r1, #128	; 0x80
 80002c0:	0589      	lsls	r1, r1, #22
 80002c2:	430a      	orrs	r2, r1
 80002c4:	61da      	str	r2, [r3, #28]
 80002c6:	4b3e      	ldr	r3, [pc, #248]	; (80003c0 <HAL_DAC_MspInit+0x12c>)
 80002c8:	69da      	ldr	r2, [r3, #28]
 80002ca:	2380      	movs	r3, #128	; 0x80
 80002cc:	059b      	lsls	r3, r3, #22
 80002ce:	4013      	ands	r3, r2
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d4:	4b3a      	ldr	r3, [pc, #232]	; (80003c0 <HAL_DAC_MspInit+0x12c>)
 80002d6:	695a      	ldr	r2, [r3, #20]
 80002d8:	4b39      	ldr	r3, [pc, #228]	; (80003c0 <HAL_DAC_MspInit+0x12c>)
 80002da:	2180      	movs	r1, #128	; 0x80
 80002dc:	0289      	lsls	r1, r1, #10
 80002de:	430a      	orrs	r2, r1
 80002e0:	615a      	str	r2, [r3, #20]
 80002e2:	4b37      	ldr	r3, [pc, #220]	; (80003c0 <HAL_DAC_MspInit+0x12c>)
 80002e4:	695a      	ldr	r2, [r3, #20]
 80002e6:	2380      	movs	r3, #128	; 0x80
 80002e8:	029b      	lsls	r3, r3, #10
 80002ea:	4013      	ands	r3, r2
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80002f0:	2114      	movs	r1, #20
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2230      	movs	r2, #48	; 0x30
 80002f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2203      	movs	r2, #3
 80002fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000304:	187a      	adds	r2, r7, r1
 8000306:	2390      	movs	r3, #144	; 0x90
 8000308:	05db      	lsls	r3, r3, #23
 800030a:	0011      	movs	r1, r2
 800030c:	0018      	movs	r0, r3
 800030e:	f001 fb7b 	bl	8001a08 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000312:	4b2c      	ldr	r3, [pc, #176]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 8000314:	4a2c      	ldr	r2, [pc, #176]	; (80003c8 <HAL_DAC_MspInit+0x134>)
 8000316:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000318:	4b2a      	ldr	r3, [pc, #168]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 800031a:	2210      	movs	r2, #16
 800031c:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800031e:	4b29      	ldr	r3, [pc, #164]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000324:	4b27      	ldr	r3, [pc, #156]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 8000326:	2280      	movs	r2, #128	; 0x80
 8000328:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800032a:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 800032c:	2280      	movs	r2, #128	; 0x80
 800032e:	0092      	lsls	r2, r2, #2
 8000330:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000332:	4b24      	ldr	r3, [pc, #144]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 8000334:	2280      	movs	r2, #128	; 0x80
 8000336:	0112      	lsls	r2, r2, #4
 8000338:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800033a:	4b22      	ldr	r3, [pc, #136]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 800033c:	2220      	movs	r2, #32
 800033e:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000340:	4b20      	ldr	r3, [pc, #128]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000346:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 8000348:	0018      	movs	r0, r3
 800034a:	f001 f9c5 	bl	80016d8 <HAL_DMA_Init>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 8000352:	f000 fa57 	bl	8000804 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a1a      	ldr	r2, [pc, #104]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	4b19      	ldr	r3, [pc, #100]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	625a      	str	r2, [r3, #36]	; 0x24

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <HAL_DAC_MspInit+0x138>)
 8000364:	4a1a      	ldr	r2, [pc, #104]	; (80003d0 <HAL_DAC_MspInit+0x13c>)
 8000366:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <HAL_DAC_MspInit+0x138>)
 800036a:	2210      	movs	r2, #16
 800036c:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800036e:	4b17      	ldr	r3, [pc, #92]	; (80003cc <HAL_DAC_MspInit+0x138>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <HAL_DAC_MspInit+0x138>)
 8000376:	2280      	movs	r2, #128	; 0x80
 8000378:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <HAL_DAC_MspInit+0x138>)
 800037c:	2280      	movs	r2, #128	; 0x80
 800037e:	0092      	lsls	r2, r2, #2
 8000380:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000382:	4b12      	ldr	r3, [pc, #72]	; (80003cc <HAL_DAC_MspInit+0x138>)
 8000384:	2280      	movs	r2, #128	; 0x80
 8000386:	0112      	lsls	r2, r2, #4
 8000388:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 800038a:	4b10      	ldr	r3, [pc, #64]	; (80003cc <HAL_DAC_MspInit+0x138>)
 800038c:	2220      	movs	r2, #32
 800038e:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000390:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <HAL_DAC_MspInit+0x138>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8000396:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <HAL_DAC_MspInit+0x138>)
 8000398:	0018      	movs	r0, r3
 800039a:	f001 f99d 	bl	80016d8 <HAL_DMA_Init>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <HAL_DAC_MspInit+0x112>
    {
      Error_Handler();
 80003a2:	f000 fa2f 	bl	8000804 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a08      	ldr	r2, [pc, #32]	; (80003cc <HAL_DAC_MspInit+0x138>)
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <HAL_DAC_MspInit+0x138>)
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b00a      	add	sp, #40	; 0x28
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	40007400 	.word	0x40007400
 80003c0:	40021000 	.word	0x40021000
 80003c4:	20000cbc 	.word	0x20000cbc
 80003c8:	40020030 	.word	0x40020030
 80003cc:	20000d14 	.word	0x20000d14
 80003d0:	40020044 	.word	0x40020044

080003d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <MX_DMA_Init+0x48>)
 80003dc:	695a      	ldr	r2, [r3, #20]
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_DMA_Init+0x48>)
 80003e0:	2101      	movs	r1, #1
 80003e2:	430a      	orrs	r2, r1
 80003e4:	615a      	str	r2, [r3, #20]
 80003e6:	4b0d      	ldr	r3, [pc, #52]	; (800041c <MX_DMA_Init+0x48>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	2201      	movs	r2, #1
 80003ec:	4013      	ands	r3, r2
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2101      	movs	r1, #1
 80003f6:	200a      	movs	r0, #10
 80003f8:	f000 ff84 	bl	8001304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80003fc:	200a      	movs	r0, #10
 80003fe:	f000 ff96 	bl	800132e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 1, 0);
 8000402:	2200      	movs	r2, #0
 8000404:	2101      	movs	r1, #1
 8000406:	200b      	movs	r0, #11
 8000408:	f000 ff7c 	bl	8001304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800040c:	200b      	movs	r0, #11
 800040e:	f000 ff8e 	bl	800132e <HAL_NVIC_EnableIRQ>

}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	b002      	add	sp, #8
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	40021000 	.word	0x40021000

08000420 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000420:	b590      	push	{r4, r7, lr}
 8000422:	b089      	sub	sp, #36	; 0x24
 8000424:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	240c      	movs	r4, #12
 8000428:	193b      	adds	r3, r7, r4
 800042a:	0018      	movs	r0, r3
 800042c:	2314      	movs	r3, #20
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f003 ff50 	bl	80042d6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000436:	4b2a      	ldr	r3, [pc, #168]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000438:	695a      	ldr	r2, [r3, #20]
 800043a:	4b29      	ldr	r3, [pc, #164]	; (80004e0 <MX_GPIO_Init+0xc0>)
 800043c:	2180      	movs	r1, #128	; 0x80
 800043e:	0309      	lsls	r1, r1, #12
 8000440:	430a      	orrs	r2, r1
 8000442:	615a      	str	r2, [r3, #20]
 8000444:	4b26      	ldr	r3, [pc, #152]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000446:	695a      	ldr	r2, [r3, #20]
 8000448:	2380      	movs	r3, #128	; 0x80
 800044a:	031b      	lsls	r3, r3, #12
 800044c:	4013      	ands	r3, r2
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000454:	695a      	ldr	r2, [r3, #20]
 8000456:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000458:	2180      	movs	r1, #128	; 0x80
 800045a:	0289      	lsls	r1, r1, #10
 800045c:	430a      	orrs	r2, r1
 800045e:	615a      	str	r2, [r3, #20]
 8000460:	4b1f      	ldr	r3, [pc, #124]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000462:	695a      	ldr	r2, [r3, #20]
 8000464:	2380      	movs	r3, #128	; 0x80
 8000466:	029b      	lsls	r3, r3, #10
 8000468:	4013      	ands	r3, r2
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046e:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000470:	695a      	ldr	r2, [r3, #20]
 8000472:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000474:	2180      	movs	r1, #128	; 0x80
 8000476:	02c9      	lsls	r1, r1, #11
 8000478:	430a      	orrs	r2, r1
 800047a:	615a      	str	r2, [r3, #20]
 800047c:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <MX_GPIO_Init+0xc0>)
 800047e:	695a      	ldr	r2, [r3, #20]
 8000480:	2380      	movs	r3, #128	; 0x80
 8000482:	02db      	lsls	r3, r3, #11
 8000484:	4013      	ands	r3, r2
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SIN1_TAPTEMPO_EXTI13_Pin|SINE1_TOGGLE_EXTI1_Pin|SINE2_TOGGLE_EXTI2_Pin;
 800048a:	193b      	adds	r3, r7, r4
 800048c:	4a15      	ldr	r2, [pc, #84]	; (80004e4 <MX_GPIO_Init+0xc4>)
 800048e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	4a15      	ldr	r2, [pc, #84]	; (80004e8 <MX_GPIO_Init+0xc8>)
 8000494:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	2201      	movs	r2, #1
 800049a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800049c:	193b      	adds	r3, r7, r4
 800049e:	4a13      	ldr	r2, [pc, #76]	; (80004ec <MX_GPIO_Init+0xcc>)
 80004a0:	0019      	movs	r1, r3
 80004a2:	0010      	movs	r0, r2
 80004a4:	f001 fab0 	bl	8001a08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2100      	movs	r1, #0
 80004ac:	2005      	movs	r0, #5
 80004ae:	f000 ff29 	bl	8001304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80004b2:	2005      	movs	r0, #5
 80004b4:	f000 ff3b 	bl	800132e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2100      	movs	r1, #0
 80004bc:	2006      	movs	r0, #6
 80004be:	f000 ff21 	bl	8001304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80004c2:	2006      	movs	r0, #6
 80004c4:	f000 ff33 	bl	800132e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2100      	movs	r1, #0
 80004cc:	2007      	movs	r0, #7
 80004ce:	f000 ff19 	bl	8001304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004d2:	2007      	movs	r0, #7
 80004d4:	f000 ff2b 	bl	800132e <HAL_NVIC_EnableIRQ>

}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b009      	add	sp, #36	; 0x24
 80004de:	bd90      	pop	{r4, r7, pc}
 80004e0:	40021000 	.word	0x40021000
 80004e4:	00002006 	.word	0x00002006
 80004e8:	10210000 	.word	0x10210000
 80004ec:	48000800 	.word	0x48000800

080004f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <MX_I2C1_Init+0x74>)
 80004f6:	4a1c      	ldr	r2, [pc, #112]	; (8000568 <MX_I2C1_Init+0x78>)
 80004f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <MX_I2C1_Init+0x74>)
 80004fc:	4a1b      	ldr	r2, [pc, #108]	; (800056c <MX_I2C1_Init+0x7c>)
 80004fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <MX_I2C1_Init+0x74>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <MX_I2C1_Init+0x74>)
 8000508:	2201      	movs	r2, #1
 800050a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800050c:	4b15      	ldr	r3, [pc, #84]	; (8000564 <MX_I2C1_Init+0x74>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <MX_I2C1_Init+0x74>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <MX_I2C1_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_I2C1_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000524:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_I2C1_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <MX_I2C1_Init+0x74>)
 800052c:	0018      	movs	r0, r3
 800052e:	f001 fc27 	bl	8001d80 <HAL_I2C_Init>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d001      	beq.n	800053a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000536:	f000 f965 	bl	8000804 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <MX_I2C1_Init+0x74>)
 800053c:	2100      	movs	r1, #0
 800053e:	0018      	movs	r0, r3
 8000540:	f002 f8d8 	bl	80026f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d001      	beq.n	800054c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000548:	f000 f95c 	bl	8000804 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <MX_I2C1_Init+0x74>)
 800054e:	2100      	movs	r1, #0
 8000550:	0018      	movs	r0, r3
 8000552:	f002 f91b 	bl	800278c <HAL_I2CEx_ConfigDigitalFilter>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800055a:	f000 f953 	bl	8000804 <Error_Handler>
  }

}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000d58 	.word	0x20000d58
 8000568:	40005400 	.word	0x40005400
 800056c:	2000090e 	.word	0x2000090e

08000570 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	2314      	movs	r3, #20
 800057a:	18fb      	adds	r3, r7, r3
 800057c:	0018      	movs	r0, r3
 800057e:	2314      	movs	r3, #20
 8000580:	001a      	movs	r2, r3
 8000582:	2100      	movs	r1, #0
 8000584:	f003 fea7 	bl	80042d6 <memset>
  if(i2cHandle->Instance==I2C1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a1c      	ldr	r2, [pc, #112]	; (8000600 <HAL_I2C_MspInit+0x90>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d131      	bne.n	80005f6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <HAL_I2C_MspInit+0x94>)
 8000594:	695a      	ldr	r2, [r3, #20]
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <HAL_I2C_MspInit+0x94>)
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	02c9      	lsls	r1, r1, #11
 800059c:	430a      	orrs	r2, r1
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <HAL_I2C_MspInit+0x94>)
 80005a2:	695a      	ldr	r2, [r3, #20]
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	02db      	lsls	r3, r3, #11
 80005a8:	4013      	ands	r3, r2
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005ae:	2114      	movs	r1, #20
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	22c0      	movs	r2, #192	; 0xc0
 80005b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2212      	movs	r2, #18
 80005ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2201      	movs	r2, #1
 80005c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2203      	movs	r2, #3
 80005c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2201      	movs	r2, #1
 80005cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <HAL_I2C_MspInit+0x98>)
 80005d2:	0019      	movs	r1, r3
 80005d4:	0010      	movs	r0, r2
 80005d6:	f001 fa17 	bl	8001a08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <HAL_I2C_MspInit+0x94>)
 80005dc:	69da      	ldr	r2, [r3, #28]
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <HAL_I2C_MspInit+0x94>)
 80005e0:	2180      	movs	r1, #128	; 0x80
 80005e2:	0389      	lsls	r1, r1, #14
 80005e4:	430a      	orrs	r2, r1
 80005e6:	61da      	str	r2, [r3, #28]
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_I2C_MspInit+0x94>)
 80005ea:	69da      	ldr	r2, [r3, #28]
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	039b      	lsls	r3, r3, #14
 80005f0:	4013      	ands	r3, r2
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b00a      	add	sp, #40	; 0x28
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	40005400 	.word	0x40005400
 8000604:	40021000 	.word	0x40021000
 8000608:	48000400 	.word	0x48000400

0800060c <Utils_i2c_scan>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Utils_i2c_scan() {
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0

    int DeviceFound=0;
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 8000616:	230e      	movs	r3, #14
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	2200      	movs	r2, #0
 800061c:	801a      	strh	r2, [r3, #0]
 800061e:	e01e      	b.n	800065e <Utils_i2c_scan+0x52>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000620:	230e      	movs	r3, #14
 8000622:	18fb      	adds	r3, r7, r3
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	18db      	adds	r3, r3, r3
 8000628:	b299      	uxth	r1, r3
 800062a:	1dfc      	adds	r4, r7, #7
 800062c:	4810      	ldr	r0, [pc, #64]	; (8000670 <Utils_i2c_scan+0x64>)
 800062e:	230a      	movs	r3, #10
 8000630:	2201      	movs	r2, #1
 8000632:	f001 fd69 	bl	8002108 <HAL_I2C_IsDeviceReady>
 8000636:	0003      	movs	r3, r0
 8000638:	7023      	strb	r3, [r4, #0]
        if(res == HAL_OK) {
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d107      	bne.n	8000652 <Utils_i2c_scan+0x46>
            DeviceFound=1;
 8000642:	2301      	movs	r3, #1
 8000644:	60bb      	str	r3, [r7, #8]
            ssd1306_SetI2CAddress(i);
 8000646:	230e      	movs	r3, #14
 8000648:	18fb      	adds	r3, r7, r3
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	0018      	movs	r0, r3
 800064e:	f003 fb4f 	bl	8003cf0 <ssd1306_SetI2CAddress>
    for(uint16_t i = 0; i < 128; i++) {
 8000652:	210e      	movs	r1, #14
 8000654:	187b      	adds	r3, r7, r1
 8000656:	881a      	ldrh	r2, [r3, #0]
 8000658:	187b      	adds	r3, r7, r1
 800065a:	3201      	adds	r2, #1
 800065c:	801a      	strh	r2, [r3, #0]
 800065e:	230e      	movs	r3, #14
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	2b7f      	cmp	r3, #127	; 0x7f
 8000666:	d9db      	bls.n	8000620 <Utils_i2c_scan+0x14>
        }
    }
    if(!DeviceFound)
    {
    }
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b005      	add	sp, #20
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	20000d58 	.word	0x20000d58

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f000 fd11 	bl	80010a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f85f 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000682:	f7ff fecd 	bl	8000420 <MX_GPIO_Init>
  MX_DMA_Init();
 8000686:	f7ff fea5 	bl	80003d4 <MX_DMA_Init>
  MX_DAC_Init();
 800068a:	f7ff fdc9 	bl	8000220 <MX_DAC_Init>
  MX_TIM6_Init();
 800068e:	f000 fb03 	bl	8000c98 <MX_TIM6_Init>
  MX_I2C1_Init();
 8000692:	f7ff ff2d 	bl	80004f0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000696:	f000 fa39 	bl	8000b0c <MX_TIM2_Init>
  MX_TIM3_Init();
 800069a:	f000 fa99 	bl	8000bd0 <MX_TIM3_Init>
  MX_TIM7_Init();
 800069e:	f000 fb35 	bl	8000d0c <MX_TIM7_Init>
  MX_TIM15_Init();
 80006a2:	f000 fb93 	bl	8000dcc <MX_TIM15_Init>
  MX_TIM14_Init();
 80006a6:	f000 fb6b 	bl	8000d80 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  Utils_i2c_scan();
 80006aa:	f7ff ffaf 	bl	800060c <Utils_i2c_scan>
  ssd1306_Init();
 80006ae:	f003 fba3 	bl	8003df8 <ssd1306_Init>

  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	0099      	lsls	r1, r3, #2
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <main+0xa4>)
 80006b8:	4818      	ldr	r0, [pc, #96]	; (800071c <main+0xa8>)
 80006ba:	2300      	movs	r3, #0
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	000b      	movs	r3, r1
 80006c0:	2100      	movs	r1, #0
 80006c2:	f000 fecd 	bl	8001460 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80006c6:	2380      	movs	r3, #128	; 0x80
 80006c8:	0099      	lsls	r1, r3, #2
 80006ca:	4a13      	ldr	r2, [pc, #76]	; (8000718 <main+0xa4>)
 80006cc:	4813      	ldr	r0, [pc, #76]	; (800071c <main+0xa8>)
 80006ce:	2300      	movs	r3, #0
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	000b      	movs	r3, r1
 80006d4:	2110      	movs	r1, #16
 80006d6:	f000 fec3 	bl	8001460 <HAL_DAC_Start_DMA>

  TIM2->ARR = sin1_max_arr;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <main+0xac>)
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	2380      	movs	r3, #128	; 0x80
 80006e0:	05db      	lsls	r3, r3, #23
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->ARR = sin2_max_arr;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <main+0xb0>)
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <main+0xb4>)
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c

  // Trigger inputs for rotary encoders
  HAL_TIM_Base_Start(&htim2);
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <main+0xb8>)
 80006ee:	0018      	movs	r0, r3
 80006f0:	f002 fea2 	bl	8003438 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <main+0xbc>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f002 fe9e 	bl	8003438 <HAL_TIM_Base_Start>

  // DAC trigger for sine1 wave output
  HAL_TIM_Base_Start(&htim6);
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <main+0xc0>)
 80006fe:	0018      	movs	r0, r3
 8000700:	f002 fe9a 	bl	8003438 <HAL_TIM_Base_Start>
  // DAC trigger for sine2 wave output
  HAL_TIM_Base_Start(&htim7);
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <main+0xc4>)
 8000706:	0018      	movs	r0, r3
 8000708:	f002 fe96 	bl	8003438 <HAL_TIM_Base_Start>

  // display flash timer
  HAL_TIM_Base_Start_IT(&htim14);
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <main+0xc8>)
 800070e:	0018      	movs	r0, r3
 8000710:	f002 feb4 	bl	800347c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000714:	e7fe      	b.n	8000714 <main+0xa0>
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	20000000 	.word	0x20000000
 800071c:	20000d00 	.word	0x20000d00
 8000720:	20000800 	.word	0x20000800
 8000724:	20000801 	.word	0x20000801
 8000728:	40000400 	.word	0x40000400
 800072c:	20000e64 	.word	0x20000e64
 8000730:	20000de4 	.word	0x20000de4
 8000734:	20000e24 	.word	0x20000e24
 8000738:	20000ee4 	.word	0x20000ee4
 800073c:	20000ea4 	.word	0x20000ea4

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b099      	sub	sp, #100	; 0x64
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	242c      	movs	r4, #44	; 0x2c
 8000748:	193b      	adds	r3, r7, r4
 800074a:	0018      	movs	r0, r3
 800074c:	2334      	movs	r3, #52	; 0x34
 800074e:	001a      	movs	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	f003 fdc0 	bl	80042d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000756:	231c      	movs	r3, #28
 8000758:	18fb      	adds	r3, r7, r3
 800075a:	0018      	movs	r0, r3
 800075c:	2310      	movs	r3, #16
 800075e:	001a      	movs	r2, r3
 8000760:	2100      	movs	r1, #0
 8000762:	f003 fdb8 	bl	80042d6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000766:	003b      	movs	r3, r7
 8000768:	0018      	movs	r0, r3
 800076a:	231c      	movs	r3, #28
 800076c:	001a      	movs	r2, r3
 800076e:	2100      	movs	r1, #0
 8000770:	f003 fdb1 	bl	80042d6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	0021      	movs	r1, r4
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2202      	movs	r2, #2
 800077a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2201      	movs	r2, #1
 8000780:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2210      	movs	r2, #16
 8000786:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2202      	movs	r2, #2
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	0212      	lsls	r2, r2, #8
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	0312      	lsls	r2, r2, #12
 800079c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2200      	movs	r2, #0
 80007a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 f83c 	bl	8002824 <HAL_RCC_OscConfig>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80007b0:	f000 f828 	bl	8000804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	211c      	movs	r1, #28
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2207      	movs	r2, #7
 80007ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2202      	movs	r2, #2
 80007c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2101      	movs	r1, #1
 80007d2:	0018      	movs	r0, r3
 80007d4:	f002 fbac 	bl	8002f30 <HAL_RCC_ClockConfig>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007dc:	f000 f812 	bl	8000804 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007e0:	003b      	movs	r3, r7
 80007e2:	2220      	movs	r2, #32
 80007e4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80007e6:	003b      	movs	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ec:	003b      	movs	r3, r7
 80007ee:	0018      	movs	r0, r3
 80007f0:	f002 fcf6 	bl	80031e0 <HAL_RCCEx_PeriphCLKConfig>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80007f8:	f000 f804 	bl	8000804 <Error_Handler>
  }
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b019      	add	sp, #100	; 0x64
 8000802:	bd90      	pop	{r4, r7, pc}

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_MspInit+0x44>)
 8000818:	699a      	ldr	r2, [r3, #24]
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <HAL_MspInit+0x44>)
 800081c:	2101      	movs	r1, #1
 800081e:	430a      	orrs	r2, r1
 8000820:	619a      	str	r2, [r3, #24]
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_MspInit+0x44>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	2201      	movs	r2, #1
 8000828:	4013      	ands	r3, r2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <HAL_MspInit+0x44>)
 8000830:	69da      	ldr	r2, [r3, #28]
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_MspInit+0x44>)
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	0549      	lsls	r1, r1, #21
 8000838:	430a      	orrs	r2, r1
 800083a:	61da      	str	r2, [r3, #28]
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_MspInit+0x44>)
 800083e:	69da      	ldr	r2, [r3, #28]
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	055b      	lsls	r3, r3, #21
 8000844:	4013      	ands	r3, r2
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40021000 	.word	0x40021000

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <HardFault_Handler+0x4>

08000868 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000880:	f000 fc56 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	TIM6->CR1 ^= TIM_CR1_CEN;
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <EXTI0_1_IRQHandler+0x1c>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <EXTI0_1_IRQHandler+0x1c>)
 8000896:	2101      	movs	r1, #1
 8000898:	404a      	eors	r2, r1
 800089a:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800089c:	2002      	movs	r0, #2
 800089e:	f001 fa49 	bl	8001d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40001000 	.word	0x40001000

080008ac <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
	TIM7->CR1 ^= TIM_CR1_CEN;
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <EXTI2_3_IRQHandler+0x1c>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <EXTI2_3_IRQHandler+0x1c>)
 80008b6:	2101      	movs	r1, #1
 80008b8:	404a      	eors	r2, r1
 80008ba:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80008bc:	2004      	movs	r0, #4
 80008be:	f001 fa39 	bl	8001d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40001400 	.word	0x40001400

080008cc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

		// is tim15 already running?
		if(TIM15->CR1 & TIM_CR1_CEN)
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <EXTI4_15_IRQHandler+0x78>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2201      	movs	r2, #1
 80008d6:	4013      	ands	r3, r2
 80008d8:	d022      	beq.n	8000920 <EXTI4_15_IRQHandler+0x54>
		{
			// stop the timer
			tap_count = TIM15->CNT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <EXTI4_15_IRQHandler+0x78>)
 80008dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <EXTI4_15_IRQHandler+0x7c>)
 80008e0:	601a      	str	r2, [r3, #0]
			TIM15->CR1 &= ~TIM_CR1_CEN;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <EXTI4_15_IRQHandler+0x78>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <EXTI4_15_IRQHandler+0x78>)
 80008e8:	2101      	movs	r1, #1
 80008ea:	438a      	bics	r2, r1
 80008ec:	601a      	str	r2, [r3, #0]
			if((sin1_max_arr - (tap_count/16)) > 64)
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <EXTI4_15_IRQHandler+0x80>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	001a      	movs	r2, r3
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <EXTI4_15_IRQHandler+0x7c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	091b      	lsrs	r3, r3, #4
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	2b40      	cmp	r3, #64	; 0x40
 80008fe:	d904      	bls.n	800090a <EXTI4_15_IRQHandler+0x3e>
				TIM2->CNT = 0;
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
 8000908:	e013      	b.n	8000932 <EXTI4_15_IRQHandler+0x66>
			else
				TIM2->CNT = sin1_max_arr - (tap_count/16);
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <EXTI4_15_IRQHandler+0x80>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	0019      	movs	r1, r3
 8000910:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <EXTI4_15_IRQHandler+0x7c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	091a      	lsrs	r2, r3, #4
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	1a8a      	subs	r2, r1, r2
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
 800091e:	e008      	b.n	8000932 <EXTI4_15_IRQHandler+0x66>

		}
		else
		{
			// start the timer
			TIM15->CNT = 0;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <EXTI4_15_IRQHandler+0x78>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
			TIM15->CR1 |= TIM_CR1_CEN;
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <EXTI4_15_IRQHandler+0x78>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <EXTI4_15_IRQHandler+0x78>)
 800092c:	2101      	movs	r1, #1
 800092e:	430a      	orrs	r2, r1
 8000930:	601a      	str	r2, [r3, #0]
			//HAL_TIM_Base_Start(&htim15);
		}


  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	019b      	lsls	r3, r3, #6
 8000936:	0018      	movs	r0, r3
 8000938:	f001 f9fc 	bl	8001d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	40014000 	.word	0x40014000
 8000948:	200008a0 	.word	0x200008a0
 800094c:	20000800 	.word	0x20000800

08000950 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000956:	0018      	movs	r0, r3
 8000958:	f000 ff6c 	bl	8001834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	20000cbc 	.word	0x20000cbc

08000968 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800096e:	0018      	movs	r0, r3
 8000970:	f000 ff60 	bl	8001834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	20000d14 	.word	0x20000d14

08000980 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b08d      	sub	sp, #52	; 0x34
 8000984:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM14_IRQn 0 */
	display_flash ^= 1UL << 0UL;
 8000986:	4b3b      	ldr	r3, [pc, #236]	; (8000a74 <TIM14_IRQHandler+0xf4>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2201      	movs	r2, #1
 800098c:	4053      	eors	r3, r2
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b38      	ldr	r3, [pc, #224]	; (8000a74 <TIM14_IRQHandler+0xf4>)
 8000992:	701a      	strb	r2, [r3, #0]
	  ssd1306_Fill(Black);
 8000994:	2000      	movs	r0, #0
 8000996:	f003 fa9d 	bl	8003ed4 <ssd1306_Fill>

	  	// update sin1 timer with inverted encoder cnt
	  	TIM6->PSC = sin1_max_arr - TIM2->CNT;
 800099a:	4b37      	ldr	r3, [pc, #220]	; (8000a78 <TIM14_IRQHandler+0xf8>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	0019      	movs	r1, r3
 80009a0:	2380      	movs	r3, #128	; 0x80
 80009a2:	05db      	lsls	r3, r3, #23
 80009a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009a6:	4b35      	ldr	r3, [pc, #212]	; (8000a7c <TIM14_IRQHandler+0xfc>)
 80009a8:	1a8a      	subs	r2, r1, r2
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28

	  	// update sin2 timer with inverted encoder cnt
	  	TIM7->PSC = sin2_max_arr - TIM3->CNT;
 80009ac:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <TIM14_IRQHandler+0x100>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	0019      	movs	r1, r3
 80009b2:	4b34      	ldr	r3, [pc, #208]	; (8000a84 <TIM14_IRQHandler+0x104>)
 80009b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009b6:	4b34      	ldr	r3, [pc, #208]	; (8000a88 <TIM14_IRQHandler+0x108>)
 80009b8:	1a8a      	subs	r2, r1, r2
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28

	  	// plot sin1 setting to display
	    ssd1306_SetCursor(10, 5);
 80009bc:	2105      	movs	r1, #5
 80009be:	200a      	movs	r0, #10
 80009c0:	f003 fc32 	bl	8004228 <ssd1306_SetCursor>
	    char encoder1[11];
	    snprintf(encoder1, sizeof(encoder1), "%lu", TIM2->CNT);
 80009c4:	2380      	movs	r3, #128	; 0x80
 80009c6:	05db      	lsls	r3, r3, #23
 80009c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ca:	4a30      	ldr	r2, [pc, #192]	; (8000a8c <TIM14_IRQHandler+0x10c>)
 80009cc:	241c      	movs	r4, #28
 80009ce:	1938      	adds	r0, r7, r4
 80009d0:	210b      	movs	r1, #11
 80009d2:	f003 fc89 	bl	80042e8 <sniprintf>
	    ssd1306_WriteString(encoder1, Font_16x26, White, 0);
 80009d6:	4a2e      	ldr	r2, [pc, #184]	; (8000a90 <TIM14_IRQHandler+0x110>)
 80009d8:	1938      	adds	r0, r7, r4
 80009da:	2300      	movs	r3, #0
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2301      	movs	r3, #1
 80009e0:	6811      	ldr	r1, [r2, #0]
 80009e2:	6852      	ldr	r2, [r2, #4]
 80009e4:	f003 fbf2 	bl	80041cc <ssd1306_WriteString>

	  	// plot sin2 setting to display
	    ssd1306_SetCursor(90, 5);
 80009e8:	2105      	movs	r1, #5
 80009ea:	205a      	movs	r0, #90	; 0x5a
 80009ec:	f003 fc1c 	bl	8004228 <ssd1306_SetCursor>
	    char encoder2[11];
	    snprintf(encoder2, sizeof(encoder2), "%lu",TIM3->CNT);
 80009f0:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <TIM14_IRQHandler+0x104>)
 80009f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f4:	4a25      	ldr	r2, [pc, #148]	; (8000a8c <TIM14_IRQHandler+0x10c>)
 80009f6:	2410      	movs	r4, #16
 80009f8:	1938      	adds	r0, r7, r4
 80009fa:	210b      	movs	r1, #11
 80009fc:	f003 fc74 	bl	80042e8 <sniprintf>
	    ssd1306_WriteString(encoder2, Font_16x26, White, 0);
 8000a00:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <TIM14_IRQHandler+0x110>)
 8000a02:	1938      	adds	r0, r7, r4
 8000a04:	2300      	movs	r3, #0
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	6811      	ldr	r1, [r2, #0]
 8000a0c:	6852      	ldr	r2, [r2, #4]
 8000a0e:	f003 fbdd 	bl	80041cc <ssd1306_WriteString>


	    ssd1306_SetCursor(45, 20);
 8000a12:	2114      	movs	r1, #20
 8000a14:	202d      	movs	r0, #45	; 0x2d
 8000a16:	f003 fc07 	bl	8004228 <ssd1306_SetCursor>
	    if(TIM15->CR1 & TIM_CR1_CEN)
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <TIM14_IRQHandler+0x114>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4013      	ands	r3, r2
 8000a22:	d00d      	beq.n	8000a40 <TIM14_IRQHandler+0xc0>
		{
	    	if(display_flash)
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <TIM14_IRQHandler+0xf4>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d019      	beq.n	8000a60 <TIM14_IRQHandler+0xe0>
	    	{
				ssd1306_WriteString("TAP", Font_11x18, White, 0);
 8000a2c:	4a1a      	ldr	r2, [pc, #104]	; (8000a98 <TIM14_IRQHandler+0x118>)
 8000a2e:	481b      	ldr	r0, [pc, #108]	; (8000a9c <TIM14_IRQHandler+0x11c>)
 8000a30:	2300      	movs	r3, #0
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	2301      	movs	r3, #1
 8000a36:	6811      	ldr	r1, [r2, #0]
 8000a38:	6852      	ldr	r2, [r2, #4]
 8000a3a:	f003 fbc7 	bl	80041cc <ssd1306_WriteString>
 8000a3e:	e00f      	b.n	8000a60 <TIM14_IRQHandler+0xe0>
	    	}
		}
	    else
	    {
			char tap_tempo[11];
			snprintf(tap_tempo, sizeof(tap_tempo), "%lu",tap_count);
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <TIM14_IRQHandler+0x120>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <TIM14_IRQHandler+0x10c>)
 8000a46:	1d38      	adds	r0, r7, #4
 8000a48:	210b      	movs	r1, #11
 8000a4a:	f003 fc4d 	bl	80042e8 <sniprintf>
			ssd1306_WriteString(tap_tempo, Font_11x18, White, 0);
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <TIM14_IRQHandler+0x118>)
 8000a50:	1d38      	adds	r0, r7, #4
 8000a52:	2300      	movs	r3, #0
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2301      	movs	r3, #1
 8000a58:	6811      	ldr	r1, [r2, #0]
 8000a5a:	6852      	ldr	r2, [r2, #4]
 8000a5c:	f003 fbb6 	bl	80041cc <ssd1306_WriteString>
	    }


	    ssd1306_UpdateScreen();
 8000a60:	f003 fa5c 	bl	8003f1c <ssd1306_UpdateScreen>
  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <TIM14_IRQHandler+0x124>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f002 fdbe 	bl	80035e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b00b      	add	sp, #44	; 0x2c
 8000a72:	bd90      	pop	{r4, r7, pc}
 8000a74:	200008a4 	.word	0x200008a4
 8000a78:	20000800 	.word	0x20000800
 8000a7c:	40001000 	.word	0x40001000
 8000a80:	20000801 	.word	0x20000801
 8000a84:	40000400 	.word	0x40000400
 8000a88:	40001400 	.word	0x40001400
 8000a8c:	08004b0c 	.word	0x08004b0c
 8000a90:	20000818 	.word	0x20000818
 8000a94:	40014000 	.word	0x40014000
 8000a98:	20000810 	.word	0x20000810
 8000a9c:	08004b10 	.word	0x08004b10
 8000aa0:	200008a0 	.word	0x200008a0
 8000aa4:	20000ea4 	.word	0x20000ea4

08000aa8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <_sbrk+0x50>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <_sbrk+0x16>
		heap_end = &end;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <_sbrk+0x50>)
 8000aba:	4a10      	ldr	r2, [pc, #64]	; (8000afc <_sbrk+0x54>)
 8000abc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <_sbrk+0x50>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <_sbrk+0x50>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	18d3      	adds	r3, r2, r3
 8000acc:	466a      	mov	r2, sp
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d907      	bls.n	8000ae2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ad2:	f003 fbc3 	bl	800425c <__errno>
 8000ad6:	0003      	movs	r3, r0
 8000ad8:	220c      	movs	r2, #12
 8000ada:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	425b      	negs	r3, r3
 8000ae0:	e006      	b.n	8000af0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <_sbrk+0x50>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	18d2      	adds	r2, r2, r3
 8000aea:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <_sbrk+0x50>)
 8000aec:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b004      	add	sp, #16
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200008a8 	.word	0x200008a8
 8000afc:	20000f30 	.word	0x20000f30

08000b00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b08d      	sub	sp, #52	; 0x34
 8000b10:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b12:	240c      	movs	r4, #12
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	0018      	movs	r0, r3
 8000b18:	2324      	movs	r3, #36	; 0x24
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	f003 fbda 	bl	80042d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	0018      	movs	r0, r3
 8000b26:	2308      	movs	r3, #8
 8000b28:	001a      	movs	r2, r3
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f003 fbd3 	bl	80042d6 <memset>

  htim2.Instance = TIM2;
 8000b30:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <MX_TIM2_Init+0xc0>)
 8000b32:	2280      	movs	r2, #128	; 0x80
 8000b34:	05d2      	lsls	r2, r2, #23
 8000b36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b38:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <MX_TIM2_Init+0xc0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000b3e:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <MX_TIM2_Init+0xc0>)
 8000b40:	2260      	movs	r2, #96	; 0x60
 8000b42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64;
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <MX_TIM2_Init+0xc0>)
 8000b46:	2240      	movs	r2, #64	; 0x40
 8000b48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <MX_TIM2_Init+0xc0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b50:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <MX_TIM2_Init+0xc0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b56:	0021      	movs	r1, r4
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2201      	movs	r2, #1
 8000b68:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2201      	movs	r2, #1
 8000b80:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000b8e:	187a      	adds	r2, r7, r1
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_TIM2_Init+0xc0>)
 8000b92:	0011      	movs	r1, r2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f002 fc93 	bl	80034c0 <HAL_TIM_Encoder_Init>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b9e:	f7ff fe31 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bae:	1d3a      	adds	r2, r7, #4
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_TIM2_Init+0xc0>)
 8000bb2:	0011      	movs	r1, r2
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f003 f82d 	bl	8003c14 <HAL_TIMEx_MasterConfigSynchronization>
 8000bba:	1e03      	subs	r3, r0, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000bbe:	f7ff fe21 	bl	8000804 <Error_Handler>
  }

}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b00d      	add	sp, #52	; 0x34
 8000bc8:	bd90      	pop	{r4, r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	20000e64 	.word	0x20000e64

08000bd0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b08d      	sub	sp, #52	; 0x34
 8000bd4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bd6:	240c      	movs	r4, #12
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	0018      	movs	r0, r3
 8000bdc:	2324      	movs	r3, #36	; 0x24
 8000bde:	001a      	movs	r2, r3
 8000be0:	2100      	movs	r1, #0
 8000be2:	f003 fb78 	bl	80042d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	0018      	movs	r0, r3
 8000bea:	2308      	movs	r3, #8
 8000bec:	001a      	movs	r2, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f003 fb71 	bl	80042d6 <memset>

  htim3.Instance = TIM3;
 8000bf4:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <MX_TIM3_Init+0xc0>)
 8000bf6:	4a27      	ldr	r2, [pc, #156]	; (8000c94 <MX_TIM3_Init+0xc4>)
 8000bf8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bfa:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <MX_TIM3_Init+0xc0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000c00:	4b23      	ldr	r3, [pc, #140]	; (8000c90 <MX_TIM3_Init+0xc0>)
 8000c02:	2260      	movs	r2, #96	; 0x60
 8000c04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64;
 8000c06:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <MX_TIM3_Init+0xc0>)
 8000c08:	2240      	movs	r2, #64	; 0x40
 8000c0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000c0c:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <MX_TIM3_Init+0xc0>)
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	0092      	lsls	r2, r2, #2
 8000c12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <MX_TIM3_Init+0xc0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c1a:	0021      	movs	r1, r4
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	2203      	movs	r2, #3
 8000c20:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 4;
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2204      	movs	r2, #4
 8000c38:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	2201      	movs	r2, #1
 8000c44:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2200      	movs	r2, #0
 8000c4a:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 4;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2204      	movs	r2, #4
 8000c50:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c52:	187a      	adds	r2, r7, r1
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_TIM3_Init+0xc0>)
 8000c56:	0011      	movs	r1, r2
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f002 fc31 	bl	80034c0 <HAL_TIM_Encoder_Init>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000c62:	f7ff fdcf 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c72:	1d3a      	adds	r2, r7, #4
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <MX_TIM3_Init+0xc0>)
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f002 ffcb 	bl	8003c14 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7e:	1e03      	subs	r3, r0, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8000c82:	f7ff fdbf 	bl	8000804 <Error_Handler>
  }

}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b00d      	add	sp, #52	; 0x34
 8000c8c:	bd90      	pop	{r4, r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	20000de4 	.word	0x20000de4
 8000c94:	40000400 	.word	0x40000400

08000c98 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9e:	003b      	movs	r3, r7
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	f003 fb15 	bl	80042d6 <memset>

  htim6.Instance = TIM6;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_TIM6_Init+0x6c>)
 8000cae:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <MX_TIM6_Init+0x70>)
 8000cb0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 255;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_TIM6_Init+0x6c>)
 8000cb4:	22ff      	movs	r2, #255	; 0xff
 8000cb6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_TIM6_Init+0x6c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 440;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_TIM6_Init+0x6c>)
 8000cc0:	22dc      	movs	r2, #220	; 0xdc
 8000cc2:	0052      	lsls	r2, r2, #1
 8000cc4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_TIM6_Init+0x6c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <MX_TIM6_Init+0x6c>)
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f002 fb86 	bl	80033e0 <HAL_TIM_Base_Init>
 8000cd4:	1e03      	subs	r3, r0, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8000cd8:	f7ff fd94 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cdc:	003b      	movs	r3, r7
 8000cde:	2220      	movs	r2, #32
 8000ce0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce2:	003b      	movs	r3, r7
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ce8:	003a      	movs	r2, r7
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_TIM6_Init+0x6c>)
 8000cec:	0011      	movs	r1, r2
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f002 ff90 	bl	8003c14 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf4:	1e03      	subs	r3, r0, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8000cf8:	f7ff fd84 	bl	8000804 <Error_Handler>
  }

}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b002      	add	sp, #8
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000e24 	.word	0x20000e24
 8000d08:	40001000 	.word	0x40001000

08000d0c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d12:	003b      	movs	r3, r7
 8000d14:	0018      	movs	r0, r3
 8000d16:	2308      	movs	r3, #8
 8000d18:	001a      	movs	r2, r3
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	f003 fadb 	bl	80042d6 <memset>

  htim7.Instance = TIM7;
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_TIM7_Init+0x6c>)
 8000d22:	4a16      	ldr	r2, [pc, #88]	; (8000d7c <MX_TIM7_Init+0x70>)
 8000d24:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 255;
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_TIM7_Init+0x6c>)
 8000d28:	22ff      	movs	r2, #255	; 0xff
 8000d2a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_TIM7_Init+0x6c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 440;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_TIM7_Init+0x6c>)
 8000d34:	22dc      	movs	r2, #220	; 0xdc
 8000d36:	0052      	lsls	r2, r2, #1
 8000d38:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_TIM7_Init+0x6c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d40:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <MX_TIM7_Init+0x6c>)
 8000d42:	0018      	movs	r0, r3
 8000d44:	f002 fb4c 	bl	80033e0 <HAL_TIM_Base_Init>
 8000d48:	1e03      	subs	r3, r0, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM7_Init+0x44>
  {
    Error_Handler();
 8000d4c:	f7ff fd5a 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d50:	003b      	movs	r3, r7
 8000d52:	2220      	movs	r2, #32
 8000d54:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d56:	003b      	movs	r3, r7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d5c:	003a      	movs	r2, r7
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_TIM7_Init+0x6c>)
 8000d60:	0011      	movs	r1, r2
 8000d62:	0018      	movs	r0, r3
 8000d64:	f002 ff56 	bl	8003c14 <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	1e03      	subs	r3, r0, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM7_Init+0x64>
  {
    Error_Handler();
 8000d6c:	f7ff fd4a 	bl	8000804 <Error_Handler>
  }

}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b002      	add	sp, #8
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000ee4 	.word	0x20000ee4
 8000d7c:	40001400 	.word	0x40001400

08000d80 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_TIM14_Init+0x40>)
 8000d86:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <MX_TIM14_Init+0x44>)
 8000d88:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8;
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <MX_TIM14_Init+0x40>)
 8000d8c:	2208      	movs	r2, #8
 8000d8e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_TIM14_Init+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <MX_TIM14_Init+0x40>)
 8000d98:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <MX_TIM14_Init+0x48>)
 8000d9a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_TIM14_Init+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <MX_TIM14_Init+0x40>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <MX_TIM14_Init+0x40>)
 8000daa:	0018      	movs	r0, r3
 8000dac:	f002 fb18 	bl	80033e0 <HAL_TIM_Base_Init>
 8000db0:	1e03      	subs	r3, r0, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000db4:	f7ff fd26 	bl	8000804 <Error_Handler>
  }

}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	20000ea4 	.word	0x20000ea4
 8000dc4:	40002000 	.word	0x40002000
 8000dc8:	0000ffff 	.word	0x0000ffff

08000dcc <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	2310      	movs	r3, #16
 8000dda:	001a      	movs	r2, r3
 8000ddc:	2100      	movs	r1, #0
 8000dde:	f003 fa7a 	bl	80042d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de2:	003b      	movs	r3, r7
 8000de4:	0018      	movs	r0, r3
 8000de6:	2308      	movs	r3, #8
 8000de8:	001a      	movs	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f003 fa73 	bl	80042d6 <memset>

  htim15.Instance = TIM15;
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <MX_TIM15_Init+0xa4>)
 8000df2:	4a20      	ldr	r2, [pc, #128]	; (8000e74 <MX_TIM15_Init+0xa8>)
 8000df4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 65535;
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_TIM15_Init+0xa4>)
 8000df8:	4a1f      	ldr	r2, [pc, #124]	; (8000e78 <MX_TIM15_Init+0xac>)
 8000dfa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <MX_TIM15_Init+0xa4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_TIM15_Init+0xa4>)
 8000e04:	4a1c      	ldr	r2, [pc, #112]	; (8000e78 <MX_TIM15_Init+0xac>)
 8000e06:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_TIM15_Init+0xa4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_TIM15_Init+0xa4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <MX_TIM15_Init+0xa4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_TIM15_Init+0xa4>)
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f002 fadf 	bl	80033e0 <HAL_TIM_Base_Init>
 8000e22:	1e03      	subs	r3, r0, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 8000e26:	f7ff fced 	bl	8000804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2a:	2108      	movs	r1, #8
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2280      	movs	r2, #128	; 0x80
 8000e30:	0152      	lsls	r2, r2, #5
 8000e32:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000e34:	187a      	adds	r2, r7, r1
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_TIM15_Init+0xa4>)
 8000e38:	0011      	movs	r1, r2
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f002 fcea 	bl	8003814 <HAL_TIM_ConfigClockSource>
 8000e40:	1e03      	subs	r3, r0, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000e44:	f7ff fcde 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e48:	003b      	movs	r3, r7
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4e:	003b      	movs	r3, r7
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e54:	003a      	movs	r2, r7
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_TIM15_Init+0xa4>)
 8000e58:	0011      	movs	r1, r2
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f002 feda 	bl	8003c14 <HAL_TIMEx_MasterConfigSynchronization>
 8000e60:	1e03      	subs	r3, r0, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8000e64:	f7ff fcce 	bl	8000804 <Error_Handler>
  }

}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b006      	add	sp, #24
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000da4 	.word	0x20000da4
 8000e74:	40014000 	.word	0x40014000
 8000e78:	0000ffff 	.word	0x0000ffff

08000e7c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08c      	sub	sp, #48	; 0x30
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	231c      	movs	r3, #28
 8000e86:	18fb      	adds	r3, r7, r3
 8000e88:	0018      	movs	r0, r3
 8000e8a:	2314      	movs	r3, #20
 8000e8c:	001a      	movs	r2, r3
 8000e8e:	2100      	movs	r1, #0
 8000e90:	f003 fa21 	bl	80042d6 <memset>
  if(tim_encoderHandle->Instance==TIM2)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	05db      	lsls	r3, r3, #23
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d131      	bne.n	8000f04 <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ea0:	4b35      	ldr	r3, [pc, #212]	; (8000f78 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000ea2:	69da      	ldr	r2, [r3, #28]
 8000ea4:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	61da      	str	r2, [r3, #28]
 8000eac:	4b32      	ldr	r3, [pc, #200]	; (8000f78 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
 8000eb6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	; (8000f78 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000eba:	695a      	ldr	r2, [r3, #20]
 8000ebc:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000ebe:	2180      	movs	r1, #128	; 0x80
 8000ec0:	0289      	lsls	r1, r1, #10
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	615a      	str	r2, [r3, #20]
 8000ec6:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000ec8:	695a      	ldr	r2, [r3, #20]
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	029b      	lsls	r3, r3, #10
 8000ece:	4013      	ands	r3, r2
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ed4:	211c      	movs	r1, #28
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	2202      	movs	r2, #2
 8000ee0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000eee:	187b      	adds	r3, r7, r1
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	187a      	adds	r2, r7, r1
 8000ef6:	2390      	movs	r3, #144	; 0x90
 8000ef8:	05db      	lsls	r3, r3, #23
 8000efa:	0011      	movs	r1, r2
 8000efc:	0018      	movs	r0, r3
 8000efe:	f000 fd83 	bl	8001a08 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f02:	e035      	b.n	8000f70 <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM3)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <HAL_TIM_Encoder_MspInit+0x100>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d130      	bne.n	8000f70 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000f10:	69da      	ldr	r2, [r3, #28]
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000f14:	2102      	movs	r1, #2
 8000f16:	430a      	orrs	r2, r1
 8000f18:	61da      	str	r2, [r3, #28]
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	2202      	movs	r2, #2
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000f28:	695a      	ldr	r2, [r3, #20]
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000f2c:	2180      	movs	r1, #128	; 0x80
 8000f2e:	0289      	lsls	r1, r1, #10
 8000f30:	430a      	orrs	r2, r1
 8000f32:	615a      	str	r2, [r3, #20]
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000f36:	695a      	ldr	r2, [r3, #20]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	029b      	lsls	r3, r3, #10
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f42:	211c      	movs	r1, #28
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	22c0      	movs	r2, #192	; 0xc0
 8000f48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2201      	movs	r2, #1
 8000f60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	187a      	adds	r2, r7, r1
 8000f64:	2390      	movs	r3, #144	; 0x90
 8000f66:	05db      	lsls	r3, r3, #23
 8000f68:	0011      	movs	r1, r2
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f000 fd4c 	bl	8001a08 <HAL_GPIO_Init>
}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b00c      	add	sp, #48	; 0x30
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40000400 	.word	0x40000400

08000f80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a2a      	ldr	r2, [pc, #168]	; (8001038 <HAL_TIM_Base_MspInit+0xb8>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d10c      	bne.n	8000fac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f92:	4b2a      	ldr	r3, [pc, #168]	; (800103c <HAL_TIM_Base_MspInit+0xbc>)
 8000f94:	69da      	ldr	r2, [r3, #28]
 8000f96:	4b29      	ldr	r3, [pc, #164]	; (800103c <HAL_TIM_Base_MspInit+0xbc>)
 8000f98:	2110      	movs	r1, #16
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	61da      	str	r2, [r3, #28]
 8000f9e:	4b27      	ldr	r3, [pc, #156]	; (800103c <HAL_TIM_Base_MspInit+0xbc>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000faa:	e040      	b.n	800102e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM7)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a23      	ldr	r2, [pc, #140]	; (8001040 <HAL_TIM_Base_MspInit+0xc0>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d10c      	bne.n	8000fd0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <HAL_TIM_Base_MspInit+0xbc>)
 8000fb8:	69da      	ldr	r2, [r3, #28]
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <HAL_TIM_Base_MspInit+0xbc>)
 8000fbc:	2120      	movs	r1, #32
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	61da      	str	r2, [r3, #28]
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <HAL_TIM_Base_MspInit+0xbc>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	2220      	movs	r2, #32
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
}
 8000fce:	e02e      	b.n	800102e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM14)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	; (8001044 <HAL_TIM_Base_MspInit+0xc4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d116      	bne.n	8001008 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <HAL_TIM_Base_MspInit+0xbc>)
 8000fdc:	69da      	ldr	r2, [r3, #28]
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_TIM_Base_MspInit+0xbc>)
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	0049      	lsls	r1, r1, #1
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	61da      	str	r2, [r3, #28]
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_TIM_Base_MspInit+0xbc>)
 8000fea:	69da      	ldr	r2, [r3, #28]
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	2013      	movs	r0, #19
 8000ffc:	f000 f982 	bl	8001304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001000:	2013      	movs	r0, #19
 8001002:	f000 f994 	bl	800132e <HAL_NVIC_EnableIRQ>
}
 8001006:	e012      	b.n	800102e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM15)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <HAL_TIM_Base_MspInit+0xc8>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d10d      	bne.n	800102e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_TIM_Base_MspInit+0xbc>)
 8001014:	699a      	ldr	r2, [r3, #24]
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_TIM_Base_MspInit+0xbc>)
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	0249      	lsls	r1, r1, #9
 800101c:	430a      	orrs	r2, r1
 800101e:	619a      	str	r2, [r3, #24]
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_TIM_Base_MspInit+0xbc>)
 8001022:	699a      	ldr	r2, [r3, #24]
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	025b      	lsls	r3, r3, #9
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b006      	add	sp, #24
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	40001000 	.word	0x40001000
 800103c:	40021000 	.word	0x40021000
 8001040:	40001400 	.word	0x40001400
 8001044:	40002000 	.word	0x40002000
 8001048:	40014000 	.word	0x40014000

0800104c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800104e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001050:	480d      	ldr	r0, [pc, #52]	; (8001088 <LoopForever+0x6>)
  ldr r1, =_edata
 8001052:	490e      	ldr	r1, [pc, #56]	; (800108c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001054:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <LoopForever+0xe>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001068:	4c0b      	ldr	r4, [pc, #44]	; (8001098 <LoopForever+0x16>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001076:	f7ff fd43 	bl	8000b00 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800107a:	f003 f8f5 	bl	8004268 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800107e:	f7ff faf9 	bl	8000674 <main>

08001082 <LoopForever>:

LoopForever:
    b LoopForever
 8001082:	e7fe      	b.n	8001082 <LoopForever>
  ldr   r0, =_estack
 8001084:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800108c:	20000884 	.word	0x20000884
  ldr r2, =_sidata
 8001090:	08006c28 	.word	0x08006c28
  ldr r2, =_sbss
 8001094:	20000884 	.word	0x20000884
  ldr r4, =_ebss
 8001098:	20000f2c 	.word	0x20000f2c

0800109c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC1_COMP_IRQHandler>
	...

080010a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <HAL_Init+0x24>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_Init+0x24>)
 80010aa:	2110      	movs	r1, #16
 80010ac:	430a      	orrs	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f000 f809 	bl	80010c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b6:	f7ff fbab 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	40022000 	.word	0x40022000

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <HAL_InitTick+0x5c>)
 80010d2:	681c      	ldr	r4, [r3, #0]
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_InitTick+0x60>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	0019      	movs	r1, r3
 80010da:	23fa      	movs	r3, #250	; 0xfa
 80010dc:	0098      	lsls	r0, r3, #2
 80010de:	f7ff f813 	bl	8000108 <__udivsi3>
 80010e2:	0003      	movs	r3, r0
 80010e4:	0019      	movs	r1, r3
 80010e6:	0020      	movs	r0, r4
 80010e8:	f7ff f80e 	bl	8000108 <__udivsi3>
 80010ec:	0003      	movs	r3, r0
 80010ee:	0018      	movs	r0, r3
 80010f0:	f000 f92d 	bl	800134e <HAL_SYSTICK_Config>
 80010f4:	1e03      	subs	r3, r0, #0
 80010f6:	d001      	beq.n	80010fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e00f      	b.n	800111c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d80b      	bhi.n	800111a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	2301      	movs	r3, #1
 8001106:	425b      	negs	r3, r3
 8001108:	2200      	movs	r2, #0
 800110a:	0018      	movs	r0, r3
 800110c:	f000 f8fa 	bl	8001304 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_InitTick+0x64>)
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b003      	add	sp, #12
 8001122:	bd90      	pop	{r4, r7, pc}
 8001124:	20000804 	.word	0x20000804
 8001128:	2000080c 	.word	0x2000080c
 800112c:	20000808 	.word	0x20000808

08001130 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_IncTick+0x1c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	001a      	movs	r2, r3
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_IncTick+0x20>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	18d2      	adds	r2, r2, r3
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_IncTick+0x20>)
 8001142:	601a      	str	r2, [r3, #0]
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	2000080c 	.word	0x2000080c
 8001150:	20000f24 	.word	0x20000f24

08001154 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b02      	ldr	r3, [pc, #8]	; (8001164 <HAL_GetTick+0x10>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	0018      	movs	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	20000f24 	.word	0x20000f24

08001168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001170:	f7ff fff0 	bl	8001154 <HAL_GetTick>
 8001174:	0003      	movs	r3, r0
 8001176:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3301      	adds	r3, #1
 8001180:	d005      	beq.n	800118e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_Delay+0x40>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	001a      	movs	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	189b      	adds	r3, r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	f7ff ffe0 	bl	8001154 <HAL_GetTick>
 8001194:	0002      	movs	r2, r0
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	429a      	cmp	r2, r3
 800119e:	d8f7      	bhi.n	8001190 <HAL_Delay+0x28>
  {
  }
}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b004      	add	sp, #16
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000080c 	.word	0x2000080c

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	0002      	movs	r2, r0
 80011b4:	1dfb      	adds	r3, r7, #7
 80011b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	1dfb      	adds	r3, r7, #7
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b7f      	cmp	r3, #127	; 0x7f
 80011be:	d809      	bhi.n	80011d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c0:	1dfb      	adds	r3, r7, #7
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	001a      	movs	r2, r3
 80011c6:	231f      	movs	r3, #31
 80011c8:	401a      	ands	r2, r3
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__NVIC_EnableIRQ+0x30>)
 80011cc:	2101      	movs	r1, #1
 80011ce:	4091      	lsls	r1, r2
 80011d0:	000a      	movs	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]
  }
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b002      	add	sp, #8
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	0002      	movs	r2, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b7f      	cmp	r3, #127	; 0x7f
 80011f4:	d828      	bhi.n	8001248 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f6:	4a2f      	ldr	r2, [pc, #188]	; (80012b4 <__NVIC_SetPriority+0xd4>)
 80011f8:	1dfb      	adds	r3, r7, #7
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	33c0      	adds	r3, #192	; 0xc0
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	589b      	ldr	r3, [r3, r2]
 8001206:	1dfa      	adds	r2, r7, #7
 8001208:	7812      	ldrb	r2, [r2, #0]
 800120a:	0011      	movs	r1, r2
 800120c:	2203      	movs	r2, #3
 800120e:	400a      	ands	r2, r1
 8001210:	00d2      	lsls	r2, r2, #3
 8001212:	21ff      	movs	r1, #255	; 0xff
 8001214:	4091      	lsls	r1, r2
 8001216:	000a      	movs	r2, r1
 8001218:	43d2      	mvns	r2, r2
 800121a:	401a      	ands	r2, r3
 800121c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	019b      	lsls	r3, r3, #6
 8001222:	22ff      	movs	r2, #255	; 0xff
 8001224:	401a      	ands	r2, r3
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	0018      	movs	r0, r3
 800122c:	2303      	movs	r3, #3
 800122e:	4003      	ands	r3, r0
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001234:	481f      	ldr	r0, [pc, #124]	; (80012b4 <__NVIC_SetPriority+0xd4>)
 8001236:	1dfb      	adds	r3, r7, #7
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b25b      	sxtb	r3, r3
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	430a      	orrs	r2, r1
 8001240:	33c0      	adds	r3, #192	; 0xc0
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001246:	e031      	b.n	80012ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001248:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <__NVIC_SetPriority+0xd8>)
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	0019      	movs	r1, r3
 8001250:	230f      	movs	r3, #15
 8001252:	400b      	ands	r3, r1
 8001254:	3b08      	subs	r3, #8
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3306      	adds	r3, #6
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	18d3      	adds	r3, r2, r3
 800125e:	3304      	adds	r3, #4
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	1dfa      	adds	r2, r7, #7
 8001264:	7812      	ldrb	r2, [r2, #0]
 8001266:	0011      	movs	r1, r2
 8001268:	2203      	movs	r2, #3
 800126a:	400a      	ands	r2, r1
 800126c:	00d2      	lsls	r2, r2, #3
 800126e:	21ff      	movs	r1, #255	; 0xff
 8001270:	4091      	lsls	r1, r2
 8001272:	000a      	movs	r2, r1
 8001274:	43d2      	mvns	r2, r2
 8001276:	401a      	ands	r2, r3
 8001278:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	019b      	lsls	r3, r3, #6
 800127e:	22ff      	movs	r2, #255	; 0xff
 8001280:	401a      	ands	r2, r3
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	0018      	movs	r0, r3
 8001288:	2303      	movs	r3, #3
 800128a:	4003      	ands	r3, r0
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <__NVIC_SetPriority+0xd8>)
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	001c      	movs	r4, r3
 8001298:	230f      	movs	r3, #15
 800129a:	4023      	ands	r3, r4
 800129c:	3b08      	subs	r3, #8
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	430a      	orrs	r2, r1
 80012a2:	3306      	adds	r3, #6
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	18c3      	adds	r3, r0, r3
 80012a8:	3304      	adds	r3, #4
 80012aa:	601a      	str	r2, [r3, #0]
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b003      	add	sp, #12
 80012b2:	bd90      	pop	{r4, r7, pc}
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <SysTick_Config+0x40>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d901      	bls.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e010      	b.n	80012f4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <SysTick_Config+0x44>)
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	3a01      	subs	r2, #1
 80012d8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	2301      	movs	r3, #1
 80012dc:	425b      	negs	r3, r3
 80012de:	2103      	movs	r1, #3
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff ff7d 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <SysTick_Config+0x44>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <SysTick_Config+0x44>)
 80012ee:	2207      	movs	r2, #7
 80012f0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	0018      	movs	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	00ffffff 	.word	0x00ffffff
 8001300:	e000e010 	.word	0xe000e010

08001304 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	210f      	movs	r1, #15
 8001310:	187b      	adds	r3, r7, r1
 8001312:	1c02      	adds	r2, r0, #0
 8001314:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	187b      	adds	r3, r7, r1
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b25b      	sxtb	r3, r3
 800131e:	0011      	movs	r1, r2
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff ff5d 	bl	80011e0 <__NVIC_SetPriority>
}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	46bd      	mov	sp, r7
 800132a:	b004      	add	sp, #16
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	0002      	movs	r2, r0
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	b25b      	sxtb	r3, r3
 8001340:	0018      	movs	r0, r3
 8001342:	f7ff ff33 	bl	80011ac <__NVIC_EnableIRQ>
}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b002      	add	sp, #8
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	0018      	movs	r0, r3
 800135a:	f7ff ffaf 	bl	80012bc <SysTick_Config>
 800135e:	0003      	movs	r3, r0
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b002      	add	sp, #8
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e015      	b.n	80013a6 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	791b      	ldrb	r3, [r3, #4]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d106      	bne.n	8001392 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	0018      	movs	r0, r3
 800138e:	f7fe ff81 	bl	8000294 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2202      	movs	r2, #2
 8001396:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	0018      	movs	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b002      	add	sp, #8
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b002      	add	sp, #8
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b002      	add	sp, #8
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	46bd      	mov	sp, r7
 80013da:	b002      	add	sp, #8
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	795b      	ldrb	r3, [r3, #5]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <HAL_DAC_ConfigChannel+0x20>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e029      	b.n	8001454 <HAL_DAC_ConfigChannel+0x74>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2202      	movs	r2, #2
 800140a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8001414:	4a11      	ldr	r2, [pc, #68]	; (800145c <HAL_DAC_ConfigChannel+0x7c>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	409a      	lsls	r2, r3
 800141a:	0013      	movs	r3, r2
 800141c:	43da      	mvns	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	4013      	ands	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	409a      	lsls	r2, r3
 8001436:	0013      	movs	r3, r2
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	4313      	orrs	r3, r2
 800143c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2201      	movs	r2, #1
 800144a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	0018      	movs	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	b006      	add	sp, #24
 800145a:	bd80      	pop	{r7, pc}
 800145c:	00000ffe 	.word	0x00000ffe

08001460 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	795b      	ldrb	r3, [r3, #5]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d101      	bne.n	800147e <HAL_DAC_Start_DMA+0x1e>
 800147a:	2302      	movs	r3, #2
 800147c:	e092      	b.n	80015a4 <HAL_DAC_Start_DMA+0x144>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2201      	movs	r2, #1
 8001482:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2202      	movs	r2, #2
 8001488:	711a      	strb	r2, [r3, #4]
  
  if(Channel == DAC_CHANNEL_1)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d12b      	bne.n	80014e8 <HAL_DAC_Start_DMA+0x88>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4a45      	ldr	r2, [pc, #276]	; (80015ac <HAL_DAC_Start_DMA+0x14c>)
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4a44      	ldr	r2, [pc, #272]	; (80015b0 <HAL_DAC_Start_DMA+0x150>)
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a43      	ldr	r2, [pc, #268]	; (80015b4 <HAL_DAC_Start_DMA+0x154>)
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2180      	movs	r1, #128	; 0x80
 80014b4:	0149      	lsls	r1, r1, #5
 80014b6:	430a      	orrs	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d009      	beq.n	80014d4 <HAL_DAC_Start_DMA+0x74>
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d00c      	beq.n	80014de <HAL_DAC_Start_DMA+0x7e>
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d000      	beq.n	80014ca <HAL_DAC_Start_DMA+0x6a>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80014c8:	e03a      	b.n	8001540 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3308      	adds	r3, #8
 80014d0:	617b      	str	r3, [r7, #20]
        break;
 80014d2:	e035      	b.n	8001540 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	330c      	adds	r3, #12
 80014da:	617b      	str	r3, [r7, #20]
        break;
 80014dc:	e030      	b.n	8001540 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3310      	adds	r3, #16
 80014e4:	617b      	str	r3, [r7, #20]
        break;
 80014e6:	e02b      	b.n	8001540 <HAL_DAC_Start_DMA+0xe0>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	4a32      	ldr	r2, [pc, #200]	; (80015b8 <HAL_DAC_Start_DMA+0x158>)
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	4a31      	ldr	r2, [pc, #196]	; (80015bc <HAL_DAC_Start_DMA+0x15c>)
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	4a30      	ldr	r2, [pc, #192]	; (80015c0 <HAL_DAC_Start_DMA+0x160>)
 80014fe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	0549      	lsls	r1, r1, #21
 800150e:	430a      	orrs	r2, r1
 8001510:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 2 */
    switch(Alignment)
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	2b04      	cmp	r3, #4
 8001516:	d009      	beq.n	800152c <HAL_DAC_Start_DMA+0xcc>
 8001518:	2b08      	cmp	r3, #8
 800151a:	d00c      	beq.n	8001536 <HAL_DAC_Start_DMA+0xd6>
 800151c:	2b00      	cmp	r3, #0
 800151e:	d000      	beq.n	8001522 <HAL_DAC_Start_DMA+0xc2>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001520:	e00e      	b.n	8001540 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3314      	adds	r3, #20
 8001528:	617b      	str	r3, [r7, #20]
        break;
 800152a:	e009      	b.n	8001540 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3318      	adds	r3, #24
 8001532:	617b      	str	r3, [r7, #20]
        break;
 8001534:	e004      	b.n	8001540 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	331c      	adds	r3, #28
 800153c:	617b      	str	r3, [r7, #20]
        break;
 800153e:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  /* Enable the DMA channel */
  if(Channel == DAC_CHANNEL_1)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d110      	bne.n	8001568 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2180      	movs	r1, #128	; 0x80
 8001552:	0189      	lsls	r1, r1, #6
 8001554:	430a      	orrs	r2, r1
 8001556:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6898      	ldr	r0, [r3, #8]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	f000 f901 	bl	8001768 <HAL_DMA_Start_IT>
 8001566:	e00f      	b.n	8001588 <HAL_DAC_Start_DMA+0x128>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2180      	movs	r1, #128	; 0x80
 8001574:	0589      	lsls	r1, r1, #22
 8001576:	430a      	orrs	r2, r1
 8001578:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	68d8      	ldr	r0, [r3, #12]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	f000 f8f0 	bl	8001768 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6819      	ldr	r1, [r3, #0]
 800158e:	2201      	movs	r2, #1
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	409a      	lsls	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	0018      	movs	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b006      	add	sp, #24
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	080015c5 	.word	0x080015c5
 80015b0:	080015e9 	.word	0x080015e9
 80015b4:	08001607 	.word	0x08001607
 80015b8:	08001637 	.word	0x08001637
 80015bc:	0800165b 	.word	0x0800165b
 80015c0:	08001679 	.word	0x08001679

080015c4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	60fb      	str	r3, [r7, #12]
  
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	0018      	movs	r0, r3
 80015d6:	f7ff feea 	bl	80013ae <HAL_DAC_ConvCpltCallbackCh1>
  
  hdac->State= HAL_DAC_STATE_READY;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2201      	movs	r2, #1
 80015de:	711a      	strb	r2, [r3, #4]
}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b004      	add	sp, #16
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff fee0 	bl	80013be <HAL_DAC_ConvHalfCpltCallbackCh1>
}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b004      	add	sp, #16
 8001604:	bd80      	pop	{r7, pc}

08001606 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	2204      	movs	r2, #4
 800161a:	431a      	orrs	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	611a      	str	r2, [r3, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	0018      	movs	r0, r3
 8001624:	f7ff fed3 	bl	80013ce <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State= HAL_DAC_STATE_READY;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2201      	movs	r2, #1
 800162c:	711a      	strb	r2, [r3, #4]
}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	b004      	add	sp, #16
 8001634:	bd80      	pop	{r7, pc}

08001636 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	0018      	movs	r0, r3
 8001648:	f000 f82e 	bl	80016a8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2201      	movs	r2, #1
 8001650:	711a      	strb	r2, [r3, #4]
}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	46bd      	mov	sp, r7
 8001656:	b004      	add	sp, #16
 8001658:	bd80      	pop	{r7, pc}

0800165a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	0018      	movs	r0, r3
 800166c:	f000 f824 	bl	80016b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8001670:	46c0      	nop			; (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b004      	add	sp, #16
 8001676:	bd80      	pop	{r7, pc}

08001678 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	2204      	movs	r2, #4
 800168c:	431a      	orrs	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	0018      	movs	r0, r3
 8001696:	f000 f817 	bl	80016c8 <HAL_DACEx_ErrorCallbackCh2>
#endif 
  hdac->State= HAL_DAC_STATE_READY;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2201      	movs	r2, #1
 800169e:	711a      	strb	r2, [r3, #4]
}
 80016a0:	46c0      	nop			; (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b004      	add	sp, #16
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b002      	add	sp, #8
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80016c0:	46c0      	nop			; (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b002      	add	sp, #8
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b002      	add	sp, #8
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e036      	b.n	800175c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2221      	movs	r2, #33	; 0x21
 80016f2:	2102      	movs	r1, #2
 80016f4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4a18      	ldr	r2, [pc, #96]	; (8001764 <HAL_DMA_Init+0x8c>)
 8001702:	4013      	ands	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800170e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800171a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001726:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4313      	orrs	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	0018      	movs	r0, r3
 8001740:	f000 f946 	bl	80019d0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2221      	movs	r2, #33	; 0x21
 800174e:	2101      	movs	r1, #1
 8001750:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2220      	movs	r2, #32
 8001756:	2100      	movs	r1, #0
 8001758:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}  
 800175c:	0018      	movs	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	b004      	add	sp, #16
 8001762:	bd80      	pop	{r7, pc}
 8001764:	ffffc00f 	.word	0xffffc00f

08001768 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001776:	2317      	movs	r3, #23
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2220      	movs	r2, #32
 8001782:	5c9b      	ldrb	r3, [r3, r2]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <HAL_DMA_Start_IT+0x24>
 8001788:	2302      	movs	r3, #2
 800178a:	e04f      	b.n	800182c <HAL_DMA_Start_IT+0xc4>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2220      	movs	r2, #32
 8001790:	2101      	movs	r1, #1
 8001792:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2221      	movs	r2, #33	; 0x21
 8001798:	5c9b      	ldrb	r3, [r3, r2]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b01      	cmp	r3, #1
 800179e:	d13a      	bne.n	8001816 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2221      	movs	r2, #33	; 0x21
 80017a4:	2102      	movs	r1, #2
 80017a6:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2101      	movs	r1, #1
 80017ba:	438a      	bics	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	68b9      	ldr	r1, [r7, #8]
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 f8d7 	bl	8001978 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d008      	beq.n	80017e4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	210e      	movs	r1, #14
 80017de:	430a      	orrs	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e00f      	b.n	8001804 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	210a      	movs	r1, #10
 80017f0:	430a      	orrs	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2104      	movs	r1, #4
 8001800:	438a      	bics	r2, r1
 8001802:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2101      	movs	r1, #1
 8001810:	430a      	orrs	r2, r1
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e007      	b.n	8001826 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2220      	movs	r2, #32
 800181a:	2100      	movs	r1, #0
 800181c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800181e:	2317      	movs	r3, #23
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	2202      	movs	r2, #2
 8001824:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001826:	2317      	movs	r3, #23
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	781b      	ldrb	r3, [r3, #0]
} 
 800182c:	0018      	movs	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	b006      	add	sp, #24
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	2204      	movs	r2, #4
 8001852:	409a      	lsls	r2, r3
 8001854:	0013      	movs	r3, r2
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4013      	ands	r3, r2
 800185a:	d024      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x72>
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2204      	movs	r2, #4
 8001860:	4013      	ands	r3, r2
 8001862:	d020      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2220      	movs	r2, #32
 800186c:	4013      	ands	r3, r2
 800186e:	d107      	bne.n	8001880 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2104      	movs	r1, #4
 800187c:	438a      	bics	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001888:	2104      	movs	r1, #4
 800188a:	4091      	lsls	r1, r2
 800188c:	000a      	movs	r2, r1
 800188e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	2b00      	cmp	r3, #0
 8001896:	d100      	bne.n	800189a <HAL_DMA_IRQHandler+0x66>
 8001898:	e06a      	b.n	8001970 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	0010      	movs	r0, r2
 80018a2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80018a4:	e064      	b.n	8001970 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	2202      	movs	r2, #2
 80018ac:	409a      	lsls	r2, r3
 80018ae:	0013      	movs	r3, r2
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	4013      	ands	r3, r2
 80018b4:	d02b      	beq.n	800190e <HAL_DMA_IRQHandler+0xda>
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2202      	movs	r2, #2
 80018ba:	4013      	ands	r3, r2
 80018bc:	d027      	beq.n	800190e <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2220      	movs	r2, #32
 80018c6:	4013      	ands	r3, r2
 80018c8:	d10b      	bne.n	80018e2 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	210a      	movs	r1, #10
 80018d6:	438a      	bics	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2221      	movs	r2, #33	; 0x21
 80018de:	2101      	movs	r1, #1
 80018e0:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ea:	2102      	movs	r1, #2
 80018ec:	4091      	lsls	r1, r2
 80018ee:	000a      	movs	r2, r1
 80018f0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2220      	movs	r2, #32
 80018f6:	2100      	movs	r1, #0
 80018f8:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d036      	beq.n	8001970 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	0010      	movs	r0, r2
 800190a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800190c:	e030      	b.n	8001970 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	2208      	movs	r2, #8
 8001914:	409a      	lsls	r2, r3
 8001916:	0013      	movs	r3, r2
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4013      	ands	r3, r2
 800191c:	d028      	beq.n	8001970 <HAL_DMA_IRQHandler+0x13c>
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2208      	movs	r2, #8
 8001922:	4013      	ands	r3, r2
 8001924:	d024      	beq.n	8001970 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	210e      	movs	r1, #14
 8001932:	438a      	bics	r2, r1
 8001934:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193e:	2101      	movs	r1, #1
 8001940:	4091      	lsls	r1, r2
 8001942:	000a      	movs	r2, r1
 8001944:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2221      	movs	r2, #33	; 0x21
 8001950:	2101      	movs	r1, #1
 8001952:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2220      	movs	r2, #32
 8001958:	2100      	movs	r1, #0
 800195a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	0010      	movs	r0, r2
 800196c:	4798      	blx	r3
    }
   }
}  
 800196e:	e7ff      	b.n	8001970 <HAL_DMA_IRQHandler+0x13c>
 8001970:	46c0      	nop			; (mov r8, r8)
 8001972:	46bd      	mov	sp, r7
 8001974:	b004      	add	sp, #16
 8001976:	bd80      	pop	{r7, pc}

08001978 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198e:	2101      	movs	r1, #1
 8001990:	4091      	lsls	r1, r2
 8001992:	000a      	movs	r2, r1
 8001994:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b10      	cmp	r3, #16
 80019a4:	d108      	bne.n	80019b8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019b6:	e007      	b.n	80019c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	60da      	str	r2, [r3, #12]
}
 80019c8:	46c0      	nop			; (mov r8, r8)
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b004      	add	sp, #16
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a08      	ldr	r2, [pc, #32]	; (8001a00 <DMA_CalcBaseAndBitshift+0x30>)
 80019de:	4694      	mov	ip, r2
 80019e0:	4463      	add	r3, ip
 80019e2:	2114      	movs	r1, #20
 80019e4:	0018      	movs	r0, r3
 80019e6:	f7fe fb8f 	bl	8000108 <__udivsi3>
 80019ea:	0003      	movs	r3, r0
 80019ec:	009a      	lsls	r2, r3, #2
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a03      	ldr	r2, [pc, #12]	; (8001a04 <DMA_CalcBaseAndBitshift+0x34>)
 80019f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b002      	add	sp, #8
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	bffdfff8 	.word	0xbffdfff8
 8001a04:	40020000 	.word	0x40020000

08001a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a16:	e155      	b.n	8001cc4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4091      	lsls	r1, r2
 8001a22:	000a      	movs	r2, r1
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d100      	bne.n	8001a30 <HAL_GPIO_Init+0x28>
 8001a2e:	e146      	b.n	8001cbe <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x38>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b12      	cmp	r3, #18
 8001a3e:	d123      	bne.n	8001a88 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	08da      	lsrs	r2, r3, #3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3208      	adds	r2, #8
 8001a48:	0092      	lsls	r2, r2, #2
 8001a4a:	58d3      	ldr	r3, [r2, r3]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2207      	movs	r2, #7
 8001a52:	4013      	ands	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	220f      	movs	r2, #15
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	0013      	movs	r3, r2
 8001a5c:	43da      	mvns	r2, r3
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2107      	movs	r1, #7
 8001a6c:	400b      	ands	r3, r1
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	409a      	lsls	r2, r3
 8001a72:	0013      	movs	r3, r2
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	08da      	lsrs	r2, r3, #3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3208      	adds	r2, #8
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	6939      	ldr	r1, [r7, #16]
 8001a86:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	409a      	lsls	r2, r3
 8001a96:	0013      	movs	r3, r2
 8001a98:	43da      	mvns	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	409a      	lsls	r2, r3
 8001aae:	0013      	movs	r3, r2
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d00b      	beq.n	8001adc <HAL_GPIO_Init+0xd4>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d007      	beq.n	8001adc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ad0:	2b11      	cmp	r3, #17
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b12      	cmp	r3, #18
 8001ada:	d130      	bne.n	8001b3e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	0013      	movs	r3, r2
 8001aec:	43da      	mvns	r2, r3
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	409a      	lsls	r2, r3
 8001afe:	0013      	movs	r3, r2
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b12:	2201      	movs	r2, #1
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
 8001b18:	0013      	movs	r3, r2
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	091b      	lsrs	r3, r3, #4
 8001b28:	2201      	movs	r2, #1
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	0013      	movs	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	0013      	movs	r3, r2
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	0013      	movs	r3, r2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	055b      	lsls	r3, r3, #21
 8001b76:	4013      	ands	r3, r2
 8001b78:	d100      	bne.n	8001b7c <HAL_GPIO_Init+0x174>
 8001b7a:	e0a0      	b.n	8001cbe <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7c:	4b57      	ldr	r3, [pc, #348]	; (8001cdc <HAL_GPIO_Init+0x2d4>)
 8001b7e:	699a      	ldr	r2, [r3, #24]
 8001b80:	4b56      	ldr	r3, [pc, #344]	; (8001cdc <HAL_GPIO_Init+0x2d4>)
 8001b82:	2101      	movs	r1, #1
 8001b84:	430a      	orrs	r2, r1
 8001b86:	619a      	str	r2, [r3, #24]
 8001b88:	4b54      	ldr	r3, [pc, #336]	; (8001cdc <HAL_GPIO_Init+0x2d4>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4013      	ands	r3, r2
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b94:	4a52      	ldr	r2, [pc, #328]	; (8001ce0 <HAL_GPIO_Init+0x2d8>)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	589b      	ldr	r3, [r3, r2]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	220f      	movs	r2, #15
 8001bac:	409a      	lsls	r2, r3
 8001bae:	0013      	movs	r3, r2
 8001bb0:	43da      	mvns	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	2390      	movs	r3, #144	; 0x90
 8001bbc:	05db      	lsls	r3, r3, #23
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d019      	beq.n	8001bf6 <HAL_GPIO_Init+0x1ee>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a47      	ldr	r2, [pc, #284]	; (8001ce4 <HAL_GPIO_Init+0x2dc>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d013      	beq.n	8001bf2 <HAL_GPIO_Init+0x1ea>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a46      	ldr	r2, [pc, #280]	; (8001ce8 <HAL_GPIO_Init+0x2e0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00d      	beq.n	8001bee <HAL_GPIO_Init+0x1e6>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a45      	ldr	r2, [pc, #276]	; (8001cec <HAL_GPIO_Init+0x2e4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d007      	beq.n	8001bea <HAL_GPIO_Init+0x1e2>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a44      	ldr	r2, [pc, #272]	; (8001cf0 <HAL_GPIO_Init+0x2e8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_GPIO_Init+0x1de>
 8001be2:	2304      	movs	r3, #4
 8001be4:	e008      	b.n	8001bf8 <HAL_GPIO_Init+0x1f0>
 8001be6:	2305      	movs	r3, #5
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x1f0>
 8001bea:	2303      	movs	r3, #3
 8001bec:	e004      	b.n	8001bf8 <HAL_GPIO_Init+0x1f0>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e002      	b.n	8001bf8 <HAL_GPIO_Init+0x1f0>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_GPIO_Init+0x1f0>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	2103      	movs	r1, #3
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	4093      	lsls	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c08:	4935      	ldr	r1, [pc, #212]	; (8001ce0 <HAL_GPIO_Init+0x2d8>)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	3302      	adds	r3, #2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c16:	4b37      	ldr	r3, [pc, #220]	; (8001cf4 <HAL_GPIO_Init+0x2ec>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	025b      	lsls	r3, r3, #9
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c3a:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <HAL_GPIO_Init+0x2ec>)
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001c40:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <HAL_GPIO_Init+0x2ec>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	43da      	mvns	r2, r3
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	029b      	lsls	r3, r3, #10
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c64:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <HAL_GPIO_Init+0x2ec>)
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c6a:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <HAL_GPIO_Init+0x2ec>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43da      	mvns	r2, r3
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	035b      	lsls	r3, r3, #13
 8001c82:	4013      	ands	r3, r2
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c8e:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <HAL_GPIO_Init+0x2ec>)
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c94:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <HAL_GPIO_Init+0x2ec>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	43da      	mvns	r2, r3
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	039b      	lsls	r3, r3, #14
 8001cac:	4013      	ands	r3, r2
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <HAL_GPIO_Init+0x2ec>)
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	40da      	lsrs	r2, r3
 8001ccc:	1e13      	subs	r3, r2, #0
 8001cce:	d000      	beq.n	8001cd2 <HAL_GPIO_Init+0x2ca>
 8001cd0:	e6a2      	b.n	8001a18 <HAL_GPIO_Init+0x10>
  } 
}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b006      	add	sp, #24
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	48000400 	.word	0x48000400
 8001ce8:	48000800 	.word	0x48000800
 8001cec:	48000c00 	.word	0x48000c00
 8001cf0:	48001000 	.word	0x48001000
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	0008      	movs	r0, r1
 8001d02:	0011      	movs	r1, r2
 8001d04:	1cbb      	adds	r3, r7, #2
 8001d06:	1c02      	adds	r2, r0, #0
 8001d08:	801a      	strh	r2, [r3, #0]
 8001d0a:	1c7b      	adds	r3, r7, #1
 8001d0c:	1c0a      	adds	r2, r1, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d10:	1c7b      	adds	r3, r7, #1
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d004      	beq.n	8001d22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d18:	1cbb      	adds	r3, r7, #2
 8001d1a:	881a      	ldrh	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d20:	e003      	b.n	8001d2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d22:	1cbb      	adds	r3, r7, #2
 8001d24:	881a      	ldrh	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b002      	add	sp, #8
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	1dbb      	adds	r3, r7, #6
 8001d3e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	1dba      	adds	r2, r7, #6
 8001d46:	8812      	ldrh	r2, [r2, #0]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d008      	beq.n	8001d5e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001d4e:	1dba      	adds	r2, r7, #6
 8001d50:	8812      	ldrh	r2, [r2, #0]
 8001d52:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d54:	1dbb      	adds	r3, r7, #6
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f000 f807 	bl	8001d6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b002      	add	sp, #8
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	40010400 	.word	0x40010400

08001d6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	0002      	movs	r2, r0
 8001d74:	1dbb      	adds	r3, r7, #6
 8001d76:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b002      	add	sp, #8
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e082      	b.n	8001e98 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2241      	movs	r2, #65	; 0x41
 8001d96:	5c9b      	ldrb	r3, [r3, r2]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d107      	bne.n	8001dae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2240      	movs	r2, #64	; 0x40
 8001da2:	2100      	movs	r1, #0
 8001da4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	0018      	movs	r0, r3
 8001daa:	f7fe fbe1 	bl	8000570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2241      	movs	r2, #65	; 0x41
 8001db2:	2124      	movs	r1, #36	; 0x24
 8001db4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	438a      	bics	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4934      	ldr	r1, [pc, #208]	; (8001ea0 <HAL_I2C_Init+0x120>)
 8001dd0:	400a      	ands	r2, r1
 8001dd2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4931      	ldr	r1, [pc, #196]	; (8001ea4 <HAL_I2C_Init+0x124>)
 8001de0:	400a      	ands	r2, r1
 8001de2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d108      	bne.n	8001dfe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2180      	movs	r1, #128	; 0x80
 8001df6:	0209      	lsls	r1, r1, #8
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	e007      	b.n	8001e0e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2184      	movs	r1, #132	; 0x84
 8001e08:	0209      	lsls	r1, r1, #8
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d104      	bne.n	8001e20 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2280      	movs	r2, #128	; 0x80
 8001e1c:	0112      	lsls	r2, r2, #4
 8001e1e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	491f      	ldr	r1, [pc, #124]	; (8001ea8 <HAL_I2C_Init+0x128>)
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	491a      	ldr	r1, [pc, #104]	; (8001ea4 <HAL_I2C_Init+0x124>)
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	0011      	movs	r1, r2
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	021a      	lsls	r2, r3, #8
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69d9      	ldr	r1, [r3, #28]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1a      	ldr	r2, [r3, #32]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2101      	movs	r1, #1
 8001e76:	430a      	orrs	r2, r1
 8001e78:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2241      	movs	r2, #65	; 0x41
 8001e84:	2120      	movs	r1, #32
 8001e86:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2242      	movs	r2, #66	; 0x42
 8001e92:	2100      	movs	r1, #0
 8001e94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b002      	add	sp, #8
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	f0ffffff 	.word	0xf0ffffff
 8001ea4:	ffff7fff 	.word	0xffff7fff
 8001ea8:	02008000 	.word	0x02008000

08001eac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b089      	sub	sp, #36	; 0x24
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	000c      	movs	r4, r1
 8001eb6:	0010      	movs	r0, r2
 8001eb8:	0019      	movs	r1, r3
 8001eba:	230a      	movs	r3, #10
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	1c22      	adds	r2, r4, #0
 8001ec0:	801a      	strh	r2, [r3, #0]
 8001ec2:	2308      	movs	r3, #8
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	1c02      	adds	r2, r0, #0
 8001ec8:	801a      	strh	r2, [r3, #0]
 8001eca:	1dbb      	adds	r3, r7, #6
 8001ecc:	1c0a      	adds	r2, r1, #0
 8001ece:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2241      	movs	r2, #65	; 0x41
 8001ed4:	5c9b      	ldrb	r3, [r3, r2]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d000      	beq.n	8001ede <HAL_I2C_Mem_Write+0x32>
 8001edc:	e10c      	b.n	80020f8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d004      	beq.n	8001eee <HAL_I2C_Mem_Write+0x42>
 8001ee4:	232c      	movs	r3, #44	; 0x2c
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d105      	bne.n	8001efa <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2280      	movs	r2, #128	; 0x80
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0ff      	b.n	80020fa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2240      	movs	r2, #64	; 0x40
 8001efe:	5c9b      	ldrb	r3, [r3, r2]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_I2C_Mem_Write+0x5c>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e0f8      	b.n	80020fa <HAL_I2C_Mem_Write+0x24e>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2240      	movs	r2, #64	; 0x40
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f10:	f7ff f920 	bl	8001154 <HAL_GetTick>
 8001f14:	0003      	movs	r3, r0
 8001f16:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	0219      	lsls	r1, r3, #8
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2319      	movs	r3, #25
 8001f24:	2201      	movs	r2, #1
 8001f26:	f000 fa8f 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 8001f2a:	1e03      	subs	r3, r0, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0e3      	b.n	80020fa <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2241      	movs	r2, #65	; 0x41
 8001f36:	2121      	movs	r1, #33	; 0x21
 8001f38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2242      	movs	r2, #66	; 0x42
 8001f3e:	2140      	movs	r1, #64	; 0x40
 8001f40:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	222c      	movs	r2, #44	; 0x2c
 8001f52:	18ba      	adds	r2, r7, r2
 8001f54:	8812      	ldrh	r2, [r2, #0]
 8001f56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f5e:	1dbb      	adds	r3, r7, #6
 8001f60:	881c      	ldrh	r4, [r3, #0]
 8001f62:	2308      	movs	r3, #8
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	881a      	ldrh	r2, [r3, #0]
 8001f68:	230a      	movs	r3, #10
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	8819      	ldrh	r1, [r3, #0]
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	0023      	movs	r3, r4
 8001f7a:	f000 f9df 	bl	800233c <I2C_RequestMemoryWrite>
 8001f7e:	1e03      	subs	r3, r0, #0
 8001f80:	d005      	beq.n	8001f8e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2240      	movs	r2, #64	; 0x40
 8001f86:	2100      	movs	r1, #0
 8001f88:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e0b5      	b.n	80020fa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2bff      	cmp	r3, #255	; 0xff
 8001f96:	d911      	bls.n	8001fbc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	22ff      	movs	r2, #255	; 0xff
 8001f9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	045c      	lsls	r4, r3, #17
 8001fa8:	230a      	movs	r3, #10
 8001faa:	18fb      	adds	r3, r7, r3
 8001fac:	8819      	ldrh	r1, [r3, #0]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	0023      	movs	r3, r4
 8001fb6:	f000 fb67 	bl	8002688 <I2C_TransferConfig>
 8001fba:	e012      	b.n	8001fe2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	049c      	lsls	r4, r3, #18
 8001fd0:	230a      	movs	r3, #10
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	8819      	ldrh	r1, [r3, #0]
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	0023      	movs	r3, r4
 8001fde:	f000 fb53 	bl	8002688 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f000 fa6c 	bl	80024c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fee:	1e03      	subs	r3, r0, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e081      	b.n	80020fa <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d03a      	beq.n	80020a6 <HAL_I2C_Mem_Write+0x1fa>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002034:	2b00      	cmp	r3, #0
 8002036:	d136      	bne.n	80020a6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	0013      	movs	r3, r2
 8002042:	2200      	movs	r2, #0
 8002044:	2180      	movs	r1, #128	; 0x80
 8002046:	f000 f9ff 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 800204a:	1e03      	subs	r3, r0, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e053      	b.n	80020fa <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002056:	b29b      	uxth	r3, r3
 8002058:	2bff      	cmp	r3, #255	; 0xff
 800205a:	d911      	bls.n	8002080 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	22ff      	movs	r2, #255	; 0xff
 8002060:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002066:	b2da      	uxtb	r2, r3
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	045c      	lsls	r4, r3, #17
 800206c:	230a      	movs	r3, #10
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	8819      	ldrh	r1, [r3, #0]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	2300      	movs	r3, #0
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	0023      	movs	r3, r4
 800207a:	f000 fb05 	bl	8002688 <I2C_TransferConfig>
 800207e:	e012      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208e:	b2da      	uxtb	r2, r3
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	049c      	lsls	r4, r3, #18
 8002094:	230a      	movs	r3, #10
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	8819      	ldrh	r1, [r3, #0]
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	2300      	movs	r3, #0
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	0023      	movs	r3, r4
 80020a2:	f000 faf1 	bl	8002688 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d198      	bne.n	8001fe2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	0018      	movs	r0, r3
 80020b8:	f000 fa44 	bl	8002544 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020bc:	1e03      	subs	r3, r0, #0
 80020be:	d001      	beq.n	80020c4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e01a      	b.n	80020fa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2220      	movs	r2, #32
 80020ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	490b      	ldr	r1, [pc, #44]	; (8002104 <HAL_I2C_Mem_Write+0x258>)
 80020d8:	400a      	ands	r2, r1
 80020da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2241      	movs	r2, #65	; 0x41
 80020e0:	2120      	movs	r1, #32
 80020e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2242      	movs	r2, #66	; 0x42
 80020e8:	2100      	movs	r1, #0
 80020ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2240      	movs	r2, #64	; 0x40
 80020f0:	2100      	movs	r1, #0
 80020f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	e000      	b.n	80020fa <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80020f8:	2302      	movs	r3, #2
  }
}
 80020fa:	0018      	movs	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b007      	add	sp, #28
 8002100:	bd90      	pop	{r4, r7, pc}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	fe00e800 	.word	0xfe00e800

08002108 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	230a      	movs	r3, #10
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	1c0a      	adds	r2, r1, #0
 800211a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2241      	movs	r2, #65	; 0x41
 8002124:	5c9b      	ldrb	r3, [r3, r2]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b20      	cmp	r3, #32
 800212a:	d000      	beq.n	800212e <HAL_I2C_IsDeviceReady+0x26>
 800212c:	e0fe      	b.n	800232c <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699a      	ldr	r2, [r3, #24]
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	401a      	ands	r2, r3
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	429a      	cmp	r2, r3
 8002140:	d101      	bne.n	8002146 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8002142:	2302      	movs	r3, #2
 8002144:	e0f3      	b.n	800232e <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2240      	movs	r2, #64	; 0x40
 800214a:	5c9b      	ldrb	r3, [r3, r2]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_I2C_IsDeviceReady+0x4c>
 8002150:	2302      	movs	r3, #2
 8002152:	e0ec      	b.n	800232e <HAL_I2C_IsDeviceReady+0x226>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2240      	movs	r2, #64	; 0x40
 8002158:	2101      	movs	r1, #1
 800215a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2241      	movs	r2, #65	; 0x41
 8002160:	2124      	movs	r1, #36	; 0x24
 8002162:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d107      	bne.n	8002182 <HAL_I2C_IsDeviceReady+0x7a>
 8002172:	230a      	movs	r3, #10
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	059b      	lsls	r3, r3, #22
 800217a:	0d9b      	lsrs	r3, r3, #22
 800217c:	4a6e      	ldr	r2, [pc, #440]	; (8002338 <HAL_I2C_IsDeviceReady+0x230>)
 800217e:	431a      	orrs	r2, r3
 8002180:	e007      	b.n	8002192 <HAL_I2C_IsDeviceReady+0x8a>
 8002182:	230a      	movs	r3, #10
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	059b      	lsls	r3, r3, #22
 800218a:	0d9b      	lsrs	r3, r3, #22
 800218c:	22a0      	movs	r2, #160	; 0xa0
 800218e:	0192      	lsls	r2, r2, #6
 8002190:	431a      	orrs	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002198:	f7fe ffdc 	bl	8001154 <HAL_GetTick>
 800219c:	0003      	movs	r3, r0
 800219e:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2220      	movs	r2, #32
 80021a8:	4013      	ands	r3, r2
 80021aa:	3b20      	subs	r3, #32
 80021ac:	425a      	negs	r2, r3
 80021ae:	4153      	adcs	r3, r2
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	231f      	movs	r3, #31
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2210      	movs	r2, #16
 80021c0:	4013      	ands	r3, r2
 80021c2:	3b10      	subs	r3, #16
 80021c4:	425a      	negs	r2, r3
 80021c6:	4153      	adcs	r3, r2
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	231e      	movs	r3, #30
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80021d0:	e035      	b.n	800223e <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	3301      	adds	r3, #1
 80021d6:	d01a      	beq.n	800220e <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021d8:	f7fe ffbc 	bl	8001154 <HAL_GetTick>
 80021dc:	0002      	movs	r2, r0
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d302      	bcc.n	80021ee <HAL_I2C_IsDeviceReady+0xe6>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10f      	bne.n	800220e <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2241      	movs	r2, #65	; 0x41
 80021f2:	2120      	movs	r1, #32
 80021f4:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	2220      	movs	r2, #32
 80021fc:	431a      	orrs	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2240      	movs	r2, #64	; 0x40
 8002206:	2100      	movs	r1, #0
 8002208:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e08f      	b.n	800232e <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	2220      	movs	r2, #32
 8002216:	4013      	ands	r3, r2
 8002218:	3b20      	subs	r3, #32
 800221a:	425a      	negs	r2, r3
 800221c:	4153      	adcs	r3, r2
 800221e:	b2da      	uxtb	r2, r3
 8002220:	231f      	movs	r3, #31
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	2210      	movs	r2, #16
 800222e:	4013      	ands	r3, r2
 8002230:	3b10      	subs	r3, #16
 8002232:	425a      	negs	r2, r3
 8002234:	4153      	adcs	r3, r2
 8002236:	b2da      	uxtb	r2, r3
 8002238:	231e      	movs	r3, #30
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800223e:	231f      	movs	r3, #31
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d104      	bne.n	8002252 <HAL_I2C_IsDeviceReady+0x14a>
 8002248:	231e      	movs	r3, #30
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0bf      	beq.n	80021d2 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2210      	movs	r2, #16
 800225a:	4013      	ands	r3, r2
 800225c:	2b10      	cmp	r3, #16
 800225e:	d01a      	beq.n	8002296 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	0013      	movs	r3, r2
 800226a:	2200      	movs	r2, #0
 800226c:	2120      	movs	r1, #32
 800226e:	f000 f8eb 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 8002272:	1e03      	subs	r3, r0, #0
 8002274:	d001      	beq.n	800227a <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e059      	b.n	800232e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2220      	movs	r2, #32
 8002280:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2241      	movs	r2, #65	; 0x41
 8002286:	2120      	movs	r1, #32
 8002288:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2240      	movs	r2, #64	; 0x40
 800228e:	2100      	movs	r1, #0
 8002290:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	e04b      	b.n	800232e <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	0013      	movs	r3, r2
 80022a0:	2200      	movs	r2, #0
 80022a2:	2120      	movs	r1, #32
 80022a4:	f000 f8d0 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 80022a8:	1e03      	subs	r3, r0, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e03e      	b.n	800232e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2210      	movs	r2, #16
 80022b6:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2220      	movs	r2, #32
 80022be:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d119      	bne.n	80022fc <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2180      	movs	r1, #128	; 0x80
 80022d4:	01c9      	lsls	r1, r1, #7
 80022d6:	430a      	orrs	r2, r1
 80022d8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	0013      	movs	r3, r2
 80022e4:	2200      	movs	r2, #0
 80022e6:	2120      	movs	r1, #32
 80022e8:	f000 f8ae 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 80022ec:	1e03      	subs	r3, r0, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e01c      	b.n	800232e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2220      	movs	r2, #32
 80022fa:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3301      	adds	r3, #1
 8002300:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	429a      	cmp	r2, r3
 8002308:	d900      	bls.n	800230c <HAL_I2C_IsDeviceReady+0x204>
 800230a:	e72e      	b.n	800216a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2241      	movs	r2, #65	; 0x41
 8002310:	2120      	movs	r1, #32
 8002312:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002318:	2220      	movs	r2, #32
 800231a:	431a      	orrs	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2240      	movs	r2, #64	; 0x40
 8002324:	2100      	movs	r1, #0
 8002326:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 800232c:	2302      	movs	r3, #2
  }
}
 800232e:	0018      	movs	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	b008      	add	sp, #32
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	02002000 	.word	0x02002000

0800233c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800233c:	b5b0      	push	{r4, r5, r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af02      	add	r7, sp, #8
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	000c      	movs	r4, r1
 8002346:	0010      	movs	r0, r2
 8002348:	0019      	movs	r1, r3
 800234a:	250a      	movs	r5, #10
 800234c:	197b      	adds	r3, r7, r5
 800234e:	1c22      	adds	r2, r4, #0
 8002350:	801a      	strh	r2, [r3, #0]
 8002352:	2308      	movs	r3, #8
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	1c02      	adds	r2, r0, #0
 8002358:	801a      	strh	r2, [r3, #0]
 800235a:	1dbb      	adds	r3, r7, #6
 800235c:	1c0a      	adds	r2, r1, #0
 800235e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002360:	1dbb      	adds	r3, r7, #6
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	045c      	lsls	r4, r3, #17
 800236a:	197b      	adds	r3, r7, r5
 800236c:	8819      	ldrh	r1, [r3, #0]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	4b23      	ldr	r3, [pc, #140]	; (8002400 <I2C_RequestMemoryWrite+0xc4>)
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	0023      	movs	r3, r4
 8002376:	f000 f987 	bl	8002688 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800237a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237c:	6a39      	ldr	r1, [r7, #32]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	0018      	movs	r0, r3
 8002382:	f000 f8a0 	bl	80024c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002386:	1e03      	subs	r3, r0, #0
 8002388:	d001      	beq.n	800238e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e033      	b.n	80023f6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800238e:	1dbb      	adds	r3, r7, #6
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d107      	bne.n	80023a6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002396:	2308      	movs	r3, #8
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
 80023a4:	e019      	b.n	80023da <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023a6:	2308      	movs	r3, #8
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ba:	6a39      	ldr	r1, [r7, #32]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	0018      	movs	r0, r3
 80023c0:	f000 f881 	bl	80024c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80023c4:	1e03      	subs	r3, r0, #0
 80023c6:	d001      	beq.n	80023cc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e014      	b.n	80023f6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023cc:	2308      	movs	r3, #8
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80023da:	6a3a      	ldr	r2, [r7, #32]
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	0013      	movs	r3, r2
 80023e4:	2200      	movs	r2, #0
 80023e6:	2180      	movs	r1, #128	; 0x80
 80023e8:	f000 f82e 	bl	8002448 <I2C_WaitOnFlagUntilTimeout>
 80023ec:	1e03      	subs	r3, r0, #0
 80023ee:	d001      	beq.n	80023f4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	0018      	movs	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b004      	add	sp, #16
 80023fc:	bdb0      	pop	{r4, r5, r7, pc}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	80002000 	.word	0x80002000

08002404 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2202      	movs	r2, #2
 8002414:	4013      	ands	r3, r2
 8002416:	2b02      	cmp	r3, #2
 8002418:	d103      	bne.n	8002422 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2200      	movs	r2, #0
 8002420:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	2201      	movs	r2, #1
 800242a:	4013      	ands	r3, r2
 800242c:	2b01      	cmp	r3, #1
 800242e:	d007      	beq.n	8002440 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2101      	movs	r1, #1
 800243c:	430a      	orrs	r2, r1
 800243e:	619a      	str	r2, [r3, #24]
  }
}
 8002440:	46c0      	nop			; (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b002      	add	sp, #8
 8002446:	bd80      	pop	{r7, pc}

08002448 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	1dfb      	adds	r3, r7, #7
 8002456:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002458:	e021      	b.n	800249e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	3301      	adds	r3, #1
 800245e:	d01e      	beq.n	800249e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002460:	f7fe fe78 	bl	8001154 <HAL_GetTick>
 8002464:	0002      	movs	r2, r0
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d302      	bcc.n	8002476 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d113      	bne.n	800249e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	2220      	movs	r2, #32
 800247c:	431a      	orrs	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2241      	movs	r2, #65	; 0x41
 8002486:	2120      	movs	r1, #32
 8002488:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2242      	movs	r2, #66	; 0x42
 800248e:	2100      	movs	r1, #0
 8002490:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2240      	movs	r2, #64	; 0x40
 8002496:	2100      	movs	r1, #0
 8002498:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e00f      	b.n	80024be <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	4013      	ands	r3, r2
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	425a      	negs	r2, r3
 80024ae:	4153      	adcs	r3, r2
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	001a      	movs	r2, r3
 80024b4:	1dfb      	adds	r3, r7, #7
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d0ce      	beq.n	800245a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	0018      	movs	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b004      	add	sp, #16
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024d2:	e02b      	b.n	800252c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	0018      	movs	r0, r3
 80024dc:	f000 f86e 	bl	80025bc <I2C_IsAcknowledgeFailed>
 80024e0:	1e03      	subs	r3, r0, #0
 80024e2:	d001      	beq.n	80024e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e029      	b.n	800253c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	3301      	adds	r3, #1
 80024ec:	d01e      	beq.n	800252c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ee:	f7fe fe31 	bl	8001154 <HAL_GetTick>
 80024f2:	0002      	movs	r2, r0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d302      	bcc.n	8002504 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d113      	bne.n	800252c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	2220      	movs	r2, #32
 800250a:	431a      	orrs	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2241      	movs	r2, #65	; 0x41
 8002514:	2120      	movs	r1, #32
 8002516:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2242      	movs	r2, #66	; 0x42
 800251c:	2100      	movs	r1, #0
 800251e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2240      	movs	r2, #64	; 0x40
 8002524:	2100      	movs	r1, #0
 8002526:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e007      	b.n	800253c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2202      	movs	r2, #2
 8002534:	4013      	ands	r3, r2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d1cc      	bne.n	80024d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	0018      	movs	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	b004      	add	sp, #16
 8002542:	bd80      	pop	{r7, pc}

08002544 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002550:	e028      	b.n	80025a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	0018      	movs	r0, r3
 800255a:	f000 f82f 	bl	80025bc <I2C_IsAcknowledgeFailed>
 800255e:	1e03      	subs	r3, r0, #0
 8002560:	d001      	beq.n	8002566 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e026      	b.n	80025b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002566:	f7fe fdf5 	bl	8001154 <HAL_GetTick>
 800256a:	0002      	movs	r2, r0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	429a      	cmp	r2, r3
 8002574:	d302      	bcc.n	800257c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d113      	bne.n	80025a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002580:	2220      	movs	r2, #32
 8002582:	431a      	orrs	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2241      	movs	r2, #65	; 0x41
 800258c:	2120      	movs	r1, #32
 800258e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2242      	movs	r2, #66	; 0x42
 8002594:	2100      	movs	r1, #0
 8002596:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2240      	movs	r2, #64	; 0x40
 800259c:	2100      	movs	r1, #0
 800259e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e007      	b.n	80025b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	2220      	movs	r2, #32
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d1cf      	bne.n	8002552 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	0018      	movs	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b004      	add	sp, #16
 80025ba:	bd80      	pop	{r7, pc}

080025bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2210      	movs	r2, #16
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d151      	bne.n	800267a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025d6:	e021      	b.n	800261c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	3301      	adds	r3, #1
 80025dc:	d01e      	beq.n	800261c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025de:	f7fe fdb9 	bl	8001154 <HAL_GetTick>
 80025e2:	0002      	movs	r2, r0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d302      	bcc.n	80025f4 <I2C_IsAcknowledgeFailed+0x38>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d113      	bne.n	800261c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	2220      	movs	r2, #32
 80025fa:	431a      	orrs	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2241      	movs	r2, #65	; 0x41
 8002604:	2120      	movs	r1, #32
 8002606:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2242      	movs	r2, #66	; 0x42
 800260c:	2100      	movs	r1, #0
 800260e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2240      	movs	r2, #64	; 0x40
 8002614:	2100      	movs	r1, #0
 8002616:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e02f      	b.n	800267c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2220      	movs	r2, #32
 8002624:	4013      	ands	r3, r2
 8002626:	2b20      	cmp	r3, #32
 8002628:	d1d6      	bne.n	80025d8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2210      	movs	r2, #16
 8002630:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2220      	movs	r2, #32
 8002638:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	0018      	movs	r0, r3
 800263e:	f7ff fee1 	bl	8002404 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	490d      	ldr	r1, [pc, #52]	; (8002684 <I2C_IsAcknowledgeFailed+0xc8>)
 800264e:	400a      	ands	r2, r1
 8002650:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	2204      	movs	r2, #4
 8002658:	431a      	orrs	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2241      	movs	r2, #65	; 0x41
 8002662:	2120      	movs	r1, #32
 8002664:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2242      	movs	r2, #66	; 0x42
 800266a:	2100      	movs	r1, #0
 800266c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2240      	movs	r2, #64	; 0x40
 8002672:	2100      	movs	r1, #0
 8002674:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b004      	add	sp, #16
 8002682:	bd80      	pop	{r7, pc}
 8002684:	fe00e800 	.word	0xfe00e800

08002688 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	0008      	movs	r0, r1
 8002692:	0011      	movs	r1, r2
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	240a      	movs	r4, #10
 8002698:	193b      	adds	r3, r7, r4
 800269a:	1c02      	adds	r2, r0, #0
 800269c:	801a      	strh	r2, [r3, #0]
 800269e:	2009      	movs	r0, #9
 80026a0:	183b      	adds	r3, r7, r0
 80026a2:	1c0a      	adds	r2, r1, #0
 80026a4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	6a3a      	ldr	r2, [r7, #32]
 80026ae:	0d51      	lsrs	r1, r2, #21
 80026b0:	2280      	movs	r2, #128	; 0x80
 80026b2:	00d2      	lsls	r2, r2, #3
 80026b4:	400a      	ands	r2, r1
 80026b6:	490e      	ldr	r1, [pc, #56]	; (80026f0 <I2C_TransferConfig+0x68>)
 80026b8:	430a      	orrs	r2, r1
 80026ba:	43d2      	mvns	r2, r2
 80026bc:	401a      	ands	r2, r3
 80026be:	0011      	movs	r1, r2
 80026c0:	193b      	adds	r3, r7, r4
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	059b      	lsls	r3, r3, #22
 80026c6:	0d9a      	lsrs	r2, r3, #22
 80026c8:	183b      	adds	r3, r7, r0
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	0418      	lsls	r0, r3, #16
 80026ce:	23ff      	movs	r3, #255	; 0xff
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	4003      	ands	r3, r0
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	431a      	orrs	r2, r3
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	431a      	orrs	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b005      	add	sp, #20
 80026ec:	bd90      	pop	{r4, r7, pc}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	03ff63ff 	.word	0x03ff63ff

080026f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2241      	movs	r2, #65	; 0x41
 8002702:	5c9b      	ldrb	r3, [r3, r2]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b20      	cmp	r3, #32
 8002708:	d138      	bne.n	800277c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2240      	movs	r2, #64	; 0x40
 800270e:	5c9b      	ldrb	r3, [r3, r2]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002714:	2302      	movs	r3, #2
 8002716:	e032      	b.n	800277e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2240      	movs	r2, #64	; 0x40
 800271c:	2101      	movs	r1, #1
 800271e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2241      	movs	r2, #65	; 0x41
 8002724:	2124      	movs	r1, #36	; 0x24
 8002726:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2101      	movs	r1, #1
 8002734:	438a      	bics	r2, r1
 8002736:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4911      	ldr	r1, [pc, #68]	; (8002788 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002744:	400a      	ands	r2, r1
 8002746:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6819      	ldr	r1, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2101      	movs	r1, #1
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2241      	movs	r2, #65	; 0x41
 800276c:	2120      	movs	r1, #32
 800276e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2240      	movs	r2, #64	; 0x40
 8002774:	2100      	movs	r1, #0
 8002776:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	e000      	b.n	800277e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800277c:	2302      	movs	r3, #2
  }
}
 800277e:	0018      	movs	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	b002      	add	sp, #8
 8002784:	bd80      	pop	{r7, pc}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	ffffefff 	.word	0xffffefff

0800278c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2241      	movs	r2, #65	; 0x41
 800279a:	5c9b      	ldrb	r3, [r3, r2]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d139      	bne.n	8002816 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2240      	movs	r2, #64	; 0x40
 80027a6:	5c9b      	ldrb	r3, [r3, r2]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e033      	b.n	8002818 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2240      	movs	r2, #64	; 0x40
 80027b4:	2101      	movs	r1, #1
 80027b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2241      	movs	r2, #65	; 0x41
 80027bc:	2124      	movs	r1, #36	; 0x24
 80027be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2101      	movs	r1, #1
 80027cc:	438a      	bics	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4a11      	ldr	r2, [pc, #68]	; (8002820 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80027dc:	4013      	ands	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2101      	movs	r1, #1
 80027fe:	430a      	orrs	r2, r1
 8002800:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2241      	movs	r2, #65	; 0x41
 8002806:	2120      	movs	r1, #32
 8002808:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2240      	movs	r2, #64	; 0x40
 800280e:	2100      	movs	r1, #0
 8002810:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	e000      	b.n	8002818 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002816:	2302      	movs	r3, #2
  }
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	b004      	add	sp, #16
 800281e:	bd80      	pop	{r7, pc}
 8002820:	fffff0ff 	.word	0xfffff0ff

08002824 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	f000 fb76 	bl	8002f24 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	4013      	ands	r3, r2
 8002840:	d100      	bne.n	8002844 <HAL_RCC_OscConfig+0x20>
 8002842:	e08e      	b.n	8002962 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002844:	4bc5      	ldr	r3, [pc, #788]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	220c      	movs	r2, #12
 800284a:	4013      	ands	r3, r2
 800284c:	2b04      	cmp	r3, #4
 800284e:	d00e      	beq.n	800286e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002850:	4bc2      	ldr	r3, [pc, #776]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	220c      	movs	r2, #12
 8002856:	4013      	ands	r3, r2
 8002858:	2b08      	cmp	r3, #8
 800285a:	d117      	bne.n	800288c <HAL_RCC_OscConfig+0x68>
 800285c:	4bbf      	ldr	r3, [pc, #764]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	23c0      	movs	r3, #192	; 0xc0
 8002862:	025b      	lsls	r3, r3, #9
 8002864:	401a      	ands	r2, r3
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	025b      	lsls	r3, r3, #9
 800286a:	429a      	cmp	r2, r3
 800286c:	d10e      	bne.n	800288c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286e:	4bbb      	ldr	r3, [pc, #748]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	029b      	lsls	r3, r3, #10
 8002876:	4013      	ands	r3, r2
 8002878:	d100      	bne.n	800287c <HAL_RCC_OscConfig+0x58>
 800287a:	e071      	b.n	8002960 <HAL_RCC_OscConfig+0x13c>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d000      	beq.n	8002886 <HAL_RCC_OscConfig+0x62>
 8002884:	e06c      	b.n	8002960 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	f000 fb4c 	bl	8002f24 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d107      	bne.n	80028a4 <HAL_RCC_OscConfig+0x80>
 8002894:	4bb1      	ldr	r3, [pc, #708]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4bb0      	ldr	r3, [pc, #704]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 800289a:	2180      	movs	r1, #128	; 0x80
 800289c:	0249      	lsls	r1, r1, #9
 800289e:	430a      	orrs	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	e02f      	b.n	8002904 <HAL_RCC_OscConfig+0xe0>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10c      	bne.n	80028c6 <HAL_RCC_OscConfig+0xa2>
 80028ac:	4bab      	ldr	r3, [pc, #684]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4baa      	ldr	r3, [pc, #680]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 80028b2:	49ab      	ldr	r1, [pc, #684]	; (8002b60 <HAL_RCC_OscConfig+0x33c>)
 80028b4:	400a      	ands	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	4ba8      	ldr	r3, [pc, #672]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4ba7      	ldr	r3, [pc, #668]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 80028be:	49a9      	ldr	r1, [pc, #676]	; (8002b64 <HAL_RCC_OscConfig+0x340>)
 80028c0:	400a      	ands	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e01e      	b.n	8002904 <HAL_RCC_OscConfig+0xe0>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b05      	cmp	r3, #5
 80028cc:	d10e      	bne.n	80028ec <HAL_RCC_OscConfig+0xc8>
 80028ce:	4ba3      	ldr	r3, [pc, #652]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4ba2      	ldr	r3, [pc, #648]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	02c9      	lsls	r1, r1, #11
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	4b9f      	ldr	r3, [pc, #636]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b9e      	ldr	r3, [pc, #632]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 80028e2:	2180      	movs	r1, #128	; 0x80
 80028e4:	0249      	lsls	r1, r1, #9
 80028e6:	430a      	orrs	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e00b      	b.n	8002904 <HAL_RCC_OscConfig+0xe0>
 80028ec:	4b9b      	ldr	r3, [pc, #620]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b9a      	ldr	r3, [pc, #616]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 80028f2:	499b      	ldr	r1, [pc, #620]	; (8002b60 <HAL_RCC_OscConfig+0x33c>)
 80028f4:	400a      	ands	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	4b98      	ldr	r3, [pc, #608]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b97      	ldr	r3, [pc, #604]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 80028fe:	4999      	ldr	r1, [pc, #612]	; (8002b64 <HAL_RCC_OscConfig+0x340>)
 8002900:	400a      	ands	r2, r1
 8002902:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d014      	beq.n	8002936 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7fe fc22 	bl	8001154 <HAL_GetTick>
 8002910:	0003      	movs	r3, r0
 8002912:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002916:	f7fe fc1d 	bl	8001154 <HAL_GetTick>
 800291a:	0002      	movs	r2, r0
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b64      	cmp	r3, #100	; 0x64
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e2fd      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002928:	4b8c      	ldr	r3, [pc, #560]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	029b      	lsls	r3, r3, #10
 8002930:	4013      	ands	r3, r2
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0xf2>
 8002934:	e015      	b.n	8002962 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002936:	f7fe fc0d 	bl	8001154 <HAL_GetTick>
 800293a:	0003      	movs	r3, r0
 800293c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002940:	f7fe fc08 	bl	8001154 <HAL_GetTick>
 8002944:	0002      	movs	r2, r0
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e2e8      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002952:	4b82      	ldr	r3, [pc, #520]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	2380      	movs	r3, #128	; 0x80
 8002958:	029b      	lsls	r3, r3, #10
 800295a:	4013      	ands	r3, r2
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x11c>
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002960:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2202      	movs	r2, #2
 8002968:	4013      	ands	r3, r2
 800296a:	d100      	bne.n	800296e <HAL_RCC_OscConfig+0x14a>
 800296c:	e06c      	b.n	8002a48 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800296e:	4b7b      	ldr	r3, [pc, #492]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	220c      	movs	r2, #12
 8002974:	4013      	ands	r3, r2
 8002976:	d00e      	beq.n	8002996 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002978:	4b78      	ldr	r3, [pc, #480]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	220c      	movs	r2, #12
 800297e:	4013      	ands	r3, r2
 8002980:	2b08      	cmp	r3, #8
 8002982:	d11f      	bne.n	80029c4 <HAL_RCC_OscConfig+0x1a0>
 8002984:	4b75      	ldr	r3, [pc, #468]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	23c0      	movs	r3, #192	; 0xc0
 800298a:	025b      	lsls	r3, r3, #9
 800298c:	401a      	ands	r2, r3
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	429a      	cmp	r2, r3
 8002994:	d116      	bne.n	80029c4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002996:	4b71      	ldr	r3, [pc, #452]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2202      	movs	r2, #2
 800299c:	4013      	ands	r3, r2
 800299e:	d005      	beq.n	80029ac <HAL_RCC_OscConfig+0x188>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e2bb      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ac:	4b6b      	ldr	r3, [pc, #428]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	22f8      	movs	r2, #248	; 0xf8
 80029b2:	4393      	bics	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	00da      	lsls	r2, r3, #3
 80029bc:	4b67      	ldr	r3, [pc, #412]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 80029be:	430a      	orrs	r2, r1
 80029c0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c2:	e041      	b.n	8002a48 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d024      	beq.n	8002a16 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029cc:	4b63      	ldr	r3, [pc, #396]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b62      	ldr	r3, [pc, #392]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 80029d2:	2101      	movs	r1, #1
 80029d4:	430a      	orrs	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe fbbc 	bl	8001154 <HAL_GetTick>
 80029dc:	0003      	movs	r3, r0
 80029de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e2:	f7fe fbb7 	bl	8001154 <HAL_GetTick>
 80029e6:	0002      	movs	r2, r0
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e297      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f4:	4b59      	ldr	r3, [pc, #356]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2202      	movs	r2, #2
 80029fa:	4013      	ands	r3, r2
 80029fc:	d0f1      	beq.n	80029e2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fe:	4b57      	ldr	r3, [pc, #348]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	22f8      	movs	r2, #248	; 0xf8
 8002a04:	4393      	bics	r3, r2
 8002a06:	0019      	movs	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	00da      	lsls	r2, r3, #3
 8002a0e:	4b53      	ldr	r3, [pc, #332]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e018      	b.n	8002a48 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a16:	4b51      	ldr	r3, [pc, #324]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4b50      	ldr	r3, [pc, #320]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	438a      	bics	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a22:	f7fe fb97 	bl	8001154 <HAL_GetTick>
 8002a26:	0003      	movs	r3, r0
 8002a28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a2c:	f7fe fb92 	bl	8001154 <HAL_GetTick>
 8002a30:	0002      	movs	r2, r0
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e272      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3e:	4b47      	ldr	r3, [pc, #284]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2202      	movs	r2, #2
 8002a44:	4013      	ands	r3, r2
 8002a46:	d1f1      	bne.n	8002a2c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d036      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d019      	beq.n	8002a8e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5a:	4b40      	ldr	r3, [pc, #256]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5e:	4b3f      	ldr	r3, [pc, #252]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002a60:	2101      	movs	r1, #1
 8002a62:	430a      	orrs	r2, r1
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a66:	f7fe fb75 	bl	8001154 <HAL_GetTick>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a70:	f7fe fb70 	bl	8001154 <HAL_GetTick>
 8002a74:	0002      	movs	r2, r0
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e250      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a82:	4b36      	ldr	r3, [pc, #216]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	2202      	movs	r2, #2
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d0f1      	beq.n	8002a70 <HAL_RCC_OscConfig+0x24c>
 8002a8c:	e018      	b.n	8002ac0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8e:	4b33      	ldr	r3, [pc, #204]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a92:	4b32      	ldr	r3, [pc, #200]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002a94:	2101      	movs	r1, #1
 8002a96:	438a      	bics	r2, r1
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7fe fb5b 	bl	8001154 <HAL_GetTick>
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa4:	f7fe fb56 	bl	8001154 <HAL_GetTick>
 8002aa8:	0002      	movs	r2, r0
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e236      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab6:	4b29      	ldr	r3, [pc, #164]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	2202      	movs	r2, #2
 8002abc:	4013      	ands	r3, r2
 8002abe:	d1f1      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d100      	bne.n	8002acc <HAL_RCC_OscConfig+0x2a8>
 8002aca:	e0b5      	b.n	8002c38 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002acc:	231f      	movs	r3, #31
 8002ace:	18fb      	adds	r3, r7, r3
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad4:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002ad6:	69da      	ldr	r2, [r3, #28]
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	055b      	lsls	r3, r3, #21
 8002adc:	4013      	ands	r3, r2
 8002ade:	d111      	bne.n	8002b04 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae0:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002ae2:	69da      	ldr	r2, [r3, #28]
 8002ae4:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002ae6:	2180      	movs	r1, #128	; 0x80
 8002ae8:	0549      	lsls	r1, r1, #21
 8002aea:	430a      	orrs	r2, r1
 8002aec:	61da      	str	r2, [r3, #28]
 8002aee:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	055b      	lsls	r3, r3, #21
 8002af6:	4013      	ands	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002afc:	231f      	movs	r3, #31
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b04:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <HAL_RCC_OscConfig+0x344>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d11a      	bne.n	8002b46 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b10:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <HAL_RCC_OscConfig+0x344>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <HAL_RCC_OscConfig+0x344>)
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	0049      	lsls	r1, r1, #1
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b1e:	f7fe fb19 	bl	8001154 <HAL_GetTick>
 8002b22:	0003      	movs	r3, r0
 8002b24:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b28:	f7fe fb14 	bl	8001154 <HAL_GetTick>
 8002b2c:	0002      	movs	r2, r0
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	; 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e1f4      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_RCC_OscConfig+0x344>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4013      	ands	r3, r2
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d10e      	bne.n	8002b6c <HAL_RCC_OscConfig+0x348>
 8002b4e:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002b50:	6a1a      	ldr	r2, [r3, #32]
 8002b52:	4b02      	ldr	r3, [pc, #8]	; (8002b5c <HAL_RCC_OscConfig+0x338>)
 8002b54:	2101      	movs	r1, #1
 8002b56:	430a      	orrs	r2, r1
 8002b58:	621a      	str	r2, [r3, #32]
 8002b5a:	e035      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3a4>
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	fffeffff 	.word	0xfffeffff
 8002b64:	fffbffff 	.word	0xfffbffff
 8002b68:	40007000 	.word	0x40007000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10c      	bne.n	8002b8e <HAL_RCC_OscConfig+0x36a>
 8002b74:	4bca      	ldr	r3, [pc, #808]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002b76:	6a1a      	ldr	r2, [r3, #32]
 8002b78:	4bc9      	ldr	r3, [pc, #804]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	438a      	bics	r2, r1
 8002b7e:	621a      	str	r2, [r3, #32]
 8002b80:	4bc7      	ldr	r3, [pc, #796]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002b82:	6a1a      	ldr	r2, [r3, #32]
 8002b84:	4bc6      	ldr	r3, [pc, #792]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002b86:	2104      	movs	r1, #4
 8002b88:	438a      	bics	r2, r1
 8002b8a:	621a      	str	r2, [r3, #32]
 8002b8c:	e01c      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3a4>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b05      	cmp	r3, #5
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x38c>
 8002b96:	4bc2      	ldr	r3, [pc, #776]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002b98:	6a1a      	ldr	r2, [r3, #32]
 8002b9a:	4bc1      	ldr	r3, [pc, #772]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002b9c:	2104      	movs	r1, #4
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	621a      	str	r2, [r3, #32]
 8002ba2:	4bbf      	ldr	r3, [pc, #764]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002ba4:	6a1a      	ldr	r2, [r3, #32]
 8002ba6:	4bbe      	ldr	r3, [pc, #760]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002ba8:	2101      	movs	r1, #1
 8002baa:	430a      	orrs	r2, r1
 8002bac:	621a      	str	r2, [r3, #32]
 8002bae:	e00b      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3a4>
 8002bb0:	4bbb      	ldr	r3, [pc, #748]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002bb2:	6a1a      	ldr	r2, [r3, #32]
 8002bb4:	4bba      	ldr	r3, [pc, #744]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	438a      	bics	r2, r1
 8002bba:	621a      	str	r2, [r3, #32]
 8002bbc:	4bb8      	ldr	r3, [pc, #736]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002bbe:	6a1a      	ldr	r2, [r3, #32]
 8002bc0:	4bb7      	ldr	r3, [pc, #732]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002bc2:	2104      	movs	r1, #4
 8002bc4:	438a      	bics	r2, r1
 8002bc6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d014      	beq.n	8002bfa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd0:	f7fe fac0 	bl	8001154 <HAL_GetTick>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd8:	e009      	b.n	8002bee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7fe fabb 	bl	8001154 <HAL_GetTick>
 8002bde:	0002      	movs	r2, r0
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	4aaf      	ldr	r2, [pc, #700]	; (8002ea4 <HAL_RCC_OscConfig+0x680>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e19a      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bee:	4bac      	ldr	r3, [pc, #688]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x3b6>
 8002bf8:	e013      	b.n	8002c22 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfa:	f7fe faab 	bl	8001154 <HAL_GetTick>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c02:	e009      	b.n	8002c18 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c04:	f7fe faa6 	bl	8001154 <HAL_GetTick>
 8002c08:	0002      	movs	r2, r0
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	4aa5      	ldr	r2, [pc, #660]	; (8002ea4 <HAL_RCC_OscConfig+0x680>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e185      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c18:	4ba1      	ldr	r3, [pc, #644]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c22:	231f      	movs	r3, #31
 8002c24:	18fb      	adds	r3, r7, r3
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d105      	bne.n	8002c38 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2c:	4b9c      	ldr	r3, [pc, #624]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002c2e:	69da      	ldr	r2, [r3, #28]
 8002c30:	4b9b      	ldr	r3, [pc, #620]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002c32:	499d      	ldr	r1, [pc, #628]	; (8002ea8 <HAL_RCC_OscConfig+0x684>)
 8002c34:	400a      	ands	r2, r1
 8002c36:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2210      	movs	r2, #16
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d063      	beq.n	8002d0a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d12a      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c4a:	4b95      	ldr	r3, [pc, #596]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4e:	4b94      	ldr	r3, [pc, #592]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002c50:	2104      	movs	r1, #4
 8002c52:	430a      	orrs	r2, r1
 8002c54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002c56:	4b92      	ldr	r3, [pc, #584]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5a:	4b91      	ldr	r3, [pc, #580]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c62:	f7fe fa77 	bl	8001154 <HAL_GetTick>
 8002c66:	0003      	movs	r3, r0
 8002c68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c6c:	f7fe fa72 	bl	8001154 <HAL_GetTick>
 8002c70:	0002      	movs	r2, r0
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e152      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c7e:	4b88      	ldr	r3, [pc, #544]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c82:	2202      	movs	r2, #2
 8002c84:	4013      	ands	r3, r2
 8002c86:	d0f1      	beq.n	8002c6c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c88:	4b85      	ldr	r3, [pc, #532]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8c:	22f8      	movs	r2, #248	; 0xf8
 8002c8e:	4393      	bics	r3, r2
 8002c90:	0019      	movs	r1, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	00da      	lsls	r2, r3, #3
 8002c98:	4b81      	ldr	r3, [pc, #516]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c9e:	e034      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	3305      	adds	r3, #5
 8002ca6:	d111      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002ca8:	4b7d      	ldr	r3, [pc, #500]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cac:	4b7c      	ldr	r3, [pc, #496]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002cae:	2104      	movs	r1, #4
 8002cb0:	438a      	bics	r2, r1
 8002cb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002cb4:	4b7a      	ldr	r3, [pc, #488]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb8:	22f8      	movs	r2, #248	; 0xf8
 8002cba:	4393      	bics	r3, r2
 8002cbc:	0019      	movs	r1, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	00da      	lsls	r2, r3, #3
 8002cc4:	4b76      	ldr	r3, [pc, #472]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cca:	e01e      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ccc:	4b74      	ldr	r3, [pc, #464]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd0:	4b73      	ldr	r3, [pc, #460]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002cd2:	2104      	movs	r1, #4
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002cd8:	4b71      	ldr	r3, [pc, #452]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cdc:	4b70      	ldr	r3, [pc, #448]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002cde:	2101      	movs	r1, #1
 8002ce0:	438a      	bics	r2, r1
 8002ce2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce4:	f7fe fa36 	bl	8001154 <HAL_GetTick>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002cee:	f7fe fa31 	bl	8001154 <HAL_GetTick>
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e111      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d00:	4b67      	ldr	r3, [pc, #412]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d04:	2202      	movs	r2, #2
 8002d06:	4013      	ands	r3, r2
 8002d08:	d1f1      	bne.n	8002cee <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	4013      	ands	r3, r2
 8002d12:	d05c      	beq.n	8002dce <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d14:	4b62      	ldr	r3, [pc, #392]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	220c      	movs	r2, #12
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	d00e      	beq.n	8002d3e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d20:	4b5f      	ldr	r3, [pc, #380]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	220c      	movs	r2, #12
 8002d26:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d114      	bne.n	8002d56 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d2c:	4b5c      	ldr	r3, [pc, #368]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	23c0      	movs	r3, #192	; 0xc0
 8002d32:	025b      	lsls	r3, r3, #9
 8002d34:	401a      	ands	r2, r3
 8002d36:	23c0      	movs	r3, #192	; 0xc0
 8002d38:	025b      	lsls	r3, r3, #9
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d10b      	bne.n	8002d56 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d3e:	4b58      	ldr	r3, [pc, #352]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	025b      	lsls	r3, r3, #9
 8002d46:	4013      	ands	r3, r2
 8002d48:	d040      	beq.n	8002dcc <HAL_RCC_OscConfig+0x5a8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d03c      	beq.n	8002dcc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e0e6      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01b      	beq.n	8002d96 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d5e:	4b50      	ldr	r3, [pc, #320]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d62:	4b4f      	ldr	r3, [pc, #316]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002d64:	2180      	movs	r1, #128	; 0x80
 8002d66:	0249      	lsls	r1, r1, #9
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7fe f9f2 	bl	8001154 <HAL_GetTick>
 8002d70:	0003      	movs	r3, r0
 8002d72:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d76:	f7fe f9ed 	bl	8001154 <HAL_GetTick>
 8002d7a:	0002      	movs	r2, r0
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e0cd      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d88:	4b45      	ldr	r3, [pc, #276]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	025b      	lsls	r3, r3, #9
 8002d90:	4013      	ands	r3, r2
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x552>
 8002d94:	e01b      	b.n	8002dce <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d96:	4b42      	ldr	r3, [pc, #264]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d9a:	4b41      	ldr	r3, [pc, #260]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002d9c:	4943      	ldr	r1, [pc, #268]	; (8002eac <HAL_RCC_OscConfig+0x688>)
 8002d9e:	400a      	ands	r2, r1
 8002da0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da2:	f7fe f9d7 	bl	8001154 <HAL_GetTick>
 8002da6:	0003      	movs	r3, r0
 8002da8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dac:	f7fe f9d2 	bl	8001154 <HAL_GetTick>
 8002db0:	0002      	movs	r2, r0
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e0b2      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002dbe:	4b38      	ldr	r3, [pc, #224]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	025b      	lsls	r3, r3, #9
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x588>
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002dcc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d100      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x5b4>
 8002dd6:	e0a4      	b.n	8002f22 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dd8:	4b31      	ldr	r3, [pc, #196]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	220c      	movs	r2, #12
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d100      	bne.n	8002de6 <HAL_RCC_OscConfig+0x5c2>
 8002de4:	e078      	b.n	8002ed8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d14c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dee:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	4b2b      	ldr	r3, [pc, #172]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002df4:	492e      	ldr	r1, [pc, #184]	; (8002eb0 <HAL_RCC_OscConfig+0x68c>)
 8002df6:	400a      	ands	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7fe f9ab 	bl	8001154 <HAL_GetTick>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fe f9a6 	bl	8001154 <HAL_GetTick>
 8002e08:	0002      	movs	r2, r0
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e086      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e16:	4b22      	ldr	r3, [pc, #136]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	049b      	lsls	r3, r3, #18
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e22:	4b1f      	ldr	r3, [pc, #124]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	220f      	movs	r2, #15
 8002e28:	4393      	bics	r3, r2
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e30:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002e32:	430a      	orrs	r2, r1
 8002e34:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e36:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4a1e      	ldr	r2, [pc, #120]	; (8002eb4 <HAL_RCC_OscConfig+0x690>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	0019      	movs	r1, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e50:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002e56:	2180      	movs	r1, #128	; 0x80
 8002e58:	0449      	lsls	r1, r1, #17
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fe f979 	bl	8001154 <HAL_GetTick>
 8002e62:	0003      	movs	r3, r0
 8002e64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fe f974 	bl	8001154 <HAL_GetTick>
 8002e6c:	0002      	movs	r2, r0
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e054      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	049b      	lsls	r3, r3, #18
 8002e82:	4013      	ands	r3, r2
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x644>
 8002e86:	e04c      	b.n	8002f22 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <HAL_RCC_OscConfig+0x67c>)
 8002e8e:	4908      	ldr	r1, [pc, #32]	; (8002eb0 <HAL_RCC_OscConfig+0x68c>)
 8002e90:	400a      	ands	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7fe f95e 	bl	8001154 <HAL_GetTick>
 8002e98:	0003      	movs	r3, r0
 8002e9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9c:	e015      	b.n	8002eca <HAL_RCC_OscConfig+0x6a6>
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	00001388 	.word	0x00001388
 8002ea8:	efffffff 	.word	0xefffffff
 8002eac:	fffeffff 	.word	0xfffeffff
 8002eb0:	feffffff 	.word	0xfeffffff
 8002eb4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fe f94c 	bl	8001154 <HAL_GetTick>
 8002ebc:	0002      	movs	r2, r0
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e02c      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eca:	4b18      	ldr	r3, [pc, #96]	; (8002f2c <HAL_RCC_OscConfig+0x708>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	2380      	movs	r3, #128	; 0x80
 8002ed0:	049b      	lsls	r3, r3, #18
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x694>
 8002ed6:	e024      	b.n	8002f22 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e01f      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002ee4:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <HAL_RCC_OscConfig+0x708>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002eea:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <HAL_RCC_OscConfig+0x708>)
 8002eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eee:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	23c0      	movs	r3, #192	; 0xc0
 8002ef4:	025b      	lsls	r3, r3, #9
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d10e      	bne.n	8002f1e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	220f      	movs	r2, #15
 8002f04:	401a      	ands	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	23f0      	movs	r3, #240	; 0xf0
 8002f12:	039b      	lsls	r3, r3, #14
 8002f14:	401a      	ands	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d001      	beq.n	8002f22 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	0018      	movs	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b008      	add	sp, #32
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000

08002f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0bf      	b.n	80030c4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f44:	4b61      	ldr	r3, [pc, #388]	; (80030cc <HAL_RCC_ClockConfig+0x19c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d911      	bls.n	8002f76 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b5e      	ldr	r3, [pc, #376]	; (80030cc <HAL_RCC_ClockConfig+0x19c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2201      	movs	r2, #1
 8002f58:	4393      	bics	r3, r2
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	4b5b      	ldr	r3, [pc, #364]	; (80030cc <HAL_RCC_ClockConfig+0x19c>)
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f64:	4b59      	ldr	r3, [pc, #356]	; (80030cc <HAL_RCC_ClockConfig+0x19c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e0a6      	b.n	80030c4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d015      	beq.n	8002fac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2204      	movs	r2, #4
 8002f86:	4013      	ands	r3, r2
 8002f88:	d006      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f8a:	4b51      	ldr	r3, [pc, #324]	; (80030d0 <HAL_RCC_ClockConfig+0x1a0>)
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	4b50      	ldr	r3, [pc, #320]	; (80030d0 <HAL_RCC_ClockConfig+0x1a0>)
 8002f90:	21e0      	movs	r1, #224	; 0xe0
 8002f92:	00c9      	lsls	r1, r1, #3
 8002f94:	430a      	orrs	r2, r1
 8002f96:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f98:	4b4d      	ldr	r3, [pc, #308]	; (80030d0 <HAL_RCC_ClockConfig+0x1a0>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	22f0      	movs	r2, #240	; 0xf0
 8002f9e:	4393      	bics	r3, r2
 8002fa0:	0019      	movs	r1, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	4b4a      	ldr	r3, [pc, #296]	; (80030d0 <HAL_RCC_ClockConfig+0x1a0>)
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d04c      	beq.n	8003050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d107      	bne.n	8002fce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	4b44      	ldr	r3, [pc, #272]	; (80030d0 <HAL_RCC_ClockConfig+0x1a0>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	029b      	lsls	r3, r3, #10
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d120      	bne.n	800300c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e07a      	b.n	80030c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd6:	4b3e      	ldr	r3, [pc, #248]	; (80030d0 <HAL_RCC_ClockConfig+0x1a0>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	2380      	movs	r3, #128	; 0x80
 8002fdc:	049b      	lsls	r3, r3, #18
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d114      	bne.n	800300c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e06e      	b.n	80030c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002fee:	4b38      	ldr	r3, [pc, #224]	; (80030d0 <HAL_RCC_ClockConfig+0x1a0>)
 8002ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	025b      	lsls	r3, r3, #9
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d108      	bne.n	800300c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e062      	b.n	80030c4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffe:	4b34      	ldr	r3, [pc, #208]	; (80030d0 <HAL_RCC_ClockConfig+0x1a0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2202      	movs	r2, #2
 8003004:	4013      	ands	r3, r2
 8003006:	d101      	bne.n	800300c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e05b      	b.n	80030c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800300c:	4b30      	ldr	r3, [pc, #192]	; (80030d0 <HAL_RCC_ClockConfig+0x1a0>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2203      	movs	r2, #3
 8003012:	4393      	bics	r3, r2
 8003014:	0019      	movs	r1, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <HAL_RCC_ClockConfig+0x1a0>)
 800301c:	430a      	orrs	r2, r1
 800301e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003020:	f7fe f898 	bl	8001154 <HAL_GetTick>
 8003024:	0003      	movs	r3, r0
 8003026:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003028:	e009      	b.n	800303e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302a:	f7fe f893 	bl	8001154 <HAL_GetTick>
 800302e:	0002      	movs	r2, r0
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	4a27      	ldr	r2, [pc, #156]	; (80030d4 <HAL_RCC_ClockConfig+0x1a4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e042      	b.n	80030c4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303e:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <HAL_RCC_ClockConfig+0x1a0>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	220c      	movs	r2, #12
 8003044:	401a      	ands	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	429a      	cmp	r2, r3
 800304e:	d1ec      	bne.n	800302a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003050:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <HAL_RCC_ClockConfig+0x19c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2201      	movs	r2, #1
 8003056:	4013      	ands	r3, r2
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d211      	bcs.n	8003082 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <HAL_RCC_ClockConfig+0x19c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2201      	movs	r2, #1
 8003064:	4393      	bics	r3, r2
 8003066:	0019      	movs	r1, r3
 8003068:	4b18      	ldr	r3, [pc, #96]	; (80030cc <HAL_RCC_ClockConfig+0x19c>)
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003070:	4b16      	ldr	r3, [pc, #88]	; (80030cc <HAL_RCC_ClockConfig+0x19c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2201      	movs	r2, #1
 8003076:	4013      	ands	r3, r2
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d001      	beq.n	8003082 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e020      	b.n	80030c4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2204      	movs	r2, #4
 8003088:	4013      	ands	r3, r2
 800308a:	d009      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800308c:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <HAL_RCC_ClockConfig+0x1a0>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4a11      	ldr	r2, [pc, #68]	; (80030d8 <HAL_RCC_ClockConfig+0x1a8>)
 8003092:	4013      	ands	r3, r2
 8003094:	0019      	movs	r1, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <HAL_RCC_ClockConfig+0x1a0>)
 800309c:	430a      	orrs	r2, r1
 800309e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030a0:	f000 f820 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 80030a4:	0001      	movs	r1, r0
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <HAL_RCC_ClockConfig+0x1a0>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	091b      	lsrs	r3, r3, #4
 80030ac:	220f      	movs	r2, #15
 80030ae:	4013      	ands	r3, r2
 80030b0:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <HAL_RCC_ClockConfig+0x1ac>)
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	000a      	movs	r2, r1
 80030b6:	40da      	lsrs	r2, r3
 80030b8:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x1b0>)
 80030ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80030bc:	2000      	movs	r0, #0
 80030be:	f7fe f803 	bl	80010c8 <HAL_InitTick>
  
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b004      	add	sp, #16
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40022000 	.word	0x40022000
 80030d0:	40021000 	.word	0x40021000
 80030d4:	00001388 	.word	0x00001388
 80030d8:	fffff8ff 	.word	0xfffff8ff
 80030dc:	08004b34 	.word	0x08004b34
 80030e0:	20000804 	.word	0x20000804

080030e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b08f      	sub	sp, #60	; 0x3c
 80030e8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80030ea:	2314      	movs	r3, #20
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	4a37      	ldr	r2, [pc, #220]	; (80031cc <HAL_RCC_GetSysClockFreq+0xe8>)
 80030f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80030f2:	c313      	stmia	r3!, {r0, r1, r4}
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80030f8:	1d3b      	adds	r3, r7, #4
 80030fa:	4a35      	ldr	r2, [pc, #212]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xec>)
 80030fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80030fe:	c313      	stmia	r3!, {r0, r1, r4}
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003108:	2300      	movs	r3, #0
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28
 800310c:	2300      	movs	r3, #0
 800310e:	637b      	str	r3, [r7, #52]	; 0x34
 8003110:	2300      	movs	r3, #0
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003118:	4b2e      	ldr	r3, [pc, #184]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	220c      	movs	r2, #12
 8003122:	4013      	ands	r3, r2
 8003124:	2b08      	cmp	r3, #8
 8003126:	d006      	beq.n	8003136 <HAL_RCC_GetSysClockFreq+0x52>
 8003128:	2b0c      	cmp	r3, #12
 800312a:	d043      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0xd0>
 800312c:	2b04      	cmp	r3, #4
 800312e:	d144      	bne.n	80031ba <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003130:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003132:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003134:	e044      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003138:	0c9b      	lsrs	r3, r3, #18
 800313a:	220f      	movs	r2, #15
 800313c:	4013      	ands	r3, r2
 800313e:	2214      	movs	r2, #20
 8003140:	18ba      	adds	r2, r7, r2
 8003142:	5cd3      	ldrb	r3, [r2, r3]
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003146:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314a:	220f      	movs	r2, #15
 800314c:	4013      	ands	r3, r2
 800314e:	1d3a      	adds	r2, r7, #4
 8003150:	5cd3      	ldrb	r3, [r2, r3]
 8003152:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003156:	23c0      	movs	r3, #192	; 0xc0
 8003158:	025b      	lsls	r3, r3, #9
 800315a:	401a      	ands	r2, r3
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	025b      	lsls	r3, r3, #9
 8003160:	429a      	cmp	r2, r3
 8003162:	d109      	bne.n	8003178 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003166:	481c      	ldr	r0, [pc, #112]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003168:	f7fc ffce 	bl	8000108 <__udivsi3>
 800316c:	0003      	movs	r3, r0
 800316e:	001a      	movs	r2, r3
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	4353      	muls	r3, r2
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
 8003176:	e01a      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800317a:	23c0      	movs	r3, #192	; 0xc0
 800317c:	025b      	lsls	r3, r3, #9
 800317e:	401a      	ands	r2, r3
 8003180:	23c0      	movs	r3, #192	; 0xc0
 8003182:	025b      	lsls	r3, r3, #9
 8003184:	429a      	cmp	r2, r3
 8003186:	d109      	bne.n	800319c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800318a:	4814      	ldr	r0, [pc, #80]	; (80031dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800318c:	f7fc ffbc 	bl	8000108 <__udivsi3>
 8003190:	0003      	movs	r3, r0
 8003192:	001a      	movs	r2, r3
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	4353      	muls	r3, r2
 8003198:	637b      	str	r3, [r7, #52]	; 0x34
 800319a:	e008      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800319c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800319e:	480e      	ldr	r0, [pc, #56]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80031a0:	f7fc ffb2 	bl	8000108 <__udivsi3>
 80031a4:	0003      	movs	r3, r0
 80031a6:	001a      	movs	r2, r3
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	4353      	muls	r3, r2
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80031ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031b2:	e005      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80031b4:	4b09      	ldr	r3, [pc, #36]	; (80031dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80031b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031b8:	e002      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031ba:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80031bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80031c2:	0018      	movs	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b00f      	add	sp, #60	; 0x3c
 80031c8:	bd90      	pop	{r4, r7, pc}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	08004b14 	.word	0x08004b14
 80031d0:	08004b24 	.word	0x08004b24
 80031d4:	40021000 	.word	0x40021000
 80031d8:	007a1200 	.word	0x007a1200
 80031dc:	02dc6c00 	.word	0x02dc6c00

080031e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	2380      	movs	r3, #128	; 0x80
 80031f6:	025b      	lsls	r3, r3, #9
 80031f8:	4013      	ands	r3, r2
 80031fa:	d100      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80031fc:	e08f      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80031fe:	2317      	movs	r3, #23
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003206:	4b6f      	ldr	r3, [pc, #444]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	055b      	lsls	r3, r3, #21
 800320e:	4013      	ands	r3, r2
 8003210:	d111      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003212:	4b6c      	ldr	r3, [pc, #432]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	4b6b      	ldr	r3, [pc, #428]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003218:	2180      	movs	r1, #128	; 0x80
 800321a:	0549      	lsls	r1, r1, #21
 800321c:	430a      	orrs	r2, r1
 800321e:	61da      	str	r2, [r3, #28]
 8003220:	4b68      	ldr	r3, [pc, #416]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	2380      	movs	r3, #128	; 0x80
 8003226:	055b      	lsls	r3, r3, #21
 8003228:	4013      	ands	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322e:	2317      	movs	r3, #23
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003236:	4b64      	ldr	r3, [pc, #400]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	4013      	ands	r3, r2
 8003240:	d11a      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003242:	4b61      	ldr	r3, [pc, #388]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	4b60      	ldr	r3, [pc, #384]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003248:	2180      	movs	r1, #128	; 0x80
 800324a:	0049      	lsls	r1, r1, #1
 800324c:	430a      	orrs	r2, r1
 800324e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003250:	f7fd ff80 	bl	8001154 <HAL_GetTick>
 8003254:	0003      	movs	r3, r0
 8003256:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	e008      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325a:	f7fd ff7b 	bl	8001154 <HAL_GetTick>
 800325e:	0002      	movs	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b64      	cmp	r3, #100	; 0x64
 8003266:	d901      	bls.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e0a6      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326c:	4b56      	ldr	r3, [pc, #344]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4013      	ands	r3, r2
 8003276:	d0f0      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003278:	4b52      	ldr	r3, [pc, #328]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800327a:	6a1a      	ldr	r2, [r3, #32]
 800327c:	23c0      	movs	r3, #192	; 0xc0
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4013      	ands	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d034      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	23c0      	movs	r3, #192	; 0xc0
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4013      	ands	r3, r2
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	429a      	cmp	r2, r3
 8003298:	d02c      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800329a:	4b4a      	ldr	r3, [pc, #296]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	4a4b      	ldr	r2, [pc, #300]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032a4:	4b47      	ldr	r3, [pc, #284]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032a6:	6a1a      	ldr	r2, [r3, #32]
 80032a8:	4b46      	ldr	r3, [pc, #280]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032aa:	2180      	movs	r1, #128	; 0x80
 80032ac:	0249      	lsls	r1, r1, #9
 80032ae:	430a      	orrs	r2, r1
 80032b0:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032b2:	4b44      	ldr	r3, [pc, #272]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032b4:	6a1a      	ldr	r2, [r3, #32]
 80032b6:	4b43      	ldr	r3, [pc, #268]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032b8:	4945      	ldr	r1, [pc, #276]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80032ba:	400a      	ands	r2, r1
 80032bc:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032be:	4b41      	ldr	r3, [pc, #260]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	4013      	ands	r3, r2
 80032ca:	d013      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7fd ff42 	bl	8001154 <HAL_GetTick>
 80032d0:	0003      	movs	r3, r0
 80032d2:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d4:	e009      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fd ff3d 	bl	8001154 <HAL_GetTick>
 80032da:	0002      	movs	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	4a3c      	ldr	r2, [pc, #240]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e067      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ea:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	2202      	movs	r2, #2
 80032f0:	4013      	ands	r3, r2
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032f4:	4b33      	ldr	r3, [pc, #204]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	4a34      	ldr	r2, [pc, #208]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	0019      	movs	r1, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	4b30      	ldr	r3, [pc, #192]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003304:	430a      	orrs	r2, r1
 8003306:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003308:	2317      	movs	r3, #23
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d105      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003312:	4b2c      	ldr	r3, [pc, #176]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003314:	69da      	ldr	r2, [r3, #28]
 8003316:	4b2b      	ldr	r3, [pc, #172]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003318:	492f      	ldr	r1, [pc, #188]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800331a:	400a      	ands	r2, r1
 800331c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2201      	movs	r2, #1
 8003324:	4013      	ands	r3, r2
 8003326:	d009      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003328:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	2203      	movs	r2, #3
 800332e:	4393      	bics	r3, r2
 8003330:	0019      	movs	r1, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003338:	430a      	orrs	r2, r1
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2202      	movs	r2, #2
 8003342:	4013      	ands	r3, r2
 8003344:	d009      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003346:	4b1f      	ldr	r3, [pc, #124]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	4a24      	ldr	r2, [pc, #144]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800334c:	4013      	ands	r3, r2
 800334e:	0019      	movs	r1, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003356:	430a      	orrs	r2, r1
 8003358:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2220      	movs	r2, #32
 8003360:	4013      	ands	r3, r2
 8003362:	d009      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003364:	4b17      	ldr	r3, [pc, #92]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	2210      	movs	r2, #16
 800336a:	4393      	bics	r3, r2
 800336c:	0019      	movs	r1, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691a      	ldr	r2, [r3, #16]
 8003372:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003374:	430a      	orrs	r2, r1
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	2380      	movs	r3, #128	; 0x80
 800337e:	029b      	lsls	r3, r3, #10
 8003380:	4013      	ands	r3, r2
 8003382:	d009      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	2280      	movs	r2, #128	; 0x80
 800338a:	4393      	bics	r3, r2
 800338c:	0019      	movs	r1, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003394:	430a      	orrs	r2, r1
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4013      	ands	r3, r2
 80033a2:	d009      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033a4:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	2240      	movs	r2, #64	; 0x40
 80033aa:	4393      	bics	r3, r2
 80033ac:	0019      	movs	r1, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80033b4:	430a      	orrs	r2, r1
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	0018      	movs	r0, r3
 80033bc:	46bd      	mov	sp, r7
 80033be:	b006      	add	sp, #24
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40007000 	.word	0x40007000
 80033cc:	fffffcff 	.word	0xfffffcff
 80033d0:	fffeffff 	.word	0xfffeffff
 80033d4:	00001388 	.word	0x00001388
 80033d8:	efffffff 	.word	0xefffffff
 80033dc:	fffcffff 	.word	0xfffcffff

080033e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e01e      	b.n	8003430 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	223d      	movs	r2, #61	; 0x3d
 80033f6:	5c9b      	ldrb	r3, [r3, r2]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d107      	bne.n	800340e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	223c      	movs	r2, #60	; 0x3c
 8003402:	2100      	movs	r1, #0
 8003404:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	0018      	movs	r0, r3
 800340a:	f7fd fdb9 	bl	8000f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	223d      	movs	r2, #61	; 0x3d
 8003412:	2102      	movs	r1, #2
 8003414:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3304      	adds	r3, #4
 800341e:	0019      	movs	r1, r3
 8003420:	0010      	movs	r0, r2
 8003422:	f000 fadd 	bl	80039e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	223d      	movs	r2, #61	; 0x3d
 800342a:	2101      	movs	r1, #1
 800342c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	223d      	movs	r2, #61	; 0x3d
 8003444:	2102      	movs	r1, #2
 8003446:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2207      	movs	r2, #7
 8003450:	4013      	ands	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b06      	cmp	r3, #6
 8003458:	d007      	beq.n	800346a <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2101      	movs	r1, #1
 8003466:	430a      	orrs	r2, r1
 8003468:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	223d      	movs	r2, #61	; 0x3d
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	b004      	add	sp, #16
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2101      	movs	r1, #1
 8003490:	430a      	orrs	r2, r1
 8003492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2207      	movs	r2, #7
 800349c:	4013      	ands	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b06      	cmp	r3, #6
 80034a4:	d007      	beq.n	80034b6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2101      	movs	r1, #1
 80034b2:	430a      	orrs	r2, r1
 80034b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	0018      	movs	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b004      	add	sp, #16
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e07c      	b.n	80035ce <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	223d      	movs	r2, #61	; 0x3d
 80034d8:	5c9b      	ldrb	r3, [r3, r2]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d107      	bne.n	80034f0 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	223c      	movs	r2, #60	; 0x3c
 80034e4:	2100      	movs	r1, #0
 80034e6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	0018      	movs	r0, r3
 80034ec:	f7fd fcc6 	bl	8000e7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	223d      	movs	r2, #61	; 0x3d
 80034f4:	2102      	movs	r1, #2
 80034f6:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4935      	ldr	r1, [pc, #212]	; (80035d8 <HAL_TIM_Encoder_Init+0x118>)
 8003504:	400a      	ands	r2, r1
 8003506:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3304      	adds	r3, #4
 8003510:	0019      	movs	r1, r3
 8003512:	0010      	movs	r0, r2
 8003514:	f000 fa64 	bl	80039e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4a27      	ldr	r2, [pc, #156]	; (80035dc <HAL_TIM_Encoder_Init+0x11c>)
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	4313      	orrs	r3, r2
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4a22      	ldr	r2, [pc, #136]	; (80035e0 <HAL_TIM_Encoder_Init+0x120>)
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4a21      	ldr	r2, [pc, #132]	; (80035e4 <HAL_TIM_Encoder_Init+0x124>)
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	021b      	lsls	r3, r3, #8
 800356e:	4313      	orrs	r3, r2
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	011a      	lsls	r2, r3, #4
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	031b      	lsls	r3, r3, #12
 8003582:	4313      	orrs	r3, r2
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2222      	movs	r2, #34	; 0x22
 800358e:	4393      	bics	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2288      	movs	r2, #136	; 0x88
 8003596:	4393      	bics	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	4313      	orrs	r3, r2
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	223d      	movs	r2, #61	; 0x3d
 80035c8:	2101      	movs	r1, #1
 80035ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	0018      	movs	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b006      	add	sp, #24
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	ffffbff8 	.word	0xffffbff8
 80035dc:	fffffcfc 	.word	0xfffffcfc
 80035e0:	fffff3f3 	.word	0xfffff3f3
 80035e4:	ffff0f0f 	.word	0xffff0f0f

080035e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2202      	movs	r2, #2
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d124      	bne.n	8003648 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2202      	movs	r2, #2
 8003606:	4013      	ands	r3, r2
 8003608:	2b02      	cmp	r3, #2
 800360a:	d11d      	bne.n	8003648 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2203      	movs	r2, #3
 8003612:	4252      	negs	r2, r2
 8003614:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2203      	movs	r2, #3
 8003624:	4013      	ands	r3, r2
 8003626:	d004      	beq.n	8003632 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	0018      	movs	r0, r3
 800362c:	f000 f9c0 	bl	80039b0 <HAL_TIM_IC_CaptureCallback>
 8003630:	e007      	b.n	8003642 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	0018      	movs	r0, r3
 8003636:	f000 f9b3 	bl	80039a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	0018      	movs	r0, r3
 800363e:	f000 f9bf 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2204      	movs	r2, #4
 8003650:	4013      	ands	r3, r2
 8003652:	2b04      	cmp	r3, #4
 8003654:	d125      	bne.n	80036a2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2204      	movs	r2, #4
 800365e:	4013      	ands	r3, r2
 8003660:	2b04      	cmp	r3, #4
 8003662:	d11e      	bne.n	80036a2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2205      	movs	r2, #5
 800366a:	4252      	negs	r2, r2
 800366c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2202      	movs	r2, #2
 8003672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	23c0      	movs	r3, #192	; 0xc0
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4013      	ands	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	0018      	movs	r0, r3
 8003686:	f000 f993 	bl	80039b0 <HAL_TIM_IC_CaptureCallback>
 800368a:	e007      	b.n	800369c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	0018      	movs	r0, r3
 8003690:	f000 f986 	bl	80039a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	0018      	movs	r0, r3
 8003698:	f000 f992 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	2208      	movs	r2, #8
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d124      	bne.n	80036fa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	2208      	movs	r2, #8
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d11d      	bne.n	80036fa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2209      	movs	r2, #9
 80036c4:	4252      	negs	r2, r2
 80036c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2204      	movs	r2, #4
 80036cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	2203      	movs	r2, #3
 80036d6:	4013      	ands	r3, r2
 80036d8:	d004      	beq.n	80036e4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	0018      	movs	r0, r3
 80036de:	f000 f967 	bl	80039b0 <HAL_TIM_IC_CaptureCallback>
 80036e2:	e007      	b.n	80036f4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	0018      	movs	r0, r3
 80036e8:	f000 f95a 	bl	80039a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	0018      	movs	r0, r3
 80036f0:	f000 f966 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2210      	movs	r2, #16
 8003702:	4013      	ands	r3, r2
 8003704:	2b10      	cmp	r3, #16
 8003706:	d125      	bne.n	8003754 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2210      	movs	r2, #16
 8003710:	4013      	ands	r3, r2
 8003712:	2b10      	cmp	r3, #16
 8003714:	d11e      	bne.n	8003754 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2211      	movs	r2, #17
 800371c:	4252      	negs	r2, r2
 800371e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2208      	movs	r2, #8
 8003724:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	23c0      	movs	r3, #192	; 0xc0
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4013      	ands	r3, r2
 8003732:	d004      	beq.n	800373e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	0018      	movs	r0, r3
 8003738:	f000 f93a 	bl	80039b0 <HAL_TIM_IC_CaptureCallback>
 800373c:	e007      	b.n	800374e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	0018      	movs	r0, r3
 8003742:	f000 f92d 	bl	80039a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	0018      	movs	r0, r3
 800374a:	f000 f939 	bl	80039c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2201      	movs	r2, #1
 800375c:	4013      	ands	r3, r2
 800375e:	2b01      	cmp	r3, #1
 8003760:	d10f      	bne.n	8003782 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	4013      	ands	r3, r2
 800376c:	2b01      	cmp	r3, #1
 800376e:	d108      	bne.n	8003782 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2202      	movs	r2, #2
 8003776:	4252      	negs	r2, r2
 8003778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	0018      	movs	r0, r3
 800377e:	f000 f907 	bl	8003990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	2280      	movs	r2, #128	; 0x80
 800378a:	4013      	ands	r3, r2
 800378c:	2b80      	cmp	r3, #128	; 0x80
 800378e:	d10f      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	4013      	ands	r3, r2
 800379a:	2b80      	cmp	r3, #128	; 0x80
 800379c:	d108      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2281      	movs	r2, #129	; 0x81
 80037a4:	4252      	negs	r2, r2
 80037a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	0018      	movs	r0, r3
 80037ac:	f000 fa98 	bl	8003ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2240      	movs	r2, #64	; 0x40
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d10f      	bne.n	80037de <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2240      	movs	r2, #64	; 0x40
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b40      	cmp	r3, #64	; 0x40
 80037ca:	d108      	bne.n	80037de <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2241      	movs	r2, #65	; 0x41
 80037d2:	4252      	negs	r2, r2
 80037d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	0018      	movs	r0, r3
 80037da:	f000 f8f9 	bl	80039d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	2220      	movs	r2, #32
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d10f      	bne.n	800380c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d108      	bne.n	800380c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2221      	movs	r2, #33	; 0x21
 8003800:	4252      	negs	r2, r2
 8003802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	0018      	movs	r0, r3
 8003808:	f000 fa62 	bl	8003cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	b002      	add	sp, #8
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	223c      	movs	r2, #60	; 0x3c
 8003822:	5c9b      	ldrb	r3, [r3, r2]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_TIM_ConfigClockSource+0x18>
 8003828:	2302      	movs	r3, #2
 800382a:	e0ab      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x170>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	223c      	movs	r2, #60	; 0x3c
 8003830:	2101      	movs	r1, #1
 8003832:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	223d      	movs	r2, #61	; 0x3d
 8003838:	2102      	movs	r1, #2
 800383a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2277      	movs	r2, #119	; 0x77
 8003848:	4393      	bics	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4a4f      	ldr	r2, [pc, #316]	; (800398c <HAL_TIM_ConfigClockSource+0x178>)
 8003850:	4013      	ands	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b40      	cmp	r3, #64	; 0x40
 8003862:	d100      	bne.n	8003866 <HAL_TIM_ConfigClockSource+0x52>
 8003864:	e06b      	b.n	800393e <HAL_TIM_ConfigClockSource+0x12a>
 8003866:	d80e      	bhi.n	8003886 <HAL_TIM_ConfigClockSource+0x72>
 8003868:	2b10      	cmp	r3, #16
 800386a:	d100      	bne.n	800386e <HAL_TIM_ConfigClockSource+0x5a>
 800386c:	e077      	b.n	800395e <HAL_TIM_ConfigClockSource+0x14a>
 800386e:	d803      	bhi.n	8003878 <HAL_TIM_ConfigClockSource+0x64>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d100      	bne.n	8003876 <HAL_TIM_ConfigClockSource+0x62>
 8003874:	e073      	b.n	800395e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003876:	e07c      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003878:	2b20      	cmp	r3, #32
 800387a:	d100      	bne.n	800387e <HAL_TIM_ConfigClockSource+0x6a>
 800387c:	e06f      	b.n	800395e <HAL_TIM_ConfigClockSource+0x14a>
 800387e:	2b30      	cmp	r3, #48	; 0x30
 8003880:	d100      	bne.n	8003884 <HAL_TIM_ConfigClockSource+0x70>
 8003882:	e06c      	b.n	800395e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003884:	e075      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003886:	2b70      	cmp	r3, #112	; 0x70
 8003888:	d00e      	beq.n	80038a8 <HAL_TIM_ConfigClockSource+0x94>
 800388a:	d804      	bhi.n	8003896 <HAL_TIM_ConfigClockSource+0x82>
 800388c:	2b50      	cmp	r3, #80	; 0x50
 800388e:	d036      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0xea>
 8003890:	2b60      	cmp	r3, #96	; 0x60
 8003892:	d044      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003894:	e06d      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003896:	2280      	movs	r2, #128	; 0x80
 8003898:	0152      	lsls	r2, r2, #5
 800389a:	4293      	cmp	r3, r2
 800389c:	d068      	beq.n	8003970 <HAL_TIM_ConfigClockSource+0x15c>
 800389e:	2280      	movs	r2, #128	; 0x80
 80038a0:	0192      	lsls	r2, r2, #6
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d017      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80038a6:	e064      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	6899      	ldr	r1, [r3, #8]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f000 f98c 	bl	8003bd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2277      	movs	r2, #119	; 0x77
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	609a      	str	r2, [r3, #8]
      break;
 80038d4:	e04d      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6899      	ldr	r1, [r3, #8]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f000 f975 	bl	8003bd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2180      	movs	r1, #128	; 0x80
 80038f6:	01c9      	lsls	r1, r1, #7
 80038f8:	430a      	orrs	r2, r1
 80038fa:	609a      	str	r2, [r3, #8]
      break;
 80038fc:	e039      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6859      	ldr	r1, [r3, #4]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	001a      	movs	r2, r3
 800390c:	f000 f8e8 	bl	8003ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2150      	movs	r1, #80	; 0x50
 8003916:	0018      	movs	r0, r3
 8003918:	f000 f942 	bl	8003ba0 <TIM_ITRx_SetConfig>
      break;
 800391c:	e029      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6859      	ldr	r1, [r3, #4]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	001a      	movs	r2, r3
 800392c:	f000 f906 	bl	8003b3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2160      	movs	r1, #96	; 0x60
 8003936:	0018      	movs	r0, r3
 8003938:	f000 f932 	bl	8003ba0 <TIM_ITRx_SetConfig>
      break;
 800393c:	e019      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	6859      	ldr	r1, [r3, #4]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	001a      	movs	r2, r3
 800394c:	f000 f8c8 	bl	8003ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2140      	movs	r1, #64	; 0x40
 8003956:	0018      	movs	r0, r3
 8003958:	f000 f922 	bl	8003ba0 <TIM_ITRx_SetConfig>
      break;
 800395c:	e009      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	0019      	movs	r1, r3
 8003968:	0010      	movs	r0, r2
 800396a:	f000 f919 	bl	8003ba0 <TIM_ITRx_SetConfig>
      break;
 800396e:	e000      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003970:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	223d      	movs	r2, #61	; 0x3d
 8003976:	2101      	movs	r1, #1
 8003978:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	223c      	movs	r2, #60	; 0x3c
 800397e:	2100      	movs	r1, #0
 8003980:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	b004      	add	sp, #16
 800398a:	bd80      	pop	{r7, pc}
 800398c:	ffff00ff 	.word	0xffff00ff

08003990 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003998:	46c0      	nop			; (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	b002      	add	sp, #8
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039a8:	46c0      	nop			; (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b002      	add	sp, #8
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039b8:	46c0      	nop			; (mov r8, r8)
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b002      	add	sp, #8
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bd80      	pop	{r7, pc}

080039e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a34      	ldr	r2, [pc, #208]	; (8003ac4 <TIM_Base_SetConfig+0xe4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d008      	beq.n	8003a0a <TIM_Base_SetConfig+0x2a>
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	05db      	lsls	r3, r3, #23
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d003      	beq.n	8003a0a <TIM_Base_SetConfig+0x2a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a30      	ldr	r2, [pc, #192]	; (8003ac8 <TIM_Base_SetConfig+0xe8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d108      	bne.n	8003a1c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2270      	movs	r2, #112	; 0x70
 8003a0e:	4393      	bics	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a29      	ldr	r2, [pc, #164]	; (8003ac4 <TIM_Base_SetConfig+0xe4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d018      	beq.n	8003a56 <TIM_Base_SetConfig+0x76>
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	2380      	movs	r3, #128	; 0x80
 8003a28:	05db      	lsls	r3, r3, #23
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d013      	beq.n	8003a56 <TIM_Base_SetConfig+0x76>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a25      	ldr	r2, [pc, #148]	; (8003ac8 <TIM_Base_SetConfig+0xe8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00f      	beq.n	8003a56 <TIM_Base_SetConfig+0x76>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a24      	ldr	r2, [pc, #144]	; (8003acc <TIM_Base_SetConfig+0xec>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00b      	beq.n	8003a56 <TIM_Base_SetConfig+0x76>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a23      	ldr	r2, [pc, #140]	; (8003ad0 <TIM_Base_SetConfig+0xf0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d007      	beq.n	8003a56 <TIM_Base_SetConfig+0x76>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <TIM_Base_SetConfig+0xf4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d003      	beq.n	8003a56 <TIM_Base_SetConfig+0x76>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <TIM_Base_SetConfig+0xf8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d108      	bne.n	8003a68 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4a20      	ldr	r2, [pc, #128]	; (8003adc <TIM_Base_SetConfig+0xfc>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2280      	movs	r2, #128	; 0x80
 8003a6c:	4393      	bics	r3, r2
 8003a6e:	001a      	movs	r2, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a0c      	ldr	r2, [pc, #48]	; (8003ac4 <TIM_Base_SetConfig+0xe4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00b      	beq.n	8003aae <TIM_Base_SetConfig+0xce>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a0d      	ldr	r2, [pc, #52]	; (8003ad0 <TIM_Base_SetConfig+0xf0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d007      	beq.n	8003aae <TIM_Base_SetConfig+0xce>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a0c      	ldr	r2, [pc, #48]	; (8003ad4 <TIM_Base_SetConfig+0xf4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d003      	beq.n	8003aae <TIM_Base_SetConfig+0xce>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a0b      	ldr	r2, [pc, #44]	; (8003ad8 <TIM_Base_SetConfig+0xf8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d103      	bne.n	8003ab6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	615a      	str	r2, [r3, #20]
}
 8003abc:	46c0      	nop			; (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b004      	add	sp, #16
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40012c00 	.word	0x40012c00
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40002000 	.word	0x40002000
 8003ad0:	40014000 	.word	0x40014000
 8003ad4:	40014400 	.word	0x40014400
 8003ad8:	40014800 	.word	0x40014800
 8003adc:	fffffcff 	.word	0xfffffcff

08003ae0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	2201      	movs	r2, #1
 8003af8:	4393      	bics	r3, r2
 8003afa:	001a      	movs	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	22f0      	movs	r2, #240	; 0xf0
 8003b0a:	4393      	bics	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	220a      	movs	r2, #10
 8003b1c:	4393      	bics	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	621a      	str	r2, [r3, #32]
}
 8003b34:	46c0      	nop			; (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b006      	add	sp, #24
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	2210      	movs	r2, #16
 8003b4e:	4393      	bics	r3, r2
 8003b50:	001a      	movs	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	4a0d      	ldr	r2, [pc, #52]	; (8003b9c <TIM_TI2_ConfigInputStage+0x60>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	031b      	lsls	r3, r3, #12
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	22a0      	movs	r2, #160	; 0xa0
 8003b78:	4393      	bics	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b006      	add	sp, #24
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	ffff0fff 	.word	0xffff0fff

08003ba0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2270      	movs	r2, #112	; 0x70
 8003bb4:	4393      	bics	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	2207      	movs	r2, #7
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	609a      	str	r2, [r3, #8]
}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b004      	add	sp, #16
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <TIM_ETR_SetConfig+0x3c>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	021a      	lsls	r2, r3, #8
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	609a      	str	r2, [r3, #8]
}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b006      	add	sp, #24
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	ffff00ff 	.word	0xffff00ff

08003c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	223c      	movs	r2, #60	; 0x3c
 8003c22:	5c9b      	ldrb	r3, [r3, r2]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e047      	b.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	223c      	movs	r2, #60	; 0x3c
 8003c30:	2101      	movs	r1, #1
 8003c32:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	223d      	movs	r2, #61	; 0x3d
 8003c38:	2102      	movs	r1, #2
 8003c3a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2270      	movs	r2, #112	; 0x70
 8003c50:	4393      	bics	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00f      	beq.n	8003c90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	05db      	lsls	r3, r3, #23
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d009      	beq.n	8003c90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a11      	ldr	r2, [pc, #68]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d004      	beq.n	8003c90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a10      	ldr	r2, [pc, #64]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d10c      	bne.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2280      	movs	r2, #128	; 0x80
 8003c94:	4393      	bics	r3, r2
 8003c96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	223d      	movs	r2, #61	; 0x3d
 8003cae:	2101      	movs	r1, #1
 8003cb0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	223c      	movs	r2, #60	; 0x3c
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b004      	add	sp, #16
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40014000 	.word	0x40014000

08003cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cd8:	46c0      	nop			; (mov r8, r8)
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b002      	add	sp, #8
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ce8:	46c0      	nop			; (mov r8, r8)
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b002      	add	sp, #8
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <ssd1306_SetI2CAddress>:

uint16_t SSD1306_I2C_ADDR = 0x3D;


void ssd1306_SetI2CAddress(uint16_t addr)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	1dbb      	adds	r3, r7, #6
 8003cfa:	801a      	strh	r2, [r3, #0]
	if(addr == 0x3D)
 8003cfc:	1dbb      	adds	r3, r7, #6
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	2b3d      	cmp	r3, #61	; 0x3d
 8003d02:	d106      	bne.n	8003d12 <ssd1306_SetI2CAddress+0x22>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	019b      	lsls	r3, r3, #6
 8003d08:	4806      	ldr	r0, [pc, #24]	; (8003d24 <ssd1306_SetI2CAddress+0x34>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	0019      	movs	r1, r3
 8003d0e:	f7fd fff3 	bl	8001cf8 <HAL_GPIO_WritePin>

	SSD1306_I2C_ADDR = addr;
 8003d12:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <ssd1306_SetI2CAddress+0x38>)
 8003d14:	1dba      	adds	r2, r7, #6
 8003d16:	8812      	ldrh	r2, [r2, #0]
 8003d18:	801a      	strh	r2, [r3, #0]
}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b002      	add	sp, #8
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	48000c00 	.word	0x48000c00
 8003d28:	2000080e 	.word	0x2000080e

08003d2c <ssd1306_Reset>:

void ssd1306_Reset(void) {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0

	//HAL_I2C_ClearBusyFlagErrata_2_14_7(&hi2c1);
	/* for I2C - do nothing */
}
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <ssd1306_WriteCommand>:


// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003d38:	b5b0      	push	{r4, r5, r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af04      	add	r7, sp, #16
 8003d3e:	0002      	movs	r2, r0
 8003d40:	1dfb      	adds	r3, r7, #7
 8003d42:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret =  HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR << 1, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <ssd1306_WriteCommand+0x54>)
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	18db      	adds	r3, r3, r3
 8003d4a:	b299      	uxth	r1, r3
 8003d4c:	250f      	movs	r5, #15
 8003d4e:	197c      	adds	r4, r7, r5
 8003d50:	480f      	ldr	r0, [pc, #60]	; (8003d90 <ssd1306_WriteCommand+0x58>)
 8003d52:	2301      	movs	r3, #1
 8003d54:	425b      	negs	r3, r3
 8003d56:	9302      	str	r3, [sp, #8]
 8003d58:	2301      	movs	r3, #1
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	1dfb      	adds	r3, r7, #7
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	2301      	movs	r3, #1
 8003d62:	2200      	movs	r2, #0
 8003d64:	f7fe f8a2 	bl	8001eac <HAL_I2C_Mem_Write>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	7023      	strb	r3, [r4, #0]
	if(ret == HAL_ERROR)
 8003d6c:	197b      	adds	r3, r7, r5
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d106      	bne.n	8003d82 <ssd1306_WriteCommand+0x4a>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	019b      	lsls	r3, r3, #6
 8003d78:	4806      	ldr	r0, [pc, #24]	; (8003d94 <ssd1306_WriteCommand+0x5c>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	f7fd ffbb 	bl	8001cf8 <HAL_GPIO_WritePin>
	}

		//HAL_I2C_ClearBusyFlagErrata_2_14_7(&hi2c1);
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
	//printf("ssd1306_WriteCommand %d Status: %d\n", byte, ret);
}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b004      	add	sp, #16
 8003d88:	bdb0      	pop	{r4, r5, r7, pc}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	2000080e 	.word	0x2000080e
 8003d90:	20000d58 	.word	0x20000d58
 8003d94:	48000c00 	.word	0x48000c00

08003d98 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003d98:	b5b0      	push	{r4, r5, r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af04      	add	r7, sp, #16
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret =  HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR << 1, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003da2:	4b12      	ldr	r3, [pc, #72]	; (8003dec <ssd1306_WriteData+0x54>)
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	18db      	adds	r3, r3, r3
 8003da8:	b299      	uxth	r1, r3
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	250f      	movs	r5, #15
 8003db0:	197c      	adds	r4, r7, r5
 8003db2:	480f      	ldr	r0, [pc, #60]	; (8003df0 <ssd1306_WriteData+0x58>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	4252      	negs	r2, r2
 8003db8:	9202      	str	r2, [sp, #8]
 8003dba:	9301      	str	r3, [sp, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	2240      	movs	r2, #64	; 0x40
 8003dc4:	f7fe f872 	bl	8001eac <HAL_I2C_Mem_Write>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	7023      	strb	r3, [r4, #0]
	if(ret == HAL_ERROR)
 8003dcc:	197b      	adds	r3, r7, r5
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d106      	bne.n	8003de2 <ssd1306_WriteData+0x4a>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	019b      	lsls	r3, r3, #6
 8003dd8:	4806      	ldr	r0, [pc, #24]	; (8003df4 <ssd1306_WriteData+0x5c>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	0019      	movs	r1, r3
 8003dde:	f7fd ff8b 	bl	8001cf8 <HAL_GPIO_WritePin>

		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b004      	add	sp, #16
 8003de8:	bdb0      	pop	{r4, r5, r7, pc}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	2000080e 	.word	0x2000080e
 8003df0:	20000d58 	.word	0x20000d58
 8003df4:	48000c00 	.word	0x48000c00

08003df8 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8003dfc:	f7ff ff96 	bl	8003d2c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003e00:	2064      	movs	r0, #100	; 0x64
 8003e02:	f7fd f9b1 	bl	8001168 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8003e06:	20ae      	movs	r0, #174	; 0xae
 8003e08:	f7ff ff96 	bl	8003d38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003e0c:	2020      	movs	r0, #32
 8003e0e:	f7ff ff93 	bl	8003d38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 8003e12:	2010      	movs	r0, #16
 8003e14:	f7ff ff90 	bl	8003d38 <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003e18:	20b0      	movs	r0, #176	; 0xb0
 8003e1a:	f7ff ff8d 	bl	8003d38 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8003e1e:	20c0      	movs	r0, #192	; 0xc0
 8003e20:	f7ff ff8a 	bl	8003d38 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003e24:	2000      	movs	r0, #0
 8003e26:	f7ff ff87 	bl	8003d38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003e2a:	2010      	movs	r0, #16
 8003e2c:	f7ff ff84 	bl	8003d38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003e30:	2040      	movs	r0, #64	; 0x40
 8003e32:	f7ff ff81 	bl	8003d38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8003e36:	2081      	movs	r0, #129	; 0x81
 8003e38:	f7ff ff7e 	bl	8003d38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8003e3c:	20ff      	movs	r0, #255	; 0xff
 8003e3e:	f7ff ff7b 	bl	8003d38 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8003e42:	20a0      	movs	r0, #160	; 0xa0
 8003e44:	f7ff ff78 	bl	8003d38 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003e48:	20a6      	movs	r0, #166	; 0xa6
 8003e4a:	f7ff ff75 	bl	8003d38 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003e4e:	20a8      	movs	r0, #168	; 0xa8
 8003e50:	f7ff ff72 	bl	8003d38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8003e54:	203f      	movs	r0, #63	; 0x3f
 8003e56:	f7ff ff6f 	bl	8003d38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003e5a:	20a4      	movs	r0, #164	; 0xa4
 8003e5c:	f7ff ff6c 	bl	8003d38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003e60:	20d3      	movs	r0, #211	; 0xd3
 8003e62:	f7ff ff69 	bl	8003d38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003e66:	2000      	movs	r0, #0
 8003e68:	f7ff ff66 	bl	8003d38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003e6c:	20d5      	movs	r0, #213	; 0xd5
 8003e6e:	f7ff ff63 	bl	8003d38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003e72:	20f0      	movs	r0, #240	; 0xf0
 8003e74:	f7ff ff60 	bl	8003d38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003e78:	20d9      	movs	r0, #217	; 0xd9
 8003e7a:	f7ff ff5d 	bl	8003d38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003e7e:	2022      	movs	r0, #34	; 0x22
 8003e80:	f7ff ff5a 	bl	8003d38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003e84:	20da      	movs	r0, #218	; 0xda
 8003e86:	f7ff ff57 	bl	8003d38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8003e8a:	2012      	movs	r0, #18
 8003e8c:	f7ff ff54 	bl	8003d38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003e90:	20db      	movs	r0, #219	; 0xdb
 8003e92:	f7ff ff51 	bl	8003d38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003e96:	2020      	movs	r0, #32
 8003e98:	f7ff ff4e 	bl	8003d38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003e9c:	208d      	movs	r0, #141	; 0x8d
 8003e9e:	f7ff ff4b 	bl	8003d38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003ea2:	2014      	movs	r0, #20
 8003ea4:	f7ff ff48 	bl	8003d38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8003ea8:	20af      	movs	r0, #175	; 0xaf
 8003eaa:	f7ff ff45 	bl	8003d38 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8003eae:	2000      	movs	r0, #0
 8003eb0:	f000 f810 	bl	8003ed4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003eb4:	f000 f832 	bl	8003f1c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <ssd1306_Init+0xd8>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003ebe:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <ssd1306_Init+0xd8>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003ec4:	4b02      	ldr	r3, [pc, #8]	; (8003ed0 <ssd1306_Init+0xd8>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	715a      	strb	r2, [r3, #5]
}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000cac 	.word	0x20000cac

08003ed4 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	0002      	movs	r2, r0
 8003edc:	1dfb      	adds	r3, r7, #7
 8003ede:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	e00e      	b.n	8003f04 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <ssd1306_Fill+0x1e>
 8003eee:	2100      	movs	r1, #0
 8003ef0:	e000      	b.n	8003ef4 <ssd1306_Fill+0x20>
 8003ef2:	21ff      	movs	r1, #255	; 0xff
 8003ef4:	4a07      	ldr	r2, [pc, #28]	; (8003f14 <ssd1306_Fill+0x40>)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	18d3      	adds	r3, r2, r3
 8003efa:	1c0a      	adds	r2, r1, #0
 8003efc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3301      	adds	r3, #1
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4a04      	ldr	r2, [pc, #16]	; (8003f18 <ssd1306_Fill+0x44>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d9ec      	bls.n	8003ee6 <ssd1306_Fill+0x12>
    }
}
 8003f0c:	46c0      	nop			; (mov r8, r8)
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b004      	add	sp, #16
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	200008ac 	.word	0x200008ac
 8003f18:	000003ff 	.word	0x000003ff

08003f1c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8003f22:	1dfb      	adds	r3, r7, #7
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]
 8003f28:	e01a      	b.n	8003f60 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i);
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	3b50      	subs	r3, #80	; 0x50
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	0018      	movs	r0, r3
 8003f34:	f7ff ff00 	bl	8003d38 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8003f38:	2000      	movs	r0, #0
 8003f3a:	f7ff fefd 	bl	8003d38 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8003f3e:	2010      	movs	r0, #16
 8003f40:	f7ff fefa 	bl	8003d38 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003f44:	1dfb      	adds	r3, r7, #7
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	01da      	lsls	r2, r3, #7
 8003f4a:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <ssd1306_UpdateScreen+0x54>)
 8003f4c:	18d3      	adds	r3, r2, r3
 8003f4e:	2180      	movs	r1, #128	; 0x80
 8003f50:	0018      	movs	r0, r3
 8003f52:	f7ff ff21 	bl	8003d98 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8003f56:	1dfb      	adds	r3, r7, #7
 8003f58:	781a      	ldrb	r2, [r3, #0]
 8003f5a:	1dfb      	adds	r3, r7, #7
 8003f5c:	3201      	adds	r2, #1
 8003f5e:	701a      	strb	r2, [r3, #0]
 8003f60:	1dfb      	adds	r3, r7, #7
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b07      	cmp	r3, #7
 8003f66:	d9e0      	bls.n	8003f2a <ssd1306_UpdateScreen+0xe>
    }
}
 8003f68:	46c0      	nop			; (mov r8, r8)
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b002      	add	sp, #8
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	200008ac 	.word	0x200008ac

08003f74 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003f74:	b590      	push	{r4, r7, lr}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	0004      	movs	r4, r0
 8003f7c:	0008      	movs	r0, r1
 8003f7e:	0011      	movs	r1, r2
 8003f80:	1dfb      	adds	r3, r7, #7
 8003f82:	1c22      	adds	r2, r4, #0
 8003f84:	701a      	strb	r2, [r3, #0]
 8003f86:	1dbb      	adds	r3, r7, #6
 8003f88:	1c02      	adds	r2, r0, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	1d7b      	adds	r3, r7, #5
 8003f8e:	1c0a      	adds	r2, r1, #0
 8003f90:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003f92:	1dfb      	adds	r3, r7, #7
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	b25b      	sxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	db52      	blt.n	8004042 <ssd1306_DrawPixel+0xce>
 8003f9c:	1dbb      	adds	r3, r7, #6
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b3f      	cmp	r3, #63	; 0x3f
 8003fa2:	d84e      	bhi.n	8004042 <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8003fa4:	4b29      	ldr	r3, [pc, #164]	; (800404c <ssd1306_DrawPixel+0xd8>)
 8003fa6:	791b      	ldrb	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d006      	beq.n	8003fba <ssd1306_DrawPixel+0x46>
        color = (SSD1306_COLOR)!color;
 8003fac:	1d7b      	adds	r3, r7, #5
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	425a      	negs	r2, r3
 8003fb2:	4153      	adcs	r3, r2
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	1d7b      	adds	r3, r7, #5
 8003fb8:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 8003fba:	1d7b      	adds	r3, r7, #5
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d11e      	bne.n	8004000 <ssd1306_DrawPixel+0x8c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003fc2:	1dfb      	adds	r3, r7, #7
 8003fc4:	781a      	ldrb	r2, [r3, #0]
 8003fc6:	1dbb      	adds	r3, r7, #6
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	08db      	lsrs	r3, r3, #3
 8003fcc:	b2d8      	uxtb	r0, r3
 8003fce:	0003      	movs	r3, r0
 8003fd0:	01db      	lsls	r3, r3, #7
 8003fd2:	18d3      	adds	r3, r2, r3
 8003fd4:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <ssd1306_DrawPixel+0xdc>)
 8003fd6:	5cd3      	ldrb	r3, [r2, r3]
 8003fd8:	b25a      	sxtb	r2, r3
 8003fda:	1dbb      	adds	r3, r7, #6
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2107      	movs	r1, #7
 8003fe0:	400b      	ands	r3, r1
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	4099      	lsls	r1, r3
 8003fe6:	000b      	movs	r3, r1
 8003fe8:	b25b      	sxtb	r3, r3
 8003fea:	4313      	orrs	r3, r2
 8003fec:	b259      	sxtb	r1, r3
 8003fee:	1dfb      	adds	r3, r7, #7
 8003ff0:	781a      	ldrb	r2, [r3, #0]
 8003ff2:	0003      	movs	r3, r0
 8003ff4:	01db      	lsls	r3, r3, #7
 8003ff6:	18d3      	adds	r3, r2, r3
 8003ff8:	b2c9      	uxtb	r1, r1
 8003ffa:	4a15      	ldr	r2, [pc, #84]	; (8004050 <ssd1306_DrawPixel+0xdc>)
 8003ffc:	54d1      	strb	r1, [r2, r3]
 8003ffe:	e021      	b.n	8004044 <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004000:	1dfb      	adds	r3, r7, #7
 8004002:	781a      	ldrb	r2, [r3, #0]
 8004004:	1dbb      	adds	r3, r7, #6
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	08db      	lsrs	r3, r3, #3
 800400a:	b2d8      	uxtb	r0, r3
 800400c:	0003      	movs	r3, r0
 800400e:	01db      	lsls	r3, r3, #7
 8004010:	18d3      	adds	r3, r2, r3
 8004012:	4a0f      	ldr	r2, [pc, #60]	; (8004050 <ssd1306_DrawPixel+0xdc>)
 8004014:	5cd3      	ldrb	r3, [r2, r3]
 8004016:	b25b      	sxtb	r3, r3
 8004018:	1dba      	adds	r2, r7, #6
 800401a:	7812      	ldrb	r2, [r2, #0]
 800401c:	2107      	movs	r1, #7
 800401e:	400a      	ands	r2, r1
 8004020:	2101      	movs	r1, #1
 8004022:	4091      	lsls	r1, r2
 8004024:	000a      	movs	r2, r1
 8004026:	b252      	sxtb	r2, r2
 8004028:	43d2      	mvns	r2, r2
 800402a:	b252      	sxtb	r2, r2
 800402c:	4013      	ands	r3, r2
 800402e:	b259      	sxtb	r1, r3
 8004030:	1dfb      	adds	r3, r7, #7
 8004032:	781a      	ldrb	r2, [r3, #0]
 8004034:	0003      	movs	r3, r0
 8004036:	01db      	lsls	r3, r3, #7
 8004038:	18d3      	adds	r3, r2, r3
 800403a:	b2c9      	uxtb	r1, r1
 800403c:	4a04      	ldr	r2, [pc, #16]	; (8004050 <ssd1306_DrawPixel+0xdc>)
 800403e:	54d1      	strb	r1, [r2, r3]
 8004040:	e000      	b.n	8004044 <ssd1306_DrawPixel+0xd0>
        return;
 8004042:	46c0      	nop			; (mov r8, r8)
    }
}
 8004044:	46bd      	mov	sp, r7
 8004046:	b003      	add	sp, #12
 8004048:	bd90      	pop	{r4, r7, pc}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	20000cac 	.word	0x20000cac
 8004050:	200008ac 	.word	0x200008ac

08004054 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color, int padding) {
 8004054:	b590      	push	{r4, r7, lr}
 8004056:	b089      	sub	sp, #36	; 0x24
 8004058:	af00      	add	r7, sp, #0
 800405a:	0004      	movs	r4, r0
 800405c:	1d38      	adds	r0, r7, #4
 800405e:	6001      	str	r1, [r0, #0]
 8004060:	6042      	str	r2, [r0, #4]
 8004062:	0019      	movs	r1, r3
 8004064:	230f      	movs	r3, #15
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	1c22      	adds	r2, r4, #0
 800406a:	701a      	strb	r2, [r3, #0]
 800406c:	230e      	movs	r3, #14
 800406e:	18fb      	adds	r3, r7, r3
 8004070:	1c0a      	adds	r2, r1, #0
 8004072:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004074:	4b54      	ldr	r3, [pc, #336]	; (80041c8 <ssd1306_WriteChar+0x174>)
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	001a      	movs	r2, r3
 800407a:	1d3b      	adds	r3, r7, #4
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	18d3      	adds	r3, r2, r3
 8004080:	2b7f      	cmp	r3, #127	; 0x7f
 8004082:	dc07      	bgt.n	8004094 <ssd1306_WriteChar+0x40>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8004084:	4b50      	ldr	r3, [pc, #320]	; (80041c8 <ssd1306_WriteChar+0x174>)
 8004086:	885b      	ldrh	r3, [r3, #2]
 8004088:	001a      	movs	r2, r3
 800408a:	1d3b      	adds	r3, r7, #4
 800408c:	785b      	ldrb	r3, [r3, #1]
 800408e:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004090:	2b3f      	cmp	r3, #63	; 0x3f
 8004092:	dd01      	ble.n	8004098 <ssd1306_WriteChar+0x44>
    {
        // Not enough space on current line
        return 0;
 8004094:	2300      	movs	r3, #0
 8004096:	e092      	b.n	80041be <ssd1306_WriteChar+0x16a>
    }

    // add extra leading horizontal space
    if (padding == 1)
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	2b01      	cmp	r3, #1
 800409c:	d11f      	bne.n	80040de <ssd1306_WriteChar+0x8a>
    {
    	for(int n = 0; n < Font.FontHeight; n++)
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	e010      	b.n	80040c6 <ssd1306_WriteChar+0x72>
		{
			ssd1306_DrawPixel(SSD1306.CurrentX, (SSD1306.CurrentY + n), Black);
 80040a4:	4b48      	ldr	r3, [pc, #288]	; (80041c8 <ssd1306_WriteChar+0x174>)
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	b2d8      	uxtb	r0, r3
 80040aa:	4b47      	ldr	r3, [pc, #284]	; (80041c8 <ssd1306_WriteChar+0x174>)
 80040ac:	885b      	ldrh	r3, [r3, #2]
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	18d3      	adds	r3, r2, r3
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2200      	movs	r2, #0
 80040ba:	0019      	movs	r1, r3
 80040bc:	f7ff ff5a 	bl	8003f74 <ssd1306_DrawPixel>
    	for(int n = 0; n < Font.FontHeight; n++)
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	3301      	adds	r3, #1
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	1d3b      	adds	r3, r7, #4
 80040c8:	785b      	ldrb	r3, [r3, #1]
 80040ca:	001a      	movs	r2, r3
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	4293      	cmp	r3, r2
 80040d0:	dbe8      	blt.n	80040a4 <ssd1306_WriteChar+0x50>
		}
    	SSD1306.CurrentX += 1;
 80040d2:	4b3d      	ldr	r3, [pc, #244]	; (80041c8 <ssd1306_WriteChar+0x174>)
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	3301      	adds	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	4b3b      	ldr	r3, [pc, #236]	; (80041c8 <ssd1306_WriteChar+0x174>)
 80040dc:	801a      	strh	r2, [r3, #0]
    }
    

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	e051      	b.n	8004188 <ssd1306_WriteChar+0x134>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80040e4:	1d3b      	adds	r3, r7, #4
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	230f      	movs	r3, #15
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	3b20      	subs	r3, #32
 80040f0:	1d39      	adds	r1, r7, #4
 80040f2:	7849      	ldrb	r1, [r1, #1]
 80040f4:	434b      	muls	r3, r1
 80040f6:	0019      	movs	r1, r3
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	18cb      	adds	r3, r1, r3
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	18d3      	adds	r3, r2, r3
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	613b      	str	r3, [r7, #16]
        for(j = 0; j < Font.FontWidth; j++) {
 8004104:	2300      	movs	r3, #0
 8004106:	61bb      	str	r3, [r7, #24]
 8004108:	e035      	b.n	8004176 <ssd1306_WriteChar+0x122>
            if((b << j) & 0x8000)  {
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	409a      	lsls	r2, r3
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	021b      	lsls	r3, r3, #8
 8004114:	4013      	ands	r3, r2
 8004116:	d014      	beq.n	8004142 <ssd1306_WriteChar+0xee>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004118:	4b2b      	ldr	r3, [pc, #172]	; (80041c8 <ssd1306_WriteChar+0x174>)
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	b2da      	uxtb	r2, r3
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	18d3      	adds	r3, r2, r3
 8004124:	b2d8      	uxtb	r0, r3
 8004126:	4b28      	ldr	r3, [pc, #160]	; (80041c8 <ssd1306_WriteChar+0x174>)
 8004128:	885b      	ldrh	r3, [r3, #2]
 800412a:	b2da      	uxtb	r2, r3
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	b2db      	uxtb	r3, r3
 8004130:	18d3      	adds	r3, r2, r3
 8004132:	b2d9      	uxtb	r1, r3
 8004134:	230e      	movs	r3, #14
 8004136:	18fb      	adds	r3, r7, r3
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	001a      	movs	r2, r3
 800413c:	f7ff ff1a 	bl	8003f74 <ssd1306_DrawPixel>
 8004140:	e016      	b.n	8004170 <ssd1306_WriteChar+0x11c>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004142:	4b21      	ldr	r3, [pc, #132]	; (80041c8 <ssd1306_WriteChar+0x174>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b2da      	uxtb	r2, r3
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	18d3      	adds	r3, r2, r3
 800414e:	b2d8      	uxtb	r0, r3
 8004150:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <ssd1306_WriteChar+0x174>)
 8004152:	885b      	ldrh	r3, [r3, #2]
 8004154:	b2da      	uxtb	r2, r3
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	18d3      	adds	r3, r2, r3
 800415c:	b2d9      	uxtb	r1, r3
 800415e:	230e      	movs	r3, #14
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	425a      	negs	r2, r3
 8004166:	4153      	adcs	r3, r2
 8004168:	b2db      	uxtb	r3, r3
 800416a:	001a      	movs	r2, r3
 800416c:	f7ff ff02 	bl	8003f74 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	3301      	adds	r3, #1
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	1d3b      	adds	r3, r7, #4
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	001a      	movs	r2, r3
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	4293      	cmp	r3, r2
 8004180:	d3c3      	bcc.n	800410a <ssd1306_WriteChar+0xb6>
    for(i = 0; i < Font.FontHeight; i++) {
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	3301      	adds	r3, #1
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	1d3b      	adds	r3, r7, #4
 800418a:	785b      	ldrb	r3, [r3, #1]
 800418c:	001a      	movs	r2, r3
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	4293      	cmp	r3, r2
 8004192:	d3a7      	bcc.n	80040e4 <ssd1306_WriteChar+0x90>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <ssd1306_WriteChar+0x174>)
 8004196:	881a      	ldrh	r2, [r3, #0]
 8004198:	1d3b      	adds	r3, r7, #4
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	b29b      	uxth	r3, r3
 800419e:	18d3      	adds	r3, r2, r3
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <ssd1306_WriteChar+0x174>)
 80041a4:	801a      	strh	r2, [r3, #0]
    // add extra leading horizontal space
    if (padding == 1)
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d105      	bne.n	80041b8 <ssd1306_WriteChar+0x164>
    	SSD1306.CurrentX += 1;
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <ssd1306_WriteChar+0x174>)
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	3301      	adds	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <ssd1306_WriteChar+0x174>)
 80041b6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80041b8:	230f      	movs	r3, #15
 80041ba:	18fb      	adds	r3, r7, r3
 80041bc:	781b      	ldrb	r3, [r3, #0]
}
 80041be:	0018      	movs	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b009      	add	sp, #36	; 0x24
 80041c4:	bd90      	pop	{r4, r7, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	20000cac 	.word	0x20000cac

080041cc <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color, int padding) {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	1d38      	adds	r0, r7, #4
 80041d6:	6001      	str	r1, [r0, #0]
 80041d8:	6042      	str	r2, [r0, #4]
 80041da:	001a      	movs	r2, r3
 80041dc:	1cfb      	adds	r3, r7, #3
 80041de:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 80041e0:	e017      	b.n	8004212 <ssd1306_WriteString+0x46>
        if (ssd1306_WriteChar(*str, Font, color, padding) != *str) {
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	7818      	ldrb	r0, [r3, #0]
 80041e6:	1cfb      	adds	r3, r7, #3
 80041e8:	7819      	ldrb	r1, [r3, #0]
 80041ea:	1d3a      	adds	r2, r7, #4
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	000b      	movs	r3, r1
 80041f2:	6811      	ldr	r1, [r2, #0]
 80041f4:	6852      	ldr	r2, [r2, #4]
 80041f6:	f7ff ff2d 	bl	8004054 <ssd1306_WriteChar>
 80041fa:	0003      	movs	r3, r0
 80041fc:	001a      	movs	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d002      	beq.n	800420c <ssd1306_WriteString+0x40>
            // Char could not be written
            return *str;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	e008      	b.n	800421e <ssd1306_WriteString+0x52>
        }
        
        // Next char
        str++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3301      	adds	r3, #1
 8004210:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e3      	bne.n	80041e2 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	781b      	ldrb	r3, [r3, #0]
}
 800421e:	0018      	movs	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	b004      	add	sp, #16
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	0002      	movs	r2, r0
 8004230:	1dfb      	adds	r3, r7, #7
 8004232:	701a      	strb	r2, [r3, #0]
 8004234:	1dbb      	adds	r3, r7, #6
 8004236:	1c0a      	adds	r2, r1, #0
 8004238:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 800423a:	1dfb      	adds	r3, r7, #7
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	b29a      	uxth	r2, r3
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <ssd1306_SetCursor+0x30>)
 8004242:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004244:	1dbb      	adds	r3, r7, #6
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	b29a      	uxth	r2, r3
 800424a:	4b03      	ldr	r3, [pc, #12]	; (8004258 <ssd1306_SetCursor+0x30>)
 800424c:	805a      	strh	r2, [r3, #2]
}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	46bd      	mov	sp, r7
 8004252:	b002      	add	sp, #8
 8004254:	bd80      	pop	{r7, pc}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	20000cac 	.word	0x20000cac

0800425c <__errno>:
 800425c:	4b01      	ldr	r3, [pc, #4]	; (8004264 <__errno+0x8>)
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	4770      	bx	lr
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	20000820 	.word	0x20000820

08004268 <__libc_init_array>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	2600      	movs	r6, #0
 800426c:	4d0c      	ldr	r5, [pc, #48]	; (80042a0 <__libc_init_array+0x38>)
 800426e:	4c0d      	ldr	r4, [pc, #52]	; (80042a4 <__libc_init_array+0x3c>)
 8004270:	1b64      	subs	r4, r4, r5
 8004272:	10a4      	asrs	r4, r4, #2
 8004274:	42a6      	cmp	r6, r4
 8004276:	d109      	bne.n	800428c <__libc_init_array+0x24>
 8004278:	2600      	movs	r6, #0
 800427a:	f000 fc3b 	bl	8004af4 <_init>
 800427e:	4d0a      	ldr	r5, [pc, #40]	; (80042a8 <__libc_init_array+0x40>)
 8004280:	4c0a      	ldr	r4, [pc, #40]	; (80042ac <__libc_init_array+0x44>)
 8004282:	1b64      	subs	r4, r4, r5
 8004284:	10a4      	asrs	r4, r4, #2
 8004286:	42a6      	cmp	r6, r4
 8004288:	d105      	bne.n	8004296 <__libc_init_array+0x2e>
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	00b3      	lsls	r3, r6, #2
 800428e:	58eb      	ldr	r3, [r5, r3]
 8004290:	4798      	blx	r3
 8004292:	3601      	adds	r6, #1
 8004294:	e7ee      	b.n	8004274 <__libc_init_array+0xc>
 8004296:	00b3      	lsls	r3, r6, #2
 8004298:	58eb      	ldr	r3, [r5, r3]
 800429a:	4798      	blx	r3
 800429c:	3601      	adds	r6, #1
 800429e:	e7f2      	b.n	8004286 <__libc_init_array+0x1e>
 80042a0:	08006c20 	.word	0x08006c20
 80042a4:	08006c20 	.word	0x08006c20
 80042a8:	08006c20 	.word	0x08006c20
 80042ac:	08006c24 	.word	0x08006c24

080042b0 <memmove>:
 80042b0:	b510      	push	{r4, lr}
 80042b2:	4288      	cmp	r0, r1
 80042b4:	d902      	bls.n	80042bc <memmove+0xc>
 80042b6:	188b      	adds	r3, r1, r2
 80042b8:	4298      	cmp	r0, r3
 80042ba:	d303      	bcc.n	80042c4 <memmove+0x14>
 80042bc:	2300      	movs	r3, #0
 80042be:	e007      	b.n	80042d0 <memmove+0x20>
 80042c0:	5c8b      	ldrb	r3, [r1, r2]
 80042c2:	5483      	strb	r3, [r0, r2]
 80042c4:	3a01      	subs	r2, #1
 80042c6:	d2fb      	bcs.n	80042c0 <memmove+0x10>
 80042c8:	bd10      	pop	{r4, pc}
 80042ca:	5ccc      	ldrb	r4, [r1, r3]
 80042cc:	54c4      	strb	r4, [r0, r3]
 80042ce:	3301      	adds	r3, #1
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d1fa      	bne.n	80042ca <memmove+0x1a>
 80042d4:	e7f8      	b.n	80042c8 <memmove+0x18>

080042d6 <memset>:
 80042d6:	0003      	movs	r3, r0
 80042d8:	1812      	adds	r2, r2, r0
 80042da:	4293      	cmp	r3, r2
 80042dc:	d100      	bne.n	80042e0 <memset+0xa>
 80042de:	4770      	bx	lr
 80042e0:	7019      	strb	r1, [r3, #0]
 80042e2:	3301      	adds	r3, #1
 80042e4:	e7f9      	b.n	80042da <memset+0x4>
	...

080042e8 <sniprintf>:
 80042e8:	b40c      	push	{r2, r3}
 80042ea:	b530      	push	{r4, r5, lr}
 80042ec:	4b16      	ldr	r3, [pc, #88]	; (8004348 <sniprintf+0x60>)
 80042ee:	b09d      	sub	sp, #116	; 0x74
 80042f0:	1e0c      	subs	r4, r1, #0
 80042f2:	681d      	ldr	r5, [r3, #0]
 80042f4:	da08      	bge.n	8004308 <sniprintf+0x20>
 80042f6:	238b      	movs	r3, #139	; 0x8b
 80042f8:	2001      	movs	r0, #1
 80042fa:	602b      	str	r3, [r5, #0]
 80042fc:	4240      	negs	r0, r0
 80042fe:	b01d      	add	sp, #116	; 0x74
 8004300:	bc30      	pop	{r4, r5}
 8004302:	bc08      	pop	{r3}
 8004304:	b002      	add	sp, #8
 8004306:	4718      	bx	r3
 8004308:	2382      	movs	r3, #130	; 0x82
 800430a:	a902      	add	r1, sp, #8
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	818b      	strh	r3, [r1, #12]
 8004310:	2300      	movs	r3, #0
 8004312:	9002      	str	r0, [sp, #8]
 8004314:	6108      	str	r0, [r1, #16]
 8004316:	429c      	cmp	r4, r3
 8004318:	d000      	beq.n	800431c <sniprintf+0x34>
 800431a:	1e63      	subs	r3, r4, #1
 800431c:	608b      	str	r3, [r1, #8]
 800431e:	614b      	str	r3, [r1, #20]
 8004320:	2301      	movs	r3, #1
 8004322:	425b      	negs	r3, r3
 8004324:	81cb      	strh	r3, [r1, #14]
 8004326:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004328:	ab21      	add	r3, sp, #132	; 0x84
 800432a:	0028      	movs	r0, r5
 800432c:	9301      	str	r3, [sp, #4]
 800432e:	f000 f86f 	bl	8004410 <_svfiprintf_r>
 8004332:	1c43      	adds	r3, r0, #1
 8004334:	da01      	bge.n	800433a <sniprintf+0x52>
 8004336:	238b      	movs	r3, #139	; 0x8b
 8004338:	602b      	str	r3, [r5, #0]
 800433a:	2c00      	cmp	r4, #0
 800433c:	d0df      	beq.n	80042fe <sniprintf+0x16>
 800433e:	2300      	movs	r3, #0
 8004340:	9a02      	ldr	r2, [sp, #8]
 8004342:	7013      	strb	r3, [r2, #0]
 8004344:	e7db      	b.n	80042fe <sniprintf+0x16>
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	20000820 	.word	0x20000820

0800434c <__ssputs_r>:
 800434c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800434e:	688e      	ldr	r6, [r1, #8]
 8004350:	b085      	sub	sp, #20
 8004352:	0007      	movs	r7, r0
 8004354:	000c      	movs	r4, r1
 8004356:	9203      	str	r2, [sp, #12]
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	429e      	cmp	r6, r3
 800435c:	d83c      	bhi.n	80043d8 <__ssputs_r+0x8c>
 800435e:	2390      	movs	r3, #144	; 0x90
 8004360:	898a      	ldrh	r2, [r1, #12]
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	421a      	tst	r2, r3
 8004366:	d034      	beq.n	80043d2 <__ssputs_r+0x86>
 8004368:	2503      	movs	r5, #3
 800436a:	6909      	ldr	r1, [r1, #16]
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	1a5b      	subs	r3, r3, r1
 8004370:	9302      	str	r3, [sp, #8]
 8004372:	6963      	ldr	r3, [r4, #20]
 8004374:	9802      	ldr	r0, [sp, #8]
 8004376:	435d      	muls	r5, r3
 8004378:	0feb      	lsrs	r3, r5, #31
 800437a:	195d      	adds	r5, r3, r5
 800437c:	9b01      	ldr	r3, [sp, #4]
 800437e:	106d      	asrs	r5, r5, #1
 8004380:	3301      	adds	r3, #1
 8004382:	181b      	adds	r3, r3, r0
 8004384:	42ab      	cmp	r3, r5
 8004386:	d900      	bls.n	800438a <__ssputs_r+0x3e>
 8004388:	001d      	movs	r5, r3
 800438a:	0553      	lsls	r3, r2, #21
 800438c:	d532      	bpl.n	80043f4 <__ssputs_r+0xa8>
 800438e:	0029      	movs	r1, r5
 8004390:	0038      	movs	r0, r7
 8004392:	f000 fb0f 	bl	80049b4 <_malloc_r>
 8004396:	1e06      	subs	r6, r0, #0
 8004398:	d109      	bne.n	80043ae <__ssputs_r+0x62>
 800439a:	230c      	movs	r3, #12
 800439c:	603b      	str	r3, [r7, #0]
 800439e:	2340      	movs	r3, #64	; 0x40
 80043a0:	2001      	movs	r0, #1
 80043a2:	89a2      	ldrh	r2, [r4, #12]
 80043a4:	4240      	negs	r0, r0
 80043a6:	4313      	orrs	r3, r2
 80043a8:	81a3      	strh	r3, [r4, #12]
 80043aa:	b005      	add	sp, #20
 80043ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ae:	9a02      	ldr	r2, [sp, #8]
 80043b0:	6921      	ldr	r1, [r4, #16]
 80043b2:	f000 faac 	bl	800490e <memcpy>
 80043b6:	89a3      	ldrh	r3, [r4, #12]
 80043b8:	4a14      	ldr	r2, [pc, #80]	; (800440c <__ssputs_r+0xc0>)
 80043ba:	401a      	ands	r2, r3
 80043bc:	2380      	movs	r3, #128	; 0x80
 80043be:	4313      	orrs	r3, r2
 80043c0:	81a3      	strh	r3, [r4, #12]
 80043c2:	9b02      	ldr	r3, [sp, #8]
 80043c4:	6126      	str	r6, [r4, #16]
 80043c6:	18f6      	adds	r6, r6, r3
 80043c8:	6026      	str	r6, [r4, #0]
 80043ca:	6165      	str	r5, [r4, #20]
 80043cc:	9e01      	ldr	r6, [sp, #4]
 80043ce:	1aed      	subs	r5, r5, r3
 80043d0:	60a5      	str	r5, [r4, #8]
 80043d2:	9b01      	ldr	r3, [sp, #4]
 80043d4:	429e      	cmp	r6, r3
 80043d6:	d900      	bls.n	80043da <__ssputs_r+0x8e>
 80043d8:	9e01      	ldr	r6, [sp, #4]
 80043da:	0032      	movs	r2, r6
 80043dc:	9903      	ldr	r1, [sp, #12]
 80043de:	6820      	ldr	r0, [r4, #0]
 80043e0:	f7ff ff66 	bl	80042b0 <memmove>
 80043e4:	68a3      	ldr	r3, [r4, #8]
 80043e6:	2000      	movs	r0, #0
 80043e8:	1b9b      	subs	r3, r3, r6
 80043ea:	60a3      	str	r3, [r4, #8]
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	199e      	adds	r6, r3, r6
 80043f0:	6026      	str	r6, [r4, #0]
 80043f2:	e7da      	b.n	80043aa <__ssputs_r+0x5e>
 80043f4:	002a      	movs	r2, r5
 80043f6:	0038      	movs	r0, r7
 80043f8:	f000 fb3a 	bl	8004a70 <_realloc_r>
 80043fc:	1e06      	subs	r6, r0, #0
 80043fe:	d1e0      	bne.n	80043c2 <__ssputs_r+0x76>
 8004400:	6921      	ldr	r1, [r4, #16]
 8004402:	0038      	movs	r0, r7
 8004404:	f000 fa8c 	bl	8004920 <_free_r>
 8004408:	e7c7      	b.n	800439a <__ssputs_r+0x4e>
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	fffffb7f 	.word	0xfffffb7f

08004410 <_svfiprintf_r>:
 8004410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004412:	b0a1      	sub	sp, #132	; 0x84
 8004414:	9003      	str	r0, [sp, #12]
 8004416:	001d      	movs	r5, r3
 8004418:	898b      	ldrh	r3, [r1, #12]
 800441a:	000f      	movs	r7, r1
 800441c:	0016      	movs	r6, r2
 800441e:	061b      	lsls	r3, r3, #24
 8004420:	d511      	bpl.n	8004446 <_svfiprintf_r+0x36>
 8004422:	690b      	ldr	r3, [r1, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10e      	bne.n	8004446 <_svfiprintf_r+0x36>
 8004428:	2140      	movs	r1, #64	; 0x40
 800442a:	f000 fac3 	bl	80049b4 <_malloc_r>
 800442e:	6038      	str	r0, [r7, #0]
 8004430:	6138      	str	r0, [r7, #16]
 8004432:	2800      	cmp	r0, #0
 8004434:	d105      	bne.n	8004442 <_svfiprintf_r+0x32>
 8004436:	230c      	movs	r3, #12
 8004438:	9a03      	ldr	r2, [sp, #12]
 800443a:	3801      	subs	r0, #1
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	b021      	add	sp, #132	; 0x84
 8004440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004442:	2340      	movs	r3, #64	; 0x40
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	2300      	movs	r3, #0
 8004448:	ac08      	add	r4, sp, #32
 800444a:	6163      	str	r3, [r4, #20]
 800444c:	3320      	adds	r3, #32
 800444e:	7663      	strb	r3, [r4, #25]
 8004450:	3310      	adds	r3, #16
 8004452:	76a3      	strb	r3, [r4, #26]
 8004454:	9507      	str	r5, [sp, #28]
 8004456:	0035      	movs	r5, r6
 8004458:	782b      	ldrb	r3, [r5, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <_svfiprintf_r+0x52>
 800445e:	2b25      	cmp	r3, #37	; 0x25
 8004460:	d146      	bne.n	80044f0 <_svfiprintf_r+0xe0>
 8004462:	1bab      	subs	r3, r5, r6
 8004464:	9305      	str	r3, [sp, #20]
 8004466:	d00c      	beq.n	8004482 <_svfiprintf_r+0x72>
 8004468:	0032      	movs	r2, r6
 800446a:	0039      	movs	r1, r7
 800446c:	9803      	ldr	r0, [sp, #12]
 800446e:	f7ff ff6d 	bl	800434c <__ssputs_r>
 8004472:	1c43      	adds	r3, r0, #1
 8004474:	d100      	bne.n	8004478 <_svfiprintf_r+0x68>
 8004476:	e0ae      	b.n	80045d6 <_svfiprintf_r+0x1c6>
 8004478:	6962      	ldr	r2, [r4, #20]
 800447a:	9b05      	ldr	r3, [sp, #20]
 800447c:	4694      	mov	ip, r2
 800447e:	4463      	add	r3, ip
 8004480:	6163      	str	r3, [r4, #20]
 8004482:	782b      	ldrb	r3, [r5, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d100      	bne.n	800448a <_svfiprintf_r+0x7a>
 8004488:	e0a5      	b.n	80045d6 <_svfiprintf_r+0x1c6>
 800448a:	2201      	movs	r2, #1
 800448c:	2300      	movs	r3, #0
 800448e:	4252      	negs	r2, r2
 8004490:	6062      	str	r2, [r4, #4]
 8004492:	a904      	add	r1, sp, #16
 8004494:	3254      	adds	r2, #84	; 0x54
 8004496:	1852      	adds	r2, r2, r1
 8004498:	1c6e      	adds	r6, r5, #1
 800449a:	6023      	str	r3, [r4, #0]
 800449c:	60e3      	str	r3, [r4, #12]
 800449e:	60a3      	str	r3, [r4, #8]
 80044a0:	7013      	strb	r3, [r2, #0]
 80044a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80044a4:	7831      	ldrb	r1, [r6, #0]
 80044a6:	2205      	movs	r2, #5
 80044a8:	4853      	ldr	r0, [pc, #332]	; (80045f8 <_svfiprintf_r+0x1e8>)
 80044aa:	f000 fa25 	bl	80048f8 <memchr>
 80044ae:	1c75      	adds	r5, r6, #1
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d11f      	bne.n	80044f4 <_svfiprintf_r+0xe4>
 80044b4:	6822      	ldr	r2, [r4, #0]
 80044b6:	06d3      	lsls	r3, r2, #27
 80044b8:	d504      	bpl.n	80044c4 <_svfiprintf_r+0xb4>
 80044ba:	2353      	movs	r3, #83	; 0x53
 80044bc:	a904      	add	r1, sp, #16
 80044be:	185b      	adds	r3, r3, r1
 80044c0:	2120      	movs	r1, #32
 80044c2:	7019      	strb	r1, [r3, #0]
 80044c4:	0713      	lsls	r3, r2, #28
 80044c6:	d504      	bpl.n	80044d2 <_svfiprintf_r+0xc2>
 80044c8:	2353      	movs	r3, #83	; 0x53
 80044ca:	a904      	add	r1, sp, #16
 80044cc:	185b      	adds	r3, r3, r1
 80044ce:	212b      	movs	r1, #43	; 0x2b
 80044d0:	7019      	strb	r1, [r3, #0]
 80044d2:	7833      	ldrb	r3, [r6, #0]
 80044d4:	2b2a      	cmp	r3, #42	; 0x2a
 80044d6:	d016      	beq.n	8004506 <_svfiprintf_r+0xf6>
 80044d8:	0035      	movs	r5, r6
 80044da:	2100      	movs	r1, #0
 80044dc:	200a      	movs	r0, #10
 80044de:	68e3      	ldr	r3, [r4, #12]
 80044e0:	782a      	ldrb	r2, [r5, #0]
 80044e2:	1c6e      	adds	r6, r5, #1
 80044e4:	3a30      	subs	r2, #48	; 0x30
 80044e6:	2a09      	cmp	r2, #9
 80044e8:	d94e      	bls.n	8004588 <_svfiprintf_r+0x178>
 80044ea:	2900      	cmp	r1, #0
 80044ec:	d018      	beq.n	8004520 <_svfiprintf_r+0x110>
 80044ee:	e010      	b.n	8004512 <_svfiprintf_r+0x102>
 80044f0:	3501      	adds	r5, #1
 80044f2:	e7b1      	b.n	8004458 <_svfiprintf_r+0x48>
 80044f4:	4b40      	ldr	r3, [pc, #256]	; (80045f8 <_svfiprintf_r+0x1e8>)
 80044f6:	6822      	ldr	r2, [r4, #0]
 80044f8:	1ac0      	subs	r0, r0, r3
 80044fa:	2301      	movs	r3, #1
 80044fc:	4083      	lsls	r3, r0
 80044fe:	4313      	orrs	r3, r2
 8004500:	6023      	str	r3, [r4, #0]
 8004502:	002e      	movs	r6, r5
 8004504:	e7ce      	b.n	80044a4 <_svfiprintf_r+0x94>
 8004506:	9b07      	ldr	r3, [sp, #28]
 8004508:	1d19      	adds	r1, r3, #4
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	9107      	str	r1, [sp, #28]
 800450e:	2b00      	cmp	r3, #0
 8004510:	db01      	blt.n	8004516 <_svfiprintf_r+0x106>
 8004512:	930b      	str	r3, [sp, #44]	; 0x2c
 8004514:	e004      	b.n	8004520 <_svfiprintf_r+0x110>
 8004516:	425b      	negs	r3, r3
 8004518:	60e3      	str	r3, [r4, #12]
 800451a:	2302      	movs	r3, #2
 800451c:	4313      	orrs	r3, r2
 800451e:	6023      	str	r3, [r4, #0]
 8004520:	782b      	ldrb	r3, [r5, #0]
 8004522:	2b2e      	cmp	r3, #46	; 0x2e
 8004524:	d10a      	bne.n	800453c <_svfiprintf_r+0x12c>
 8004526:	786b      	ldrb	r3, [r5, #1]
 8004528:	2b2a      	cmp	r3, #42	; 0x2a
 800452a:	d135      	bne.n	8004598 <_svfiprintf_r+0x188>
 800452c:	9b07      	ldr	r3, [sp, #28]
 800452e:	3502      	adds	r5, #2
 8004530:	1d1a      	adds	r2, r3, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	9207      	str	r2, [sp, #28]
 8004536:	2b00      	cmp	r3, #0
 8004538:	db2b      	blt.n	8004592 <_svfiprintf_r+0x182>
 800453a:	9309      	str	r3, [sp, #36]	; 0x24
 800453c:	4e2f      	ldr	r6, [pc, #188]	; (80045fc <_svfiprintf_r+0x1ec>)
 800453e:	7829      	ldrb	r1, [r5, #0]
 8004540:	2203      	movs	r2, #3
 8004542:	0030      	movs	r0, r6
 8004544:	f000 f9d8 	bl	80048f8 <memchr>
 8004548:	2800      	cmp	r0, #0
 800454a:	d006      	beq.n	800455a <_svfiprintf_r+0x14a>
 800454c:	2340      	movs	r3, #64	; 0x40
 800454e:	1b80      	subs	r0, r0, r6
 8004550:	4083      	lsls	r3, r0
 8004552:	6822      	ldr	r2, [r4, #0]
 8004554:	3501      	adds	r5, #1
 8004556:	4313      	orrs	r3, r2
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	7829      	ldrb	r1, [r5, #0]
 800455c:	2206      	movs	r2, #6
 800455e:	4828      	ldr	r0, [pc, #160]	; (8004600 <_svfiprintf_r+0x1f0>)
 8004560:	1c6e      	adds	r6, r5, #1
 8004562:	7621      	strb	r1, [r4, #24]
 8004564:	f000 f9c8 	bl	80048f8 <memchr>
 8004568:	2800      	cmp	r0, #0
 800456a:	d03c      	beq.n	80045e6 <_svfiprintf_r+0x1d6>
 800456c:	4b25      	ldr	r3, [pc, #148]	; (8004604 <_svfiprintf_r+0x1f4>)
 800456e:	2b00      	cmp	r3, #0
 8004570:	d125      	bne.n	80045be <_svfiprintf_r+0x1ae>
 8004572:	2207      	movs	r2, #7
 8004574:	9b07      	ldr	r3, [sp, #28]
 8004576:	3307      	adds	r3, #7
 8004578:	4393      	bics	r3, r2
 800457a:	3308      	adds	r3, #8
 800457c:	9307      	str	r3, [sp, #28]
 800457e:	6963      	ldr	r3, [r4, #20]
 8004580:	9a04      	ldr	r2, [sp, #16]
 8004582:	189b      	adds	r3, r3, r2
 8004584:	6163      	str	r3, [r4, #20]
 8004586:	e766      	b.n	8004456 <_svfiprintf_r+0x46>
 8004588:	4343      	muls	r3, r0
 800458a:	2101      	movs	r1, #1
 800458c:	189b      	adds	r3, r3, r2
 800458e:	0035      	movs	r5, r6
 8004590:	e7a6      	b.n	80044e0 <_svfiprintf_r+0xd0>
 8004592:	2301      	movs	r3, #1
 8004594:	425b      	negs	r3, r3
 8004596:	e7d0      	b.n	800453a <_svfiprintf_r+0x12a>
 8004598:	2300      	movs	r3, #0
 800459a:	200a      	movs	r0, #10
 800459c:	001a      	movs	r2, r3
 800459e:	3501      	adds	r5, #1
 80045a0:	6063      	str	r3, [r4, #4]
 80045a2:	7829      	ldrb	r1, [r5, #0]
 80045a4:	1c6e      	adds	r6, r5, #1
 80045a6:	3930      	subs	r1, #48	; 0x30
 80045a8:	2909      	cmp	r1, #9
 80045aa:	d903      	bls.n	80045b4 <_svfiprintf_r+0x1a4>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0c5      	beq.n	800453c <_svfiprintf_r+0x12c>
 80045b0:	9209      	str	r2, [sp, #36]	; 0x24
 80045b2:	e7c3      	b.n	800453c <_svfiprintf_r+0x12c>
 80045b4:	4342      	muls	r2, r0
 80045b6:	2301      	movs	r3, #1
 80045b8:	1852      	adds	r2, r2, r1
 80045ba:	0035      	movs	r5, r6
 80045bc:	e7f1      	b.n	80045a2 <_svfiprintf_r+0x192>
 80045be:	ab07      	add	r3, sp, #28
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	003a      	movs	r2, r7
 80045c4:	4b10      	ldr	r3, [pc, #64]	; (8004608 <_svfiprintf_r+0x1f8>)
 80045c6:	0021      	movs	r1, r4
 80045c8:	9803      	ldr	r0, [sp, #12]
 80045ca:	e000      	b.n	80045ce <_svfiprintf_r+0x1be>
 80045cc:	bf00      	nop
 80045ce:	9004      	str	r0, [sp, #16]
 80045d0:	9b04      	ldr	r3, [sp, #16]
 80045d2:	3301      	adds	r3, #1
 80045d4:	d1d3      	bne.n	800457e <_svfiprintf_r+0x16e>
 80045d6:	89bb      	ldrh	r3, [r7, #12]
 80045d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80045da:	065b      	lsls	r3, r3, #25
 80045dc:	d400      	bmi.n	80045e0 <_svfiprintf_r+0x1d0>
 80045de:	e72e      	b.n	800443e <_svfiprintf_r+0x2e>
 80045e0:	2001      	movs	r0, #1
 80045e2:	4240      	negs	r0, r0
 80045e4:	e72b      	b.n	800443e <_svfiprintf_r+0x2e>
 80045e6:	ab07      	add	r3, sp, #28
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	003a      	movs	r2, r7
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <_svfiprintf_r+0x1f8>)
 80045ee:	0021      	movs	r1, r4
 80045f0:	9803      	ldr	r0, [sp, #12]
 80045f2:	f000 f879 	bl	80046e8 <_printf_i>
 80045f6:	e7ea      	b.n	80045ce <_svfiprintf_r+0x1be>
 80045f8:	08006bec 	.word	0x08006bec
 80045fc:	08006bf2 	.word	0x08006bf2
 8004600:	08006bf6 	.word	0x08006bf6
 8004604:	00000000 	.word	0x00000000
 8004608:	0800434d 	.word	0x0800434d

0800460c <_printf_common>:
 800460c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800460e:	0015      	movs	r5, r2
 8004610:	9301      	str	r3, [sp, #4]
 8004612:	688a      	ldr	r2, [r1, #8]
 8004614:	690b      	ldr	r3, [r1, #16]
 8004616:	9000      	str	r0, [sp, #0]
 8004618:	000c      	movs	r4, r1
 800461a:	4293      	cmp	r3, r2
 800461c:	da00      	bge.n	8004620 <_printf_common+0x14>
 800461e:	0013      	movs	r3, r2
 8004620:	0022      	movs	r2, r4
 8004622:	602b      	str	r3, [r5, #0]
 8004624:	3243      	adds	r2, #67	; 0x43
 8004626:	7812      	ldrb	r2, [r2, #0]
 8004628:	2a00      	cmp	r2, #0
 800462a:	d001      	beq.n	8004630 <_printf_common+0x24>
 800462c:	3301      	adds	r3, #1
 800462e:	602b      	str	r3, [r5, #0]
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	069b      	lsls	r3, r3, #26
 8004634:	d502      	bpl.n	800463c <_printf_common+0x30>
 8004636:	682b      	ldr	r3, [r5, #0]
 8004638:	3302      	adds	r3, #2
 800463a:	602b      	str	r3, [r5, #0]
 800463c:	2706      	movs	r7, #6
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	401f      	ands	r7, r3
 8004642:	d027      	beq.n	8004694 <_printf_common+0x88>
 8004644:	0023      	movs	r3, r4
 8004646:	3343      	adds	r3, #67	; 0x43
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	1e5a      	subs	r2, r3, #1
 800464c:	4193      	sbcs	r3, r2
 800464e:	6822      	ldr	r2, [r4, #0]
 8004650:	0692      	lsls	r2, r2, #26
 8004652:	d430      	bmi.n	80046b6 <_printf_common+0xaa>
 8004654:	0022      	movs	r2, r4
 8004656:	9901      	ldr	r1, [sp, #4]
 8004658:	3243      	adds	r2, #67	; 0x43
 800465a:	9800      	ldr	r0, [sp, #0]
 800465c:	9e08      	ldr	r6, [sp, #32]
 800465e:	47b0      	blx	r6
 8004660:	1c43      	adds	r3, r0, #1
 8004662:	d025      	beq.n	80046b0 <_printf_common+0xa4>
 8004664:	2306      	movs	r3, #6
 8004666:	6820      	ldr	r0, [r4, #0]
 8004668:	682a      	ldr	r2, [r5, #0]
 800466a:	68e1      	ldr	r1, [r4, #12]
 800466c:	4003      	ands	r3, r0
 800466e:	2500      	movs	r5, #0
 8004670:	2b04      	cmp	r3, #4
 8004672:	d103      	bne.n	800467c <_printf_common+0x70>
 8004674:	1a8d      	subs	r5, r1, r2
 8004676:	43eb      	mvns	r3, r5
 8004678:	17db      	asrs	r3, r3, #31
 800467a:	401d      	ands	r5, r3
 800467c:	68a3      	ldr	r3, [r4, #8]
 800467e:	6922      	ldr	r2, [r4, #16]
 8004680:	4293      	cmp	r3, r2
 8004682:	dd01      	ble.n	8004688 <_printf_common+0x7c>
 8004684:	1a9b      	subs	r3, r3, r2
 8004686:	18ed      	adds	r5, r5, r3
 8004688:	2700      	movs	r7, #0
 800468a:	42bd      	cmp	r5, r7
 800468c:	d120      	bne.n	80046d0 <_printf_common+0xc4>
 800468e:	2000      	movs	r0, #0
 8004690:	e010      	b.n	80046b4 <_printf_common+0xa8>
 8004692:	3701      	adds	r7, #1
 8004694:	68e3      	ldr	r3, [r4, #12]
 8004696:	682a      	ldr	r2, [r5, #0]
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	42bb      	cmp	r3, r7
 800469c:	ddd2      	ble.n	8004644 <_printf_common+0x38>
 800469e:	0022      	movs	r2, r4
 80046a0:	2301      	movs	r3, #1
 80046a2:	3219      	adds	r2, #25
 80046a4:	9901      	ldr	r1, [sp, #4]
 80046a6:	9800      	ldr	r0, [sp, #0]
 80046a8:	9e08      	ldr	r6, [sp, #32]
 80046aa:	47b0      	blx	r6
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	d1f0      	bne.n	8004692 <_printf_common+0x86>
 80046b0:	2001      	movs	r0, #1
 80046b2:	4240      	negs	r0, r0
 80046b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046b6:	2030      	movs	r0, #48	; 0x30
 80046b8:	18e1      	adds	r1, r4, r3
 80046ba:	3143      	adds	r1, #67	; 0x43
 80046bc:	7008      	strb	r0, [r1, #0]
 80046be:	0021      	movs	r1, r4
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	3145      	adds	r1, #69	; 0x45
 80046c4:	7809      	ldrb	r1, [r1, #0]
 80046c6:	18a2      	adds	r2, r4, r2
 80046c8:	3243      	adds	r2, #67	; 0x43
 80046ca:	3302      	adds	r3, #2
 80046cc:	7011      	strb	r1, [r2, #0]
 80046ce:	e7c1      	b.n	8004654 <_printf_common+0x48>
 80046d0:	0022      	movs	r2, r4
 80046d2:	2301      	movs	r3, #1
 80046d4:	321a      	adds	r2, #26
 80046d6:	9901      	ldr	r1, [sp, #4]
 80046d8:	9800      	ldr	r0, [sp, #0]
 80046da:	9e08      	ldr	r6, [sp, #32]
 80046dc:	47b0      	blx	r6
 80046de:	1c43      	adds	r3, r0, #1
 80046e0:	d0e6      	beq.n	80046b0 <_printf_common+0xa4>
 80046e2:	3701      	adds	r7, #1
 80046e4:	e7d1      	b.n	800468a <_printf_common+0x7e>
	...

080046e8 <_printf_i>:
 80046e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ea:	b089      	sub	sp, #36	; 0x24
 80046ec:	9204      	str	r2, [sp, #16]
 80046ee:	000a      	movs	r2, r1
 80046f0:	3243      	adds	r2, #67	; 0x43
 80046f2:	9305      	str	r3, [sp, #20]
 80046f4:	9003      	str	r0, [sp, #12]
 80046f6:	9202      	str	r2, [sp, #8]
 80046f8:	7e0a      	ldrb	r2, [r1, #24]
 80046fa:	000c      	movs	r4, r1
 80046fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046fe:	2a6e      	cmp	r2, #110	; 0x6e
 8004700:	d100      	bne.n	8004704 <_printf_i+0x1c>
 8004702:	e086      	b.n	8004812 <_printf_i+0x12a>
 8004704:	d81f      	bhi.n	8004746 <_printf_i+0x5e>
 8004706:	2a63      	cmp	r2, #99	; 0x63
 8004708:	d033      	beq.n	8004772 <_printf_i+0x8a>
 800470a:	d808      	bhi.n	800471e <_printf_i+0x36>
 800470c:	2a00      	cmp	r2, #0
 800470e:	d100      	bne.n	8004712 <_printf_i+0x2a>
 8004710:	e08c      	b.n	800482c <_printf_i+0x144>
 8004712:	2a58      	cmp	r2, #88	; 0x58
 8004714:	d04d      	beq.n	80047b2 <_printf_i+0xca>
 8004716:	0025      	movs	r5, r4
 8004718:	3542      	adds	r5, #66	; 0x42
 800471a:	702a      	strb	r2, [r5, #0]
 800471c:	e030      	b.n	8004780 <_printf_i+0x98>
 800471e:	2a64      	cmp	r2, #100	; 0x64
 8004720:	d001      	beq.n	8004726 <_printf_i+0x3e>
 8004722:	2a69      	cmp	r2, #105	; 0x69
 8004724:	d1f7      	bne.n	8004716 <_printf_i+0x2e>
 8004726:	6819      	ldr	r1, [r3, #0]
 8004728:	6825      	ldr	r5, [r4, #0]
 800472a:	1d0a      	adds	r2, r1, #4
 800472c:	0628      	lsls	r0, r5, #24
 800472e:	d529      	bpl.n	8004784 <_printf_i+0x9c>
 8004730:	6808      	ldr	r0, [r1, #0]
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	2800      	cmp	r0, #0
 8004736:	da03      	bge.n	8004740 <_printf_i+0x58>
 8004738:	232d      	movs	r3, #45	; 0x2d
 800473a:	9a02      	ldr	r2, [sp, #8]
 800473c:	4240      	negs	r0, r0
 800473e:	7013      	strb	r3, [r2, #0]
 8004740:	4e6b      	ldr	r6, [pc, #428]	; (80048f0 <_printf_i+0x208>)
 8004742:	270a      	movs	r7, #10
 8004744:	e04f      	b.n	80047e6 <_printf_i+0xfe>
 8004746:	2a73      	cmp	r2, #115	; 0x73
 8004748:	d074      	beq.n	8004834 <_printf_i+0x14c>
 800474a:	d808      	bhi.n	800475e <_printf_i+0x76>
 800474c:	2a6f      	cmp	r2, #111	; 0x6f
 800474e:	d01f      	beq.n	8004790 <_printf_i+0xa8>
 8004750:	2a70      	cmp	r2, #112	; 0x70
 8004752:	d1e0      	bne.n	8004716 <_printf_i+0x2e>
 8004754:	2220      	movs	r2, #32
 8004756:	6809      	ldr	r1, [r1, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	6022      	str	r2, [r4, #0]
 800475c:	e003      	b.n	8004766 <_printf_i+0x7e>
 800475e:	2a75      	cmp	r2, #117	; 0x75
 8004760:	d016      	beq.n	8004790 <_printf_i+0xa8>
 8004762:	2a78      	cmp	r2, #120	; 0x78
 8004764:	d1d7      	bne.n	8004716 <_printf_i+0x2e>
 8004766:	0022      	movs	r2, r4
 8004768:	2178      	movs	r1, #120	; 0x78
 800476a:	3245      	adds	r2, #69	; 0x45
 800476c:	7011      	strb	r1, [r2, #0]
 800476e:	4e61      	ldr	r6, [pc, #388]	; (80048f4 <_printf_i+0x20c>)
 8004770:	e022      	b.n	80047b8 <_printf_i+0xd0>
 8004772:	0025      	movs	r5, r4
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	3542      	adds	r5, #66	; 0x42
 8004778:	1d11      	adds	r1, r2, #4
 800477a:	6019      	str	r1, [r3, #0]
 800477c:	6813      	ldr	r3, [r2, #0]
 800477e:	702b      	strb	r3, [r5, #0]
 8004780:	2301      	movs	r3, #1
 8004782:	e065      	b.n	8004850 <_printf_i+0x168>
 8004784:	6808      	ldr	r0, [r1, #0]
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	0669      	lsls	r1, r5, #25
 800478a:	d5d3      	bpl.n	8004734 <_printf_i+0x4c>
 800478c:	b200      	sxth	r0, r0
 800478e:	e7d1      	b.n	8004734 <_printf_i+0x4c>
 8004790:	6819      	ldr	r1, [r3, #0]
 8004792:	6825      	ldr	r5, [r4, #0]
 8004794:	1d08      	adds	r0, r1, #4
 8004796:	6018      	str	r0, [r3, #0]
 8004798:	6808      	ldr	r0, [r1, #0]
 800479a:	062e      	lsls	r6, r5, #24
 800479c:	d505      	bpl.n	80047aa <_printf_i+0xc2>
 800479e:	4e54      	ldr	r6, [pc, #336]	; (80048f0 <_printf_i+0x208>)
 80047a0:	2708      	movs	r7, #8
 80047a2:	2a6f      	cmp	r2, #111	; 0x6f
 80047a4:	d01b      	beq.n	80047de <_printf_i+0xf6>
 80047a6:	270a      	movs	r7, #10
 80047a8:	e019      	b.n	80047de <_printf_i+0xf6>
 80047aa:	066d      	lsls	r5, r5, #25
 80047ac:	d5f7      	bpl.n	800479e <_printf_i+0xb6>
 80047ae:	b280      	uxth	r0, r0
 80047b0:	e7f5      	b.n	800479e <_printf_i+0xb6>
 80047b2:	3145      	adds	r1, #69	; 0x45
 80047b4:	4e4e      	ldr	r6, [pc, #312]	; (80048f0 <_printf_i+0x208>)
 80047b6:	700a      	strb	r2, [r1, #0]
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	6822      	ldr	r2, [r4, #0]
 80047bc:	1d01      	adds	r1, r0, #4
 80047be:	6800      	ldr	r0, [r0, #0]
 80047c0:	6019      	str	r1, [r3, #0]
 80047c2:	0615      	lsls	r5, r2, #24
 80047c4:	d521      	bpl.n	800480a <_printf_i+0x122>
 80047c6:	07d3      	lsls	r3, r2, #31
 80047c8:	d502      	bpl.n	80047d0 <_printf_i+0xe8>
 80047ca:	2320      	movs	r3, #32
 80047cc:	431a      	orrs	r2, r3
 80047ce:	6022      	str	r2, [r4, #0]
 80047d0:	2710      	movs	r7, #16
 80047d2:	2800      	cmp	r0, #0
 80047d4:	d103      	bne.n	80047de <_printf_i+0xf6>
 80047d6:	2320      	movs	r3, #32
 80047d8:	6822      	ldr	r2, [r4, #0]
 80047da:	439a      	bics	r2, r3
 80047dc:	6022      	str	r2, [r4, #0]
 80047de:	0023      	movs	r3, r4
 80047e0:	2200      	movs	r2, #0
 80047e2:	3343      	adds	r3, #67	; 0x43
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	6863      	ldr	r3, [r4, #4]
 80047e8:	60a3      	str	r3, [r4, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	db58      	blt.n	80048a0 <_printf_i+0x1b8>
 80047ee:	2204      	movs	r2, #4
 80047f0:	6821      	ldr	r1, [r4, #0]
 80047f2:	4391      	bics	r1, r2
 80047f4:	6021      	str	r1, [r4, #0]
 80047f6:	2800      	cmp	r0, #0
 80047f8:	d154      	bne.n	80048a4 <_printf_i+0x1bc>
 80047fa:	9d02      	ldr	r5, [sp, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d05a      	beq.n	80048b6 <_printf_i+0x1ce>
 8004800:	0025      	movs	r5, r4
 8004802:	7833      	ldrb	r3, [r6, #0]
 8004804:	3542      	adds	r5, #66	; 0x42
 8004806:	702b      	strb	r3, [r5, #0]
 8004808:	e055      	b.n	80048b6 <_printf_i+0x1ce>
 800480a:	0655      	lsls	r5, r2, #25
 800480c:	d5db      	bpl.n	80047c6 <_printf_i+0xde>
 800480e:	b280      	uxth	r0, r0
 8004810:	e7d9      	b.n	80047c6 <_printf_i+0xde>
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	680d      	ldr	r5, [r1, #0]
 8004816:	1d10      	adds	r0, r2, #4
 8004818:	6949      	ldr	r1, [r1, #20]
 800481a:	6018      	str	r0, [r3, #0]
 800481c:	6813      	ldr	r3, [r2, #0]
 800481e:	062e      	lsls	r6, r5, #24
 8004820:	d501      	bpl.n	8004826 <_printf_i+0x13e>
 8004822:	6019      	str	r1, [r3, #0]
 8004824:	e002      	b.n	800482c <_printf_i+0x144>
 8004826:	066d      	lsls	r5, r5, #25
 8004828:	d5fb      	bpl.n	8004822 <_printf_i+0x13a>
 800482a:	8019      	strh	r1, [r3, #0]
 800482c:	2300      	movs	r3, #0
 800482e:	9d02      	ldr	r5, [sp, #8]
 8004830:	6123      	str	r3, [r4, #16]
 8004832:	e04f      	b.n	80048d4 <_printf_i+0x1ec>
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	1d11      	adds	r1, r2, #4
 8004838:	6019      	str	r1, [r3, #0]
 800483a:	6815      	ldr	r5, [r2, #0]
 800483c:	2100      	movs	r1, #0
 800483e:	6862      	ldr	r2, [r4, #4]
 8004840:	0028      	movs	r0, r5
 8004842:	f000 f859 	bl	80048f8 <memchr>
 8004846:	2800      	cmp	r0, #0
 8004848:	d001      	beq.n	800484e <_printf_i+0x166>
 800484a:	1b40      	subs	r0, r0, r5
 800484c:	6060      	str	r0, [r4, #4]
 800484e:	6863      	ldr	r3, [r4, #4]
 8004850:	6123      	str	r3, [r4, #16]
 8004852:	2300      	movs	r3, #0
 8004854:	9a02      	ldr	r2, [sp, #8]
 8004856:	7013      	strb	r3, [r2, #0]
 8004858:	e03c      	b.n	80048d4 <_printf_i+0x1ec>
 800485a:	6923      	ldr	r3, [r4, #16]
 800485c:	002a      	movs	r2, r5
 800485e:	9904      	ldr	r1, [sp, #16]
 8004860:	9803      	ldr	r0, [sp, #12]
 8004862:	9d05      	ldr	r5, [sp, #20]
 8004864:	47a8      	blx	r5
 8004866:	1c43      	adds	r3, r0, #1
 8004868:	d03e      	beq.n	80048e8 <_printf_i+0x200>
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	079b      	lsls	r3, r3, #30
 800486e:	d415      	bmi.n	800489c <_printf_i+0x1b4>
 8004870:	9b07      	ldr	r3, [sp, #28]
 8004872:	68e0      	ldr	r0, [r4, #12]
 8004874:	4298      	cmp	r0, r3
 8004876:	da39      	bge.n	80048ec <_printf_i+0x204>
 8004878:	0018      	movs	r0, r3
 800487a:	e037      	b.n	80048ec <_printf_i+0x204>
 800487c:	0022      	movs	r2, r4
 800487e:	2301      	movs	r3, #1
 8004880:	3219      	adds	r2, #25
 8004882:	9904      	ldr	r1, [sp, #16]
 8004884:	9803      	ldr	r0, [sp, #12]
 8004886:	9e05      	ldr	r6, [sp, #20]
 8004888:	47b0      	blx	r6
 800488a:	1c43      	adds	r3, r0, #1
 800488c:	d02c      	beq.n	80048e8 <_printf_i+0x200>
 800488e:	3501      	adds	r5, #1
 8004890:	68e3      	ldr	r3, [r4, #12]
 8004892:	9a07      	ldr	r2, [sp, #28]
 8004894:	1a9b      	subs	r3, r3, r2
 8004896:	42ab      	cmp	r3, r5
 8004898:	dcf0      	bgt.n	800487c <_printf_i+0x194>
 800489a:	e7e9      	b.n	8004870 <_printf_i+0x188>
 800489c:	2500      	movs	r5, #0
 800489e:	e7f7      	b.n	8004890 <_printf_i+0x1a8>
 80048a0:	2800      	cmp	r0, #0
 80048a2:	d0ad      	beq.n	8004800 <_printf_i+0x118>
 80048a4:	9d02      	ldr	r5, [sp, #8]
 80048a6:	0039      	movs	r1, r7
 80048a8:	f7fb fcb4 	bl	8000214 <__aeabi_uidivmod>
 80048ac:	5c73      	ldrb	r3, [r6, r1]
 80048ae:	3d01      	subs	r5, #1
 80048b0:	702b      	strb	r3, [r5, #0]
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d1f7      	bne.n	80048a6 <_printf_i+0x1be>
 80048b6:	2f08      	cmp	r7, #8
 80048b8:	d109      	bne.n	80048ce <_printf_i+0x1e6>
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	07db      	lsls	r3, r3, #31
 80048be:	d506      	bpl.n	80048ce <_printf_i+0x1e6>
 80048c0:	6863      	ldr	r3, [r4, #4]
 80048c2:	6922      	ldr	r2, [r4, #16]
 80048c4:	4293      	cmp	r3, r2
 80048c6:	dc02      	bgt.n	80048ce <_printf_i+0x1e6>
 80048c8:	2330      	movs	r3, #48	; 0x30
 80048ca:	3d01      	subs	r5, #1
 80048cc:	702b      	strb	r3, [r5, #0]
 80048ce:	9b02      	ldr	r3, [sp, #8]
 80048d0:	1b5b      	subs	r3, r3, r5
 80048d2:	6123      	str	r3, [r4, #16]
 80048d4:	9b05      	ldr	r3, [sp, #20]
 80048d6:	aa07      	add	r2, sp, #28
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	0021      	movs	r1, r4
 80048dc:	9b04      	ldr	r3, [sp, #16]
 80048de:	9803      	ldr	r0, [sp, #12]
 80048e0:	f7ff fe94 	bl	800460c <_printf_common>
 80048e4:	1c43      	adds	r3, r0, #1
 80048e6:	d1b8      	bne.n	800485a <_printf_i+0x172>
 80048e8:	2001      	movs	r0, #1
 80048ea:	4240      	negs	r0, r0
 80048ec:	b009      	add	sp, #36	; 0x24
 80048ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048f0:	08006bfd 	.word	0x08006bfd
 80048f4:	08006c0e 	.word	0x08006c0e

080048f8 <memchr>:
 80048f8:	b2c9      	uxtb	r1, r1
 80048fa:	1882      	adds	r2, r0, r2
 80048fc:	4290      	cmp	r0, r2
 80048fe:	d101      	bne.n	8004904 <memchr+0xc>
 8004900:	2000      	movs	r0, #0
 8004902:	4770      	bx	lr
 8004904:	7803      	ldrb	r3, [r0, #0]
 8004906:	428b      	cmp	r3, r1
 8004908:	d0fb      	beq.n	8004902 <memchr+0xa>
 800490a:	3001      	adds	r0, #1
 800490c:	e7f6      	b.n	80048fc <memchr+0x4>

0800490e <memcpy>:
 800490e:	2300      	movs	r3, #0
 8004910:	b510      	push	{r4, lr}
 8004912:	429a      	cmp	r2, r3
 8004914:	d100      	bne.n	8004918 <memcpy+0xa>
 8004916:	bd10      	pop	{r4, pc}
 8004918:	5ccc      	ldrb	r4, [r1, r3]
 800491a:	54c4      	strb	r4, [r0, r3]
 800491c:	3301      	adds	r3, #1
 800491e:	e7f8      	b.n	8004912 <memcpy+0x4>

08004920 <_free_r>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	0005      	movs	r5, r0
 8004924:	2900      	cmp	r1, #0
 8004926:	d010      	beq.n	800494a <_free_r+0x2a>
 8004928:	1f0c      	subs	r4, r1, #4
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	da00      	bge.n	8004932 <_free_r+0x12>
 8004930:	18e4      	adds	r4, r4, r3
 8004932:	0028      	movs	r0, r5
 8004934:	f000 f8d4 	bl	8004ae0 <__malloc_lock>
 8004938:	4a1d      	ldr	r2, [pc, #116]	; (80049b0 <_free_r+0x90>)
 800493a:	6813      	ldr	r3, [r2, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d105      	bne.n	800494c <_free_r+0x2c>
 8004940:	6063      	str	r3, [r4, #4]
 8004942:	6014      	str	r4, [r2, #0]
 8004944:	0028      	movs	r0, r5
 8004946:	f000 f8cc 	bl	8004ae2 <__malloc_unlock>
 800494a:	bd70      	pop	{r4, r5, r6, pc}
 800494c:	42a3      	cmp	r3, r4
 800494e:	d909      	bls.n	8004964 <_free_r+0x44>
 8004950:	6821      	ldr	r1, [r4, #0]
 8004952:	1860      	adds	r0, r4, r1
 8004954:	4283      	cmp	r3, r0
 8004956:	d1f3      	bne.n	8004940 <_free_r+0x20>
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	1841      	adds	r1, r0, r1
 800495e:	6021      	str	r1, [r4, #0]
 8004960:	e7ee      	b.n	8004940 <_free_r+0x20>
 8004962:	0013      	movs	r3, r2
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	2a00      	cmp	r2, #0
 8004968:	d001      	beq.n	800496e <_free_r+0x4e>
 800496a:	42a2      	cmp	r2, r4
 800496c:	d9f9      	bls.n	8004962 <_free_r+0x42>
 800496e:	6819      	ldr	r1, [r3, #0]
 8004970:	1858      	adds	r0, r3, r1
 8004972:	42a0      	cmp	r0, r4
 8004974:	d10b      	bne.n	800498e <_free_r+0x6e>
 8004976:	6820      	ldr	r0, [r4, #0]
 8004978:	1809      	adds	r1, r1, r0
 800497a:	1858      	adds	r0, r3, r1
 800497c:	6019      	str	r1, [r3, #0]
 800497e:	4282      	cmp	r2, r0
 8004980:	d1e0      	bne.n	8004944 <_free_r+0x24>
 8004982:	6810      	ldr	r0, [r2, #0]
 8004984:	6852      	ldr	r2, [r2, #4]
 8004986:	1841      	adds	r1, r0, r1
 8004988:	6019      	str	r1, [r3, #0]
 800498a:	605a      	str	r2, [r3, #4]
 800498c:	e7da      	b.n	8004944 <_free_r+0x24>
 800498e:	42a0      	cmp	r0, r4
 8004990:	d902      	bls.n	8004998 <_free_r+0x78>
 8004992:	230c      	movs	r3, #12
 8004994:	602b      	str	r3, [r5, #0]
 8004996:	e7d5      	b.n	8004944 <_free_r+0x24>
 8004998:	6821      	ldr	r1, [r4, #0]
 800499a:	1860      	adds	r0, r4, r1
 800499c:	4282      	cmp	r2, r0
 800499e:	d103      	bne.n	80049a8 <_free_r+0x88>
 80049a0:	6810      	ldr	r0, [r2, #0]
 80049a2:	6852      	ldr	r2, [r2, #4]
 80049a4:	1841      	adds	r1, r0, r1
 80049a6:	6021      	str	r1, [r4, #0]
 80049a8:	6062      	str	r2, [r4, #4]
 80049aa:	605c      	str	r4, [r3, #4]
 80049ac:	e7ca      	b.n	8004944 <_free_r+0x24>
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	20000cb4 	.word	0x20000cb4

080049b4 <_malloc_r>:
 80049b4:	2303      	movs	r3, #3
 80049b6:	b570      	push	{r4, r5, r6, lr}
 80049b8:	1ccd      	adds	r5, r1, #3
 80049ba:	439d      	bics	r5, r3
 80049bc:	3508      	adds	r5, #8
 80049be:	0006      	movs	r6, r0
 80049c0:	2d0c      	cmp	r5, #12
 80049c2:	d21e      	bcs.n	8004a02 <_malloc_r+0x4e>
 80049c4:	250c      	movs	r5, #12
 80049c6:	42a9      	cmp	r1, r5
 80049c8:	d81d      	bhi.n	8004a06 <_malloc_r+0x52>
 80049ca:	0030      	movs	r0, r6
 80049cc:	f000 f888 	bl	8004ae0 <__malloc_lock>
 80049d0:	4a25      	ldr	r2, [pc, #148]	; (8004a68 <_malloc_r+0xb4>)
 80049d2:	6814      	ldr	r4, [r2, #0]
 80049d4:	0021      	movs	r1, r4
 80049d6:	2900      	cmp	r1, #0
 80049d8:	d119      	bne.n	8004a0e <_malloc_r+0x5a>
 80049da:	4c24      	ldr	r4, [pc, #144]	; (8004a6c <_malloc_r+0xb8>)
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <_malloc_r+0x36>
 80049e2:	0030      	movs	r0, r6
 80049e4:	f000 f86a 	bl	8004abc <_sbrk_r>
 80049e8:	6020      	str	r0, [r4, #0]
 80049ea:	0029      	movs	r1, r5
 80049ec:	0030      	movs	r0, r6
 80049ee:	f000 f865 	bl	8004abc <_sbrk_r>
 80049f2:	1c43      	adds	r3, r0, #1
 80049f4:	d12b      	bne.n	8004a4e <_malloc_r+0x9a>
 80049f6:	230c      	movs	r3, #12
 80049f8:	0030      	movs	r0, r6
 80049fa:	6033      	str	r3, [r6, #0]
 80049fc:	f000 f871 	bl	8004ae2 <__malloc_unlock>
 8004a00:	e003      	b.n	8004a0a <_malloc_r+0x56>
 8004a02:	2d00      	cmp	r5, #0
 8004a04:	dadf      	bge.n	80049c6 <_malloc_r+0x12>
 8004a06:	230c      	movs	r3, #12
 8004a08:	6033      	str	r3, [r6, #0]
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	bd70      	pop	{r4, r5, r6, pc}
 8004a0e:	680b      	ldr	r3, [r1, #0]
 8004a10:	1b5b      	subs	r3, r3, r5
 8004a12:	d419      	bmi.n	8004a48 <_malloc_r+0x94>
 8004a14:	2b0b      	cmp	r3, #11
 8004a16:	d903      	bls.n	8004a20 <_malloc_r+0x6c>
 8004a18:	600b      	str	r3, [r1, #0]
 8004a1a:	18cc      	adds	r4, r1, r3
 8004a1c:	6025      	str	r5, [r4, #0]
 8004a1e:	e003      	b.n	8004a28 <_malloc_r+0x74>
 8004a20:	684b      	ldr	r3, [r1, #4]
 8004a22:	428c      	cmp	r4, r1
 8004a24:	d10d      	bne.n	8004a42 <_malloc_r+0x8e>
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	0030      	movs	r0, r6
 8004a2a:	f000 f85a 	bl	8004ae2 <__malloc_unlock>
 8004a2e:	0020      	movs	r0, r4
 8004a30:	2207      	movs	r2, #7
 8004a32:	300b      	adds	r0, #11
 8004a34:	1d23      	adds	r3, r4, #4
 8004a36:	4390      	bics	r0, r2
 8004a38:	1ac3      	subs	r3, r0, r3
 8004a3a:	d0e7      	beq.n	8004a0c <_malloc_r+0x58>
 8004a3c:	425a      	negs	r2, r3
 8004a3e:	50e2      	str	r2, [r4, r3]
 8004a40:	e7e4      	b.n	8004a0c <_malloc_r+0x58>
 8004a42:	6063      	str	r3, [r4, #4]
 8004a44:	000c      	movs	r4, r1
 8004a46:	e7ef      	b.n	8004a28 <_malloc_r+0x74>
 8004a48:	000c      	movs	r4, r1
 8004a4a:	6849      	ldr	r1, [r1, #4]
 8004a4c:	e7c3      	b.n	80049d6 <_malloc_r+0x22>
 8004a4e:	2303      	movs	r3, #3
 8004a50:	1cc4      	adds	r4, r0, #3
 8004a52:	439c      	bics	r4, r3
 8004a54:	42a0      	cmp	r0, r4
 8004a56:	d0e1      	beq.n	8004a1c <_malloc_r+0x68>
 8004a58:	1a21      	subs	r1, r4, r0
 8004a5a:	0030      	movs	r0, r6
 8004a5c:	f000 f82e 	bl	8004abc <_sbrk_r>
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	d1db      	bne.n	8004a1c <_malloc_r+0x68>
 8004a64:	e7c7      	b.n	80049f6 <_malloc_r+0x42>
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	20000cb4 	.word	0x20000cb4
 8004a6c:	20000cb8 	.word	0x20000cb8

08004a70 <_realloc_r>:
 8004a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a72:	0007      	movs	r7, r0
 8004a74:	000d      	movs	r5, r1
 8004a76:	0016      	movs	r6, r2
 8004a78:	2900      	cmp	r1, #0
 8004a7a:	d105      	bne.n	8004a88 <_realloc_r+0x18>
 8004a7c:	0011      	movs	r1, r2
 8004a7e:	f7ff ff99 	bl	80049b4 <_malloc_r>
 8004a82:	0004      	movs	r4, r0
 8004a84:	0020      	movs	r0, r4
 8004a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a88:	2a00      	cmp	r2, #0
 8004a8a:	d103      	bne.n	8004a94 <_realloc_r+0x24>
 8004a8c:	f7ff ff48 	bl	8004920 <_free_r>
 8004a90:	0034      	movs	r4, r6
 8004a92:	e7f7      	b.n	8004a84 <_realloc_r+0x14>
 8004a94:	f000 f826 	bl	8004ae4 <_malloc_usable_size_r>
 8004a98:	002c      	movs	r4, r5
 8004a9a:	42b0      	cmp	r0, r6
 8004a9c:	d2f2      	bcs.n	8004a84 <_realloc_r+0x14>
 8004a9e:	0031      	movs	r1, r6
 8004aa0:	0038      	movs	r0, r7
 8004aa2:	f7ff ff87 	bl	80049b4 <_malloc_r>
 8004aa6:	1e04      	subs	r4, r0, #0
 8004aa8:	d0ec      	beq.n	8004a84 <_realloc_r+0x14>
 8004aaa:	0029      	movs	r1, r5
 8004aac:	0032      	movs	r2, r6
 8004aae:	f7ff ff2e 	bl	800490e <memcpy>
 8004ab2:	0029      	movs	r1, r5
 8004ab4:	0038      	movs	r0, r7
 8004ab6:	f7ff ff33 	bl	8004920 <_free_r>
 8004aba:	e7e3      	b.n	8004a84 <_realloc_r+0x14>

08004abc <_sbrk_r>:
 8004abc:	2300      	movs	r3, #0
 8004abe:	b570      	push	{r4, r5, r6, lr}
 8004ac0:	4c06      	ldr	r4, [pc, #24]	; (8004adc <_sbrk_r+0x20>)
 8004ac2:	0005      	movs	r5, r0
 8004ac4:	0008      	movs	r0, r1
 8004ac6:	6023      	str	r3, [r4, #0]
 8004ac8:	f7fb ffee 	bl	8000aa8 <_sbrk>
 8004acc:	1c43      	adds	r3, r0, #1
 8004ace:	d103      	bne.n	8004ad8 <_sbrk_r+0x1c>
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d000      	beq.n	8004ad8 <_sbrk_r+0x1c>
 8004ad6:	602b      	str	r3, [r5, #0]
 8004ad8:	bd70      	pop	{r4, r5, r6, pc}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	20000f28 	.word	0x20000f28

08004ae0 <__malloc_lock>:
 8004ae0:	4770      	bx	lr

08004ae2 <__malloc_unlock>:
 8004ae2:	4770      	bx	lr

08004ae4 <_malloc_usable_size_r>:
 8004ae4:	1f0b      	subs	r3, r1, #4
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	1f18      	subs	r0, r3, #4
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	da01      	bge.n	8004af2 <_malloc_usable_size_r+0xe>
 8004aee:	580b      	ldr	r3, [r1, r0]
 8004af0:	18c0      	adds	r0, r0, r3
 8004af2:	4770      	bx	lr

08004af4 <_init>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afa:	bc08      	pop	{r3}
 8004afc:	469e      	mov	lr, r3
 8004afe:	4770      	bx	lr

08004b00 <_fini>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b06:	bc08      	pop	{r3}
 8004b08:	469e      	mov	lr, r3
 8004b0a:	4770      	bx	lr
