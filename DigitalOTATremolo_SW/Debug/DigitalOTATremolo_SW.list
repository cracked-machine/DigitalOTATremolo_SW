
DigitalOTATremolo_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a7c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002114  08004b3c  08004b3c  00014b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c50  08006c50  00020884  2**0
                  CONTENTS
  4 .ARM          00000000  08006c50  08006c50  00020884  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c50  08006c50  00020884  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c50  08006c50  00016c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c54  08006c54  00016c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000884  20000000  08006c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  20000884  080074dc  00020884  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f2c  080074dc  00020f2c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020884  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f86  00000000  00000000  000208ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b26  00000000  00000000  00031832  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f70  00000000  00000000  00034358  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de0  00000000  00000000  000352c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017af7  00000000  00000000  000360a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e4d6  00000000  00000000  0004db9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e979  00000000  00000000  0005c075  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da9ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003868  00000000  00000000  000daa6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000884 	.word	0x20000884
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b24 	.word	0x08004b24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000888 	.word	0x20000888
 8000104:	08004b24 	.word	0x08004b24

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_DAC_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000226:	003b      	movs	r3, r7
 8000228:	0018      	movs	r0, r3
 800022a:	2308      	movs	r3, #8
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f004 f869 	bl	8004306 <memset>

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <MX_DAC_Init+0x6c>)
 8000236:	4a16      	ldr	r2, [pc, #88]	; (8000290 <MX_DAC_Init+0x70>)
 8000238:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800023a:	4b14      	ldr	r3, [pc, #80]	; (800028c <MX_DAC_Init+0x6c>)
 800023c:	0018      	movs	r0, r3
 800023e:	f001 f8ab 	bl	8001398 <HAL_DAC_Init>
 8000242:	1e03      	subs	r3, r0, #0
 8000244:	d001      	beq.n	800024a <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 8000246:	f000 fadd 	bl	8000804 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800024a:	003b      	movs	r3, r7
 800024c:	2204      	movs	r2, #4
 800024e:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000250:	003b      	movs	r3, r7
 8000252:	2200      	movs	r2, #0
 8000254:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000256:	0039      	movs	r1, r7
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <MX_DAC_Init+0x6c>)
 800025a:	2200      	movs	r2, #0
 800025c:	0018      	movs	r0, r3
 800025e:	f001 f8d7 	bl	8001410 <HAL_DAC_ConfigChannel>
 8000262:	1e03      	subs	r3, r0, #0
 8000264:	d001      	beq.n	800026a <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 8000266:	f000 facd 	bl	8000804 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800026a:	003b      	movs	r3, r7
 800026c:	2214      	movs	r2, #20
 800026e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000270:	0039      	movs	r1, r7
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <MX_DAC_Init+0x6c>)
 8000274:	2210      	movs	r2, #16
 8000276:	0018      	movs	r0, r3
 8000278:	f001 f8ca 	bl	8001410 <HAL_DAC_ConfigChannel>
 800027c:	1e03      	subs	r3, r0, #0
 800027e:	d001      	beq.n	8000284 <MX_DAC_Init+0x64>
  {
    Error_Handler();
 8000280:	f000 fac0 	bl	8000804 <Error_Handler>
  }

}
 8000284:	46c0      	nop			; (mov r8, r8)
 8000286:	46bd      	mov	sp, r7
 8000288:	b002      	add	sp, #8
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000d00 	.word	0x20000d00
 8000290:	40007400 	.word	0x40007400

08000294 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b08a      	sub	sp, #40	; 0x28
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029c:	2314      	movs	r3, #20
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	0018      	movs	r0, r3
 80002a2:	2314      	movs	r3, #20
 80002a4:	001a      	movs	r2, r3
 80002a6:	2100      	movs	r1, #0
 80002a8:	f004 f82d 	bl	8004306 <memset>
  if(dacHandle->Instance==DAC)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a42      	ldr	r2, [pc, #264]	; (80003bc <HAL_DAC_MspInit+0x128>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d000      	beq.n	80002b8 <HAL_DAC_MspInit+0x24>
 80002b6:	e07c      	b.n	80003b2 <HAL_DAC_MspInit+0x11e>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80002b8:	4b41      	ldr	r3, [pc, #260]	; (80003c0 <HAL_DAC_MspInit+0x12c>)
 80002ba:	69da      	ldr	r2, [r3, #28]
 80002bc:	4b40      	ldr	r3, [pc, #256]	; (80003c0 <HAL_DAC_MspInit+0x12c>)
 80002be:	2180      	movs	r1, #128	; 0x80
 80002c0:	0589      	lsls	r1, r1, #22
 80002c2:	430a      	orrs	r2, r1
 80002c4:	61da      	str	r2, [r3, #28]
 80002c6:	4b3e      	ldr	r3, [pc, #248]	; (80003c0 <HAL_DAC_MspInit+0x12c>)
 80002c8:	69da      	ldr	r2, [r3, #28]
 80002ca:	2380      	movs	r3, #128	; 0x80
 80002cc:	059b      	lsls	r3, r3, #22
 80002ce:	4013      	ands	r3, r2
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d4:	4b3a      	ldr	r3, [pc, #232]	; (80003c0 <HAL_DAC_MspInit+0x12c>)
 80002d6:	695a      	ldr	r2, [r3, #20]
 80002d8:	4b39      	ldr	r3, [pc, #228]	; (80003c0 <HAL_DAC_MspInit+0x12c>)
 80002da:	2180      	movs	r1, #128	; 0x80
 80002dc:	0289      	lsls	r1, r1, #10
 80002de:	430a      	orrs	r2, r1
 80002e0:	615a      	str	r2, [r3, #20]
 80002e2:	4b37      	ldr	r3, [pc, #220]	; (80003c0 <HAL_DAC_MspInit+0x12c>)
 80002e4:	695a      	ldr	r2, [r3, #20]
 80002e6:	2380      	movs	r3, #128	; 0x80
 80002e8:	029b      	lsls	r3, r3, #10
 80002ea:	4013      	ands	r3, r2
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80002f0:	2114      	movs	r1, #20
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2230      	movs	r2, #48	; 0x30
 80002f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2203      	movs	r2, #3
 80002fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000304:	187a      	adds	r2, r7, r1
 8000306:	2390      	movs	r3, #144	; 0x90
 8000308:	05db      	lsls	r3, r3, #23
 800030a:	0011      	movs	r1, r2
 800030c:	0018      	movs	r0, r3
 800030e:	f001 fb93 	bl	8001a38 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000312:	4b2c      	ldr	r3, [pc, #176]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 8000314:	4a2c      	ldr	r2, [pc, #176]	; (80003c8 <HAL_DAC_MspInit+0x134>)
 8000316:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000318:	4b2a      	ldr	r3, [pc, #168]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 800031a:	2210      	movs	r2, #16
 800031c:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800031e:	4b29      	ldr	r3, [pc, #164]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000324:	4b27      	ldr	r3, [pc, #156]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 8000326:	2280      	movs	r2, #128	; 0x80
 8000328:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800032a:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 800032c:	2280      	movs	r2, #128	; 0x80
 800032e:	0092      	lsls	r2, r2, #2
 8000330:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000332:	4b24      	ldr	r3, [pc, #144]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 8000334:	2280      	movs	r2, #128	; 0x80
 8000336:	0112      	lsls	r2, r2, #4
 8000338:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800033a:	4b22      	ldr	r3, [pc, #136]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 800033c:	2220      	movs	r2, #32
 800033e:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000340:	4b20      	ldr	r3, [pc, #128]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000346:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 8000348:	0018      	movs	r0, r3
 800034a:	f001 f9dd 	bl	8001708 <HAL_DMA_Init>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 8000352:	f000 fa57 	bl	8000804 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a1a      	ldr	r2, [pc, #104]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	4b19      	ldr	r3, [pc, #100]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	625a      	str	r2, [r3, #36]	; 0x24

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <HAL_DAC_MspInit+0x138>)
 8000364:	4a1a      	ldr	r2, [pc, #104]	; (80003d0 <HAL_DAC_MspInit+0x13c>)
 8000366:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <HAL_DAC_MspInit+0x138>)
 800036a:	2210      	movs	r2, #16
 800036c:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800036e:	4b17      	ldr	r3, [pc, #92]	; (80003cc <HAL_DAC_MspInit+0x138>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <HAL_DAC_MspInit+0x138>)
 8000376:	2280      	movs	r2, #128	; 0x80
 8000378:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <HAL_DAC_MspInit+0x138>)
 800037c:	2280      	movs	r2, #128	; 0x80
 800037e:	0092      	lsls	r2, r2, #2
 8000380:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000382:	4b12      	ldr	r3, [pc, #72]	; (80003cc <HAL_DAC_MspInit+0x138>)
 8000384:	2280      	movs	r2, #128	; 0x80
 8000386:	0112      	lsls	r2, r2, #4
 8000388:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 800038a:	4b10      	ldr	r3, [pc, #64]	; (80003cc <HAL_DAC_MspInit+0x138>)
 800038c:	2220      	movs	r2, #32
 800038e:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000390:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <HAL_DAC_MspInit+0x138>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8000396:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <HAL_DAC_MspInit+0x138>)
 8000398:	0018      	movs	r0, r3
 800039a:	f001 f9b5 	bl	8001708 <HAL_DMA_Init>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <HAL_DAC_MspInit+0x112>
    {
      Error_Handler();
 80003a2:	f000 fa2f 	bl	8000804 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a08      	ldr	r2, [pc, #32]	; (80003cc <HAL_DAC_MspInit+0x138>)
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <HAL_DAC_MspInit+0x138>)
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b00a      	add	sp, #40	; 0x28
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	40007400 	.word	0x40007400
 80003c0:	40021000 	.word	0x40021000
 80003c4:	20000cbc 	.word	0x20000cbc
 80003c8:	40020030 	.word	0x40020030
 80003cc:	20000d14 	.word	0x20000d14
 80003d0:	40020044 	.word	0x40020044

080003d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <MX_DMA_Init+0x48>)
 80003dc:	695a      	ldr	r2, [r3, #20]
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_DMA_Init+0x48>)
 80003e0:	2101      	movs	r1, #1
 80003e2:	430a      	orrs	r2, r1
 80003e4:	615a      	str	r2, [r3, #20]
 80003e6:	4b0d      	ldr	r3, [pc, #52]	; (800041c <MX_DMA_Init+0x48>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	2201      	movs	r2, #1
 80003ec:	4013      	ands	r3, r2
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2101      	movs	r1, #1
 80003f6:	200a      	movs	r0, #10
 80003f8:	f000 ff9c 	bl	8001334 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80003fc:	200a      	movs	r0, #10
 80003fe:	f000 ffae 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 1, 0);
 8000402:	2200      	movs	r2, #0
 8000404:	2101      	movs	r1, #1
 8000406:	200b      	movs	r0, #11
 8000408:	f000 ff94 	bl	8001334 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800040c:	200b      	movs	r0, #11
 800040e:	f000 ffa6 	bl	800135e <HAL_NVIC_EnableIRQ>

}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	b002      	add	sp, #8
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	40021000 	.word	0x40021000

08000420 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000420:	b590      	push	{r4, r7, lr}
 8000422:	b089      	sub	sp, #36	; 0x24
 8000424:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	240c      	movs	r4, #12
 8000428:	193b      	adds	r3, r7, r4
 800042a:	0018      	movs	r0, r3
 800042c:	2314      	movs	r3, #20
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f003 ff68 	bl	8004306 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000436:	4b2a      	ldr	r3, [pc, #168]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000438:	695a      	ldr	r2, [r3, #20]
 800043a:	4b29      	ldr	r3, [pc, #164]	; (80004e0 <MX_GPIO_Init+0xc0>)
 800043c:	2180      	movs	r1, #128	; 0x80
 800043e:	0309      	lsls	r1, r1, #12
 8000440:	430a      	orrs	r2, r1
 8000442:	615a      	str	r2, [r3, #20]
 8000444:	4b26      	ldr	r3, [pc, #152]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000446:	695a      	ldr	r2, [r3, #20]
 8000448:	2380      	movs	r3, #128	; 0x80
 800044a:	031b      	lsls	r3, r3, #12
 800044c:	4013      	ands	r3, r2
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000454:	695a      	ldr	r2, [r3, #20]
 8000456:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000458:	2180      	movs	r1, #128	; 0x80
 800045a:	0289      	lsls	r1, r1, #10
 800045c:	430a      	orrs	r2, r1
 800045e:	615a      	str	r2, [r3, #20]
 8000460:	4b1f      	ldr	r3, [pc, #124]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000462:	695a      	ldr	r2, [r3, #20]
 8000464:	2380      	movs	r3, #128	; 0x80
 8000466:	029b      	lsls	r3, r3, #10
 8000468:	4013      	ands	r3, r2
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046e:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000470:	695a      	ldr	r2, [r3, #20]
 8000472:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <MX_GPIO_Init+0xc0>)
 8000474:	2180      	movs	r1, #128	; 0x80
 8000476:	02c9      	lsls	r1, r1, #11
 8000478:	430a      	orrs	r2, r1
 800047a:	615a      	str	r2, [r3, #20]
 800047c:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <MX_GPIO_Init+0xc0>)
 800047e:	695a      	ldr	r2, [r3, #20]
 8000480:	2380      	movs	r3, #128	; 0x80
 8000482:	02db      	lsls	r3, r3, #11
 8000484:	4013      	ands	r3, r2
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SIN1_TAPTEMPO_EXTI13_Pin|SINE1_TOGGLE_EXTI1_Pin|SINE2_TOGGLE_EXTI2_Pin;
 800048a:	193b      	adds	r3, r7, r4
 800048c:	4a15      	ldr	r2, [pc, #84]	; (80004e4 <MX_GPIO_Init+0xc4>)
 800048e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	4a15      	ldr	r2, [pc, #84]	; (80004e8 <MX_GPIO_Init+0xc8>)
 8000494:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	2201      	movs	r2, #1
 800049a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800049c:	193b      	adds	r3, r7, r4
 800049e:	4a13      	ldr	r2, [pc, #76]	; (80004ec <MX_GPIO_Init+0xcc>)
 80004a0:	0019      	movs	r1, r3
 80004a2:	0010      	movs	r0, r2
 80004a4:	f001 fac8 	bl	8001a38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2100      	movs	r1, #0
 80004ac:	2005      	movs	r0, #5
 80004ae:	f000 ff41 	bl	8001334 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80004b2:	2005      	movs	r0, #5
 80004b4:	f000 ff53 	bl	800135e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2100      	movs	r1, #0
 80004bc:	2006      	movs	r0, #6
 80004be:	f000 ff39 	bl	8001334 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80004c2:	2006      	movs	r0, #6
 80004c4:	f000 ff4b 	bl	800135e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2100      	movs	r1, #0
 80004cc:	2007      	movs	r0, #7
 80004ce:	f000 ff31 	bl	8001334 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004d2:	2007      	movs	r0, #7
 80004d4:	f000 ff43 	bl	800135e <HAL_NVIC_EnableIRQ>

}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b009      	add	sp, #36	; 0x24
 80004de:	bd90      	pop	{r4, r7, pc}
 80004e0:	40021000 	.word	0x40021000
 80004e4:	00002006 	.word	0x00002006
 80004e8:	10210000 	.word	0x10210000
 80004ec:	48000800 	.word	0x48000800

080004f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <MX_I2C1_Init+0x74>)
 80004f6:	4a1c      	ldr	r2, [pc, #112]	; (8000568 <MX_I2C1_Init+0x78>)
 80004f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <MX_I2C1_Init+0x74>)
 80004fc:	4a1b      	ldr	r2, [pc, #108]	; (800056c <MX_I2C1_Init+0x7c>)
 80004fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <MX_I2C1_Init+0x74>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <MX_I2C1_Init+0x74>)
 8000508:	2201      	movs	r2, #1
 800050a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800050c:	4b15      	ldr	r3, [pc, #84]	; (8000564 <MX_I2C1_Init+0x74>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <MX_I2C1_Init+0x74>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <MX_I2C1_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_I2C1_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000524:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_I2C1_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <MX_I2C1_Init+0x74>)
 800052c:	0018      	movs	r0, r3
 800052e:	f001 fc3f 	bl	8001db0 <HAL_I2C_Init>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d001      	beq.n	800053a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000536:	f000 f965 	bl	8000804 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <MX_I2C1_Init+0x74>)
 800053c:	2100      	movs	r1, #0
 800053e:	0018      	movs	r0, r3
 8000540:	f002 f8f0 	bl	8002724 <HAL_I2CEx_ConfigAnalogFilter>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d001      	beq.n	800054c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000548:	f000 f95c 	bl	8000804 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <MX_I2C1_Init+0x74>)
 800054e:	2100      	movs	r1, #0
 8000550:	0018      	movs	r0, r3
 8000552:	f002 f933 	bl	80027bc <HAL_I2CEx_ConfigDigitalFilter>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800055a:	f000 f953 	bl	8000804 <Error_Handler>
  }

}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000d58 	.word	0x20000d58
 8000568:	40005400 	.word	0x40005400
 800056c:	2000090e 	.word	0x2000090e

08000570 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	2314      	movs	r3, #20
 800057a:	18fb      	adds	r3, r7, r3
 800057c:	0018      	movs	r0, r3
 800057e:	2314      	movs	r3, #20
 8000580:	001a      	movs	r2, r3
 8000582:	2100      	movs	r1, #0
 8000584:	f003 febf 	bl	8004306 <memset>
  if(i2cHandle->Instance==I2C1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a1c      	ldr	r2, [pc, #112]	; (8000600 <HAL_I2C_MspInit+0x90>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d131      	bne.n	80005f6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <HAL_I2C_MspInit+0x94>)
 8000594:	695a      	ldr	r2, [r3, #20]
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <HAL_I2C_MspInit+0x94>)
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	02c9      	lsls	r1, r1, #11
 800059c:	430a      	orrs	r2, r1
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <HAL_I2C_MspInit+0x94>)
 80005a2:	695a      	ldr	r2, [r3, #20]
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	02db      	lsls	r3, r3, #11
 80005a8:	4013      	ands	r3, r2
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005ae:	2114      	movs	r1, #20
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	22c0      	movs	r2, #192	; 0xc0
 80005b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2212      	movs	r2, #18
 80005ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2201      	movs	r2, #1
 80005c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2203      	movs	r2, #3
 80005c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2201      	movs	r2, #1
 80005cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <HAL_I2C_MspInit+0x98>)
 80005d2:	0019      	movs	r1, r3
 80005d4:	0010      	movs	r0, r2
 80005d6:	f001 fa2f 	bl	8001a38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <HAL_I2C_MspInit+0x94>)
 80005dc:	69da      	ldr	r2, [r3, #28]
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <HAL_I2C_MspInit+0x94>)
 80005e0:	2180      	movs	r1, #128	; 0x80
 80005e2:	0389      	lsls	r1, r1, #14
 80005e4:	430a      	orrs	r2, r1
 80005e6:	61da      	str	r2, [r3, #28]
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_I2C_MspInit+0x94>)
 80005ea:	69da      	ldr	r2, [r3, #28]
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	039b      	lsls	r3, r3, #14
 80005f0:	4013      	ands	r3, r2
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b00a      	add	sp, #40	; 0x28
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	40005400 	.word	0x40005400
 8000604:	40021000 	.word	0x40021000
 8000608:	48000400 	.word	0x48000400

0800060c <Utils_i2c_scan>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Utils_i2c_scan() {
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0

    int DeviceFound=0;
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 8000616:	230e      	movs	r3, #14
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	2200      	movs	r2, #0
 800061c:	801a      	strh	r2, [r3, #0]
 800061e:	e01e      	b.n	800065e <Utils_i2c_scan+0x52>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000620:	230e      	movs	r3, #14
 8000622:	18fb      	adds	r3, r7, r3
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	18db      	adds	r3, r3, r3
 8000628:	b299      	uxth	r1, r3
 800062a:	1dfc      	adds	r4, r7, #7
 800062c:	4810      	ldr	r0, [pc, #64]	; (8000670 <Utils_i2c_scan+0x64>)
 800062e:	230a      	movs	r3, #10
 8000630:	2201      	movs	r2, #1
 8000632:	f001 fd81 	bl	8002138 <HAL_I2C_IsDeviceReady>
 8000636:	0003      	movs	r3, r0
 8000638:	7023      	strb	r3, [r4, #0]
        if(res == HAL_OK) {
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d107      	bne.n	8000652 <Utils_i2c_scan+0x46>
            DeviceFound=1;
 8000642:	2301      	movs	r3, #1
 8000644:	60bb      	str	r3, [r7, #8]
            ssd1306_SetI2CAddress(i);
 8000646:	230e      	movs	r3, #14
 8000648:	18fb      	adds	r3, r7, r3
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	0018      	movs	r0, r3
 800064e:	f003 fb67 	bl	8003d20 <ssd1306_SetI2CAddress>
    for(uint16_t i = 0; i < 128; i++) {
 8000652:	210e      	movs	r1, #14
 8000654:	187b      	adds	r3, r7, r1
 8000656:	881a      	ldrh	r2, [r3, #0]
 8000658:	187b      	adds	r3, r7, r1
 800065a:	3201      	adds	r2, #1
 800065c:	801a      	strh	r2, [r3, #0]
 800065e:	230e      	movs	r3, #14
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	2b7f      	cmp	r3, #127	; 0x7f
 8000666:	d9db      	bls.n	8000620 <Utils_i2c_scan+0x14>
        }
    }
    if(!DeviceFound)
    {
    }
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b005      	add	sp, #20
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	20000d58 	.word	0x20000d58

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f000 fd29 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f85f 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000682:	f7ff fecd 	bl	8000420 <MX_GPIO_Init>
  MX_DMA_Init();
 8000686:	f7ff fea5 	bl	80003d4 <MX_DMA_Init>
  MX_DAC_Init();
 800068a:	f7ff fdc9 	bl	8000220 <MX_DAC_Init>
  MX_TIM6_Init();
 800068e:	f000 fb1b 	bl	8000cc8 <MX_TIM6_Init>
  MX_I2C1_Init();
 8000692:	f7ff ff2d 	bl	80004f0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000696:	f000 fa51 	bl	8000b3c <MX_TIM2_Init>
  MX_TIM3_Init();
 800069a:	f000 fab1 	bl	8000c00 <MX_TIM3_Init>
  MX_TIM7_Init();
 800069e:	f000 fb4d 	bl	8000d3c <MX_TIM7_Init>
  MX_TIM15_Init();
 80006a2:	f000 fbab 	bl	8000dfc <MX_TIM15_Init>
  MX_TIM14_Init();
 80006a6:	f000 fb83 	bl	8000db0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  Utils_i2c_scan();
 80006aa:	f7ff ffaf 	bl	800060c <Utils_i2c_scan>
  ssd1306_Init();
 80006ae:	f003 fbbb 	bl	8003e28 <ssd1306_Init>

  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	0099      	lsls	r1, r3, #2
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <main+0xa4>)
 80006b8:	4818      	ldr	r0, [pc, #96]	; (800071c <main+0xa8>)
 80006ba:	2300      	movs	r3, #0
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	000b      	movs	r3, r1
 80006c0:	2100      	movs	r1, #0
 80006c2:	f000 fee5 	bl	8001490 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80006c6:	2380      	movs	r3, #128	; 0x80
 80006c8:	0099      	lsls	r1, r3, #2
 80006ca:	4a13      	ldr	r2, [pc, #76]	; (8000718 <main+0xa4>)
 80006cc:	4813      	ldr	r0, [pc, #76]	; (800071c <main+0xa8>)
 80006ce:	2300      	movs	r3, #0
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	000b      	movs	r3, r1
 80006d4:	2110      	movs	r1, #16
 80006d6:	f000 fedb 	bl	8001490 <HAL_DAC_Start_DMA>

  TIM2->ARR = sin1_max_arr;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <main+0xac>)
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	2380      	movs	r3, #128	; 0x80
 80006e0:	05db      	lsls	r3, r3, #23
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->ARR = sin2_max_arr;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <main+0xb0>)
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <main+0xb4>)
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c

  // Trigger inputs for rotary encoders
  HAL_TIM_Base_Start(&htim2);
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <main+0xb8>)
 80006ee:	0018      	movs	r0, r3
 80006f0:	f002 feba 	bl	8003468 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <main+0xbc>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f002 feb6 	bl	8003468 <HAL_TIM_Base_Start>

  // DAC trigger for sine1 wave output
  HAL_TIM_Base_Start(&htim6);
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <main+0xc0>)
 80006fe:	0018      	movs	r0, r3
 8000700:	f002 feb2 	bl	8003468 <HAL_TIM_Base_Start>
  // DAC trigger for sine2 wave output
  HAL_TIM_Base_Start(&htim7);
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <main+0xc4>)
 8000706:	0018      	movs	r0, r3
 8000708:	f002 feae 	bl	8003468 <HAL_TIM_Base_Start>

  // display flash timer
  HAL_TIM_Base_Start_IT(&htim14);
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <main+0xc8>)
 800070e:	0018      	movs	r0, r3
 8000710:	f002 fecc 	bl	80034ac <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000714:	e7fe      	b.n	8000714 <main+0xa0>
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	20000000 	.word	0x20000000
 800071c:	20000d00 	.word	0x20000d00
 8000720:	20000800 	.word	0x20000800
 8000724:	20000801 	.word	0x20000801
 8000728:	40000400 	.word	0x40000400
 800072c:	20000e64 	.word	0x20000e64
 8000730:	20000de4 	.word	0x20000de4
 8000734:	20000e24 	.word	0x20000e24
 8000738:	20000ee4 	.word	0x20000ee4
 800073c:	20000ea4 	.word	0x20000ea4

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b099      	sub	sp, #100	; 0x64
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	242c      	movs	r4, #44	; 0x2c
 8000748:	193b      	adds	r3, r7, r4
 800074a:	0018      	movs	r0, r3
 800074c:	2334      	movs	r3, #52	; 0x34
 800074e:	001a      	movs	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	f003 fdd8 	bl	8004306 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000756:	231c      	movs	r3, #28
 8000758:	18fb      	adds	r3, r7, r3
 800075a:	0018      	movs	r0, r3
 800075c:	2310      	movs	r3, #16
 800075e:	001a      	movs	r2, r3
 8000760:	2100      	movs	r1, #0
 8000762:	f003 fdd0 	bl	8004306 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000766:	003b      	movs	r3, r7
 8000768:	0018      	movs	r0, r3
 800076a:	231c      	movs	r3, #28
 800076c:	001a      	movs	r2, r3
 800076e:	2100      	movs	r1, #0
 8000770:	f003 fdc9 	bl	8004306 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	0021      	movs	r1, r4
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2202      	movs	r2, #2
 800077a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2201      	movs	r2, #1
 8000780:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2210      	movs	r2, #16
 8000786:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2202      	movs	r2, #2
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	0212      	lsls	r2, r2, #8
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	0312      	lsls	r2, r2, #12
 800079c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2200      	movs	r2, #0
 80007a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 f854 	bl	8002854 <HAL_RCC_OscConfig>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80007b0:	f000 f828 	bl	8000804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	211c      	movs	r1, #28
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2207      	movs	r2, #7
 80007ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2202      	movs	r2, #2
 80007c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2101      	movs	r1, #1
 80007d2:	0018      	movs	r0, r3
 80007d4:	f002 fbc4 	bl	8002f60 <HAL_RCC_ClockConfig>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007dc:	f000 f812 	bl	8000804 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007e0:	003b      	movs	r3, r7
 80007e2:	2220      	movs	r2, #32
 80007e4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80007e6:	003b      	movs	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ec:	003b      	movs	r3, r7
 80007ee:	0018      	movs	r0, r3
 80007f0:	f002 fd0e 	bl	8003210 <HAL_RCCEx_PeriphCLKConfig>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80007f8:	f000 f804 	bl	8000804 <Error_Handler>
  }
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b019      	add	sp, #100	; 0x64
 8000802:	bd90      	pop	{r4, r7, pc}

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_MspInit+0x44>)
 8000818:	699a      	ldr	r2, [r3, #24]
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <HAL_MspInit+0x44>)
 800081c:	2101      	movs	r1, #1
 800081e:	430a      	orrs	r2, r1
 8000820:	619a      	str	r2, [r3, #24]
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_MspInit+0x44>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	2201      	movs	r2, #1
 8000828:	4013      	ands	r3, r2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <HAL_MspInit+0x44>)
 8000830:	69da      	ldr	r2, [r3, #28]
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_MspInit+0x44>)
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	0549      	lsls	r1, r1, #21
 8000838:	430a      	orrs	r2, r1
 800083a:	61da      	str	r2, [r3, #28]
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_MspInit+0x44>)
 800083e:	69da      	ldr	r2, [r3, #28]
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	055b      	lsls	r3, r3, #21
 8000844:	4013      	ands	r3, r2
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40021000 	.word	0x40021000

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <HardFault_Handler+0x4>

08000868 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000880:	f000 fc6e 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	TIM6->CR1 ^= TIM_CR1_CEN;
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <EXTI0_1_IRQHandler+0x1c>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <EXTI0_1_IRQHandler+0x1c>)
 8000896:	2101      	movs	r1, #1
 8000898:	404a      	eors	r2, r1
 800089a:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800089c:	2002      	movs	r0, #2
 800089e:	f001 fa61 	bl	8001d64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40001000 	.word	0x40001000

080008ac <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
	TIM7->CR1 ^= TIM_CR1_CEN;
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <EXTI2_3_IRQHandler+0x1c>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <EXTI2_3_IRQHandler+0x1c>)
 80008b6:	2101      	movs	r1, #1
 80008b8:	404a      	eors	r2, r1
 80008ba:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80008bc:	2004      	movs	r0, #4
 80008be:	f001 fa51 	bl	8001d64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40001400 	.word	0x40001400

080008cc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

		// is tim15 already running?
		if(TIM15->CR1 & TIM_CR1_CEN)
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <EXTI4_15_IRQHandler+0x78>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2201      	movs	r2, #1
 80008d6:	4013      	ands	r3, r2
 80008d8:	d022      	beq.n	8000920 <EXTI4_15_IRQHandler+0x54>
		{
			// stop the timer
			tap_count = TIM15->CNT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <EXTI4_15_IRQHandler+0x78>)
 80008dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <EXTI4_15_IRQHandler+0x7c>)
 80008e0:	601a      	str	r2, [r3, #0]
			TIM15->CR1 &= ~TIM_CR1_CEN;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <EXTI4_15_IRQHandler+0x78>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <EXTI4_15_IRQHandler+0x78>)
 80008e8:	2101      	movs	r1, #1
 80008ea:	438a      	bics	r2, r1
 80008ec:	601a      	str	r2, [r3, #0]

			// make sure timer cnt doesn't overflow!
			if((sin1_max_arr - (tap_count/16)) > 64)
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <EXTI4_15_IRQHandler+0x80>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	001a      	movs	r2, r3
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <EXTI4_15_IRQHandler+0x7c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	091b      	lsrs	r3, r3, #4
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	2b40      	cmp	r3, #64	; 0x40
 80008fe:	d904      	bls.n	800090a <EXTI4_15_IRQHandler+0x3e>
				TIM2->CNT = 0;
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
 8000908:	e013      	b.n	8000932 <EXTI4_15_IRQHandler+0x66>
			else
				TIM2->CNT = sin1_max_arr - (tap_count/16);
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <EXTI4_15_IRQHandler+0x80>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	0019      	movs	r1, r3
 8000910:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <EXTI4_15_IRQHandler+0x7c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	091a      	lsrs	r2, r3, #4
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	1a8a      	subs	r2, r1, r2
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
 800091e:	e008      	b.n	8000932 <EXTI4_15_IRQHandler+0x66>

		}
		else
		{
			// start the timer
			TIM15->CNT = 0;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <EXTI4_15_IRQHandler+0x78>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
			TIM15->CR1 |= TIM_CR1_CEN;
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <EXTI4_15_IRQHandler+0x78>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <EXTI4_15_IRQHandler+0x78>)
 800092c:	2101      	movs	r1, #1
 800092e:	430a      	orrs	r2, r1
 8000930:	601a      	str	r2, [r3, #0]
			//HAL_TIM_Base_Start(&htim15);
		}


  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	019b      	lsls	r3, r3, #6
 8000936:	0018      	movs	r0, r3
 8000938:	f001 fa14 	bl	8001d64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	40014000 	.word	0x40014000
 8000948:	200008a0 	.word	0x200008a0
 800094c:	20000800 	.word	0x20000800

08000950 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000956:	0018      	movs	r0, r3
 8000958:	f000 ff84 	bl	8001864 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	20000cbc 	.word	0x20000cbc

08000968 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800096e:	0018      	movs	r0, r3
 8000970:	f000 ff78 	bl	8001864 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	20000d14 	.word	0x20000d14

08000980 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM14_IRQn 0 */

	display_flash ^= 1UL << 0UL;
 8000986:	4b46      	ldr	r3, [pc, #280]	; (8000aa0 <TIM14_IRQHandler+0x120>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2201      	movs	r2, #1
 800098c:	4053      	eors	r3, r2
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b43      	ldr	r3, [pc, #268]	; (8000aa0 <TIM14_IRQHandler+0x120>)
 8000992:	701a      	strb	r2, [r3, #0]
	ssd1306_Fill(Black);
 8000994:	2000      	movs	r0, #0
 8000996:	f003 fab5 	bl	8003f04 <ssd1306_Fill>

	// update sin1 timer with inverted encoder cnt
	TIM6->PSC = sin1_max_arr - TIM2->CNT;
 800099a:	4b42      	ldr	r3, [pc, #264]	; (8000aa4 <TIM14_IRQHandler+0x124>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	0019      	movs	r1, r3
 80009a0:	2380      	movs	r3, #128	; 0x80
 80009a2:	05db      	lsls	r3, r3, #23
 80009a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009a6:	4b40      	ldr	r3, [pc, #256]	; (8000aa8 <TIM14_IRQHandler+0x128>)
 80009a8:	1a8a      	subs	r2, r1, r2
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28

	// update sin2 timer with inverted encoder cnt
	TIM7->PSC = sin2_max_arr - TIM3->CNT;
 80009ac:	4b3f      	ldr	r3, [pc, #252]	; (8000aac <TIM14_IRQHandler+0x12c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	0019      	movs	r1, r3
 80009b2:	4b3f      	ldr	r3, [pc, #252]	; (8000ab0 <TIM14_IRQHandler+0x130>)
 80009b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009b6:	4b3f      	ldr	r3, [pc, #252]	; (8000ab4 <TIM14_IRQHandler+0x134>)
 80009b8:	1a8a      	subs	r2, r1, r2
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28

	// plot sin1 setting to display
	ssd1306_SetCursor(10, 5);
 80009bc:	2105      	movs	r1, #5
 80009be:	200a      	movs	r0, #10
 80009c0:	f003 fc4a 	bl	8004258 <ssd1306_SetCursor>
	char encoder1[11];
	if(TIM6->CR1 & TIM_CR1_CEN)
 80009c4:	4b38      	ldr	r3, [pc, #224]	; (8000aa8 <TIM14_IRQHandler+0x128>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2201      	movs	r2, #1
 80009ca:	4013      	ands	r3, r2
 80009cc:	d009      	beq.n	80009e2 <TIM14_IRQHandler+0x62>
		snprintf(encoder1, sizeof(encoder1), "%lu", TIM2->CNT);
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	05db      	lsls	r3, r3, #23
 80009d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d4:	4a38      	ldr	r2, [pc, #224]	; (8000ab8 <TIM14_IRQHandler+0x138>)
 80009d6:	211c      	movs	r1, #28
 80009d8:	1878      	adds	r0, r7, r1
 80009da:	210b      	movs	r1, #11
 80009dc:	f003 fc9c 	bl	8004318 <sniprintf>
 80009e0:	e003      	b.n	80009ea <TIM14_IRQHandler+0x6a>
	else
		snprintf(encoder1, sizeof(encoder1), "OFF");
 80009e2:	231c      	movs	r3, #28
 80009e4:	18fb      	adds	r3, r7, r3
 80009e6:	4a35      	ldr	r2, [pc, #212]	; (8000abc <TIM14_IRQHandler+0x13c>)
 80009e8:	601a      	str	r2, [r3, #0]
	ssd1306_WriteString(encoder1, Font_16x26, White, 0);
 80009ea:	4a35      	ldr	r2, [pc, #212]	; (8000ac0 <TIM14_IRQHandler+0x140>)
 80009ec:	231c      	movs	r3, #28
 80009ee:	18f8      	adds	r0, r7, r3
 80009f0:	2300      	movs	r3, #0
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2301      	movs	r3, #1
 80009f6:	6811      	ldr	r1, [r2, #0]
 80009f8:	6852      	ldr	r2, [r2, #4]
 80009fa:	f003 fbff 	bl	80041fc <ssd1306_WriteString>

	// plot sin2 setting to display
	ssd1306_SetCursor(70, 5);
 80009fe:	2105      	movs	r1, #5
 8000a00:	2046      	movs	r0, #70	; 0x46
 8000a02:	f003 fc29 	bl	8004258 <ssd1306_SetCursor>
	char encoder2[11];
	if(TIM7->CR1 & TIM_CR1_CEN)
 8000a06:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <TIM14_IRQHandler+0x134>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	d008      	beq.n	8000a22 <TIM14_IRQHandler+0xa2>
		snprintf(encoder2, sizeof(encoder2), "%lu",TIM3->CNT);
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <TIM14_IRQHandler+0x130>)
 8000a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a14:	4a28      	ldr	r2, [pc, #160]	; (8000ab8 <TIM14_IRQHandler+0x138>)
 8000a16:	2110      	movs	r1, #16
 8000a18:	1878      	adds	r0, r7, r1
 8000a1a:	210b      	movs	r1, #11
 8000a1c:	f003 fc7c 	bl	8004318 <sniprintf>
 8000a20:	e003      	b.n	8000a2a <TIM14_IRQHandler+0xaa>
	else
		snprintf(encoder2, sizeof(encoder2), "OFF");
 8000a22:	2310      	movs	r3, #16
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	4a25      	ldr	r2, [pc, #148]	; (8000abc <TIM14_IRQHandler+0x13c>)
 8000a28:	601a      	str	r2, [r3, #0]
	ssd1306_WriteString(encoder2, Font_16x26, White, 0);
 8000a2a:	4a25      	ldr	r2, [pc, #148]	; (8000ac0 <TIM14_IRQHandler+0x140>)
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	18f8      	adds	r0, r7, r3
 8000a30:	2300      	movs	r3, #0
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	2301      	movs	r3, #1
 8000a36:	6811      	ldr	r1, [r2, #0]
 8000a38:	6852      	ldr	r2, [r2, #4]
 8000a3a:	f003 fbdf 	bl	80041fc <ssd1306_WriteString>


	ssd1306_SetCursor(45, 40);
 8000a3e:	2128      	movs	r1, #40	; 0x28
 8000a40:	202d      	movs	r0, #45	; 0x2d
 8000a42:	f003 fc09 	bl	8004258 <ssd1306_SetCursor>
	if(TIM15->CR1 & TIM_CR1_CEN)
 8000a46:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <TIM14_IRQHandler+0x144>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	d00d      	beq.n	8000a6c <TIM14_IRQHandler+0xec>
	{
		if(display_flash)
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <TIM14_IRQHandler+0x120>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d019      	beq.n	8000a8c <TIM14_IRQHandler+0x10c>
		{
			ssd1306_WriteString("TAP", Font_11x18, White, 0);
 8000a58:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <TIM14_IRQHandler+0x148>)
 8000a5a:	481c      	ldr	r0, [pc, #112]	; (8000acc <TIM14_IRQHandler+0x14c>)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2301      	movs	r3, #1
 8000a62:	6811      	ldr	r1, [r2, #0]
 8000a64:	6852      	ldr	r2, [r2, #4]
 8000a66:	f003 fbc9 	bl	80041fc <ssd1306_WriteString>
 8000a6a:	e00f      	b.n	8000a8c <TIM14_IRQHandler+0x10c>
		}
	}
	else
	{
		char tap_tempo[11];
		snprintf(tap_tempo, sizeof(tap_tempo), "%lu",tap_count);
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <TIM14_IRQHandler+0x150>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <TIM14_IRQHandler+0x138>)
 8000a72:	1d38      	adds	r0, r7, #4
 8000a74:	210b      	movs	r1, #11
 8000a76:	f003 fc4f 	bl	8004318 <sniprintf>
		ssd1306_WriteString(tap_tempo, Font_11x18, White, 0);
 8000a7a:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <TIM14_IRQHandler+0x148>)
 8000a7c:	1d38      	adds	r0, r7, #4
 8000a7e:	2300      	movs	r3, #0
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2301      	movs	r3, #1
 8000a84:	6811      	ldr	r1, [r2, #0]
 8000a86:	6852      	ldr	r2, [r2, #4]
 8000a88:	f003 fbb8 	bl	80041fc <ssd1306_WriteString>
	}


	ssd1306_UpdateScreen();
 8000a8c:	f003 fa5e 	bl	8003f4c <ssd1306_UpdateScreen>
  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <TIM14_IRQHandler+0x154>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f002 fdc0 	bl	8003618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b00a      	add	sp, #40	; 0x28
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200008a4 	.word	0x200008a4
 8000aa4:	20000800 	.word	0x20000800
 8000aa8:	40001000 	.word	0x40001000
 8000aac:	20000801 	.word	0x20000801
 8000ab0:	40000400 	.word	0x40000400
 8000ab4:	40001400 	.word	0x40001400
 8000ab8:	08004b3c 	.word	0x08004b3c
 8000abc:	0046464f 	.word	0x0046464f
 8000ac0:	20000818 	.word	0x20000818
 8000ac4:	40014000 	.word	0x40014000
 8000ac8:	20000810 	.word	0x20000810
 8000acc:	08004b40 	.word	0x08004b40
 8000ad0:	200008a0 	.word	0x200008a0
 8000ad4:	20000ea4 	.word	0x20000ea4

08000ad8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <_sbrk+0x50>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d102      	bne.n	8000aee <_sbrk+0x16>
		heap_end = &end;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <_sbrk+0x50>)
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <_sbrk+0x54>)
 8000aec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <_sbrk+0x50>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <_sbrk+0x50>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	18d3      	adds	r3, r2, r3
 8000afc:	466a      	mov	r2, sp
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d907      	bls.n	8000b12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b02:	f003 fbc3 	bl	800428c <__errno>
 8000b06:	0003      	movs	r3, r0
 8000b08:	220c      	movs	r2, #12
 8000b0a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	425b      	negs	r3, r3
 8000b10:	e006      	b.n	8000b20 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <_sbrk+0x50>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	18d2      	adds	r2, r2, r3
 8000b1a:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <_sbrk+0x50>)
 8000b1c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
}
 8000b20:	0018      	movs	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b004      	add	sp, #16
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200008a8 	.word	0x200008a8
 8000b2c:	20000f30 	.word	0x20000f30

08000b30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b08d      	sub	sp, #52	; 0x34
 8000b40:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b42:	240c      	movs	r4, #12
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	0018      	movs	r0, r3
 8000b48:	2324      	movs	r3, #36	; 0x24
 8000b4a:	001a      	movs	r2, r3
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	f003 fbda 	bl	8004306 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	0018      	movs	r0, r3
 8000b56:	2308      	movs	r3, #8
 8000b58:	001a      	movs	r2, r3
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f003 fbd3 	bl	8004306 <memset>

  htim2.Instance = TIM2;
 8000b60:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <MX_TIM2_Init+0xc0>)
 8000b62:	2280      	movs	r2, #128	; 0x80
 8000b64:	05d2      	lsls	r2, r2, #23
 8000b66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b68:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <MX_TIM2_Init+0xc0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000b6e:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <MX_TIM2_Init+0xc0>)
 8000b70:	2260      	movs	r2, #96	; 0x60
 8000b72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64;
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <MX_TIM2_Init+0xc0>)
 8000b76:	2240      	movs	r2, #64	; 0x40
 8000b78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7a:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <MX_TIM2_Init+0xc0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b80:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_TIM2_Init+0xc0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b86:	0021      	movs	r1, r4
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2200      	movs	r2, #0
 8000b92:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2201      	movs	r2, #1
 8000b98:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2201      	movs	r2, #1
 8000bb0:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000bbe:	187a      	adds	r2, r7, r1
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_TIM2_Init+0xc0>)
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f002 fc93 	bl	80034f0 <HAL_TIM_Encoder_Init>
 8000bca:	1e03      	subs	r3, r0, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000bce:	f7ff fe19 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bde:	1d3a      	adds	r2, r7, #4
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_TIM2_Init+0xc0>)
 8000be2:	0011      	movs	r1, r2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f003 f82d 	bl	8003c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000bee:	f7ff fe09 	bl	8000804 <Error_Handler>
  }

}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b00d      	add	sp, #52	; 0x34
 8000bf8:	bd90      	pop	{r4, r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	20000e64 	.word	0x20000e64

08000c00 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b08d      	sub	sp, #52	; 0x34
 8000c04:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c06:	240c      	movs	r4, #12
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	2324      	movs	r3, #36	; 0x24
 8000c0e:	001a      	movs	r2, r3
 8000c10:	2100      	movs	r1, #0
 8000c12:	f003 fb78 	bl	8004306 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	0018      	movs	r0, r3
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f003 fb71 	bl	8004306 <memset>

  htim3.Instance = TIM3;
 8000c24:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <MX_TIM3_Init+0xc0>)
 8000c26:	4a27      	ldr	r2, [pc, #156]	; (8000cc4 <MX_TIM3_Init+0xc4>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c2a:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <MX_TIM3_Init+0xc0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000c30:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <MX_TIM3_Init+0xc0>)
 8000c32:	2260      	movs	r2, #96	; 0x60
 8000c34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64;
 8000c36:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <MX_TIM3_Init+0xc0>)
 8000c38:	2240      	movs	r2, #64	; 0x40
 8000c3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000c3c:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <MX_TIM3_Init+0xc0>)
 8000c3e:	2280      	movs	r2, #128	; 0x80
 8000c40:	0092      	lsls	r2, r2, #2
 8000c42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <MX_TIM3_Init+0xc0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c4a:	0021      	movs	r1, r4
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 4;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2204      	movs	r2, #4
 8000c68:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2201      	movs	r2, #1
 8000c74:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2200      	movs	r2, #0
 8000c7a:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 4;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2204      	movs	r2, #4
 8000c80:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c82:	187a      	adds	r2, r7, r1
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_TIM3_Init+0xc0>)
 8000c86:	0011      	movs	r1, r2
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f002 fc31 	bl	80034f0 <HAL_TIM_Encoder_Init>
 8000c8e:	1e03      	subs	r3, r0, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000c92:	f7ff fdb7 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ca2:	1d3a      	adds	r2, r7, #4
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_TIM3_Init+0xc0>)
 8000ca6:	0011      	movs	r1, r2
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f002 ffcb 	bl	8003c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000cae:	1e03      	subs	r3, r0, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8000cb2:	f7ff fda7 	bl	8000804 <Error_Handler>
  }

}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b00d      	add	sp, #52	; 0x34
 8000cbc:	bd90      	pop	{r4, r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	20000de4 	.word	0x20000de4
 8000cc4:	40000400 	.word	0x40000400

08000cc8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cce:	003b      	movs	r3, r7
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	f003 fb15 	bl	8004306 <memset>

  htim6.Instance = TIM6;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_TIM6_Init+0x6c>)
 8000cde:	4a16      	ldr	r2, [pc, #88]	; (8000d38 <MX_TIM6_Init+0x70>)
 8000ce0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 255;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_TIM6_Init+0x6c>)
 8000ce4:	22ff      	movs	r2, #255	; 0xff
 8000ce6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_TIM6_Init+0x6c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 440;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_TIM6_Init+0x6c>)
 8000cf0:	22dc      	movs	r2, #220	; 0xdc
 8000cf2:	0052      	lsls	r2, r2, #1
 8000cf4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_TIM6_Init+0x6c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <MX_TIM6_Init+0x6c>)
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f002 fb86 	bl	8003410 <HAL_TIM_Base_Init>
 8000d04:	1e03      	subs	r3, r0, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8000d08:	f7ff fd7c 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d0c:	003b      	movs	r3, r7
 8000d0e:	2220      	movs	r2, #32
 8000d10:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d12:	003b      	movs	r3, r7
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d18:	003a      	movs	r2, r7
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_TIM6_Init+0x6c>)
 8000d1c:	0011      	movs	r1, r2
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f002 ff90 	bl	8003c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000d24:	1e03      	subs	r3, r0, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8000d28:	f7ff fd6c 	bl	8000804 <Error_Handler>
  }

}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000e24 	.word	0x20000e24
 8000d38:	40001000 	.word	0x40001000

08000d3c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d42:	003b      	movs	r3, r7
 8000d44:	0018      	movs	r0, r3
 8000d46:	2308      	movs	r3, #8
 8000d48:	001a      	movs	r2, r3
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	f003 fadb 	bl	8004306 <memset>

  htim7.Instance = TIM7;
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_TIM7_Init+0x6c>)
 8000d52:	4a16      	ldr	r2, [pc, #88]	; (8000dac <MX_TIM7_Init+0x70>)
 8000d54:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 255;
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_TIM7_Init+0x6c>)
 8000d58:	22ff      	movs	r2, #255	; 0xff
 8000d5a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <MX_TIM7_Init+0x6c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 440;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_TIM7_Init+0x6c>)
 8000d64:	22dc      	movs	r2, #220	; 0xdc
 8000d66:	0052      	lsls	r2, r2, #1
 8000d68:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_TIM7_Init+0x6c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <MX_TIM7_Init+0x6c>)
 8000d72:	0018      	movs	r0, r3
 8000d74:	f002 fb4c 	bl	8003410 <HAL_TIM_Base_Init>
 8000d78:	1e03      	subs	r3, r0, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM7_Init+0x44>
  {
    Error_Handler();
 8000d7c:	f7ff fd42 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d80:	003b      	movs	r3, r7
 8000d82:	2220      	movs	r2, #32
 8000d84:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d86:	003b      	movs	r3, r7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d8c:	003a      	movs	r2, r7
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_TIM7_Init+0x6c>)
 8000d90:	0011      	movs	r1, r2
 8000d92:	0018      	movs	r0, r3
 8000d94:	f002 ff56 	bl	8003c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000d98:	1e03      	subs	r3, r0, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM7_Init+0x64>
  {
    Error_Handler();
 8000d9c:	f7ff fd32 	bl	8000804 <Error_Handler>
  }

}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b002      	add	sp, #8
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000ee4 	.word	0x20000ee4
 8000dac:	40001400 	.word	0x40001400

08000db0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_TIM14_Init+0x40>)
 8000db6:	4a0f      	ldr	r2, [pc, #60]	; (8000df4 <MX_TIM14_Init+0x44>)
 8000db8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8;
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <MX_TIM14_Init+0x40>)
 8000dbc:	2208      	movs	r2, #8
 8000dbe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <MX_TIM14_Init+0x40>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <MX_TIM14_Init+0x40>)
 8000dc8:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <MX_TIM14_Init+0x48>)
 8000dca:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <MX_TIM14_Init+0x40>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <MX_TIM14_Init+0x40>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <MX_TIM14_Init+0x40>)
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f002 fb18 	bl	8003410 <HAL_TIM_Base_Init>
 8000de0:	1e03      	subs	r3, r0, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000de4:	f7ff fd0e 	bl	8000804 <Error_Handler>
  }

}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	20000ea4 	.word	0x20000ea4
 8000df4:	40002000 	.word	0x40002000
 8000df8:	0000ffff 	.word	0x0000ffff

08000dfc <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e02:	2308      	movs	r3, #8
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	0018      	movs	r0, r3
 8000e08:	2310      	movs	r3, #16
 8000e0a:	001a      	movs	r2, r3
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	f003 fa7a 	bl	8004306 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e12:	003b      	movs	r3, r7
 8000e14:	0018      	movs	r0, r3
 8000e16:	2308      	movs	r3, #8
 8000e18:	001a      	movs	r2, r3
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	f003 fa73 	bl	8004306 <memset>

  htim15.Instance = TIM15;
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <MX_TIM15_Init+0xa4>)
 8000e22:	4a20      	ldr	r2, [pc, #128]	; (8000ea4 <MX_TIM15_Init+0xa8>)
 8000e24:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 65535;
 8000e26:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <MX_TIM15_Init+0xa4>)
 8000e28:	4a1f      	ldr	r2, [pc, #124]	; (8000ea8 <MX_TIM15_Init+0xac>)
 8000e2a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <MX_TIM15_Init+0xa4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <MX_TIM15_Init+0xa4>)
 8000e34:	4a1c      	ldr	r2, [pc, #112]	; (8000ea8 <MX_TIM15_Init+0xac>)
 8000e36:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <MX_TIM15_Init+0xa4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_TIM15_Init+0xa4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <MX_TIM15_Init+0xa4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MX_TIM15_Init+0xa4>)
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f002 fadf 	bl	8003410 <HAL_TIM_Base_Init>
 8000e52:	1e03      	subs	r3, r0, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 8000e56:	f7ff fcd5 	bl	8000804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5a:	2108      	movs	r1, #8
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	0152      	lsls	r2, r2, #5
 8000e62:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000e64:	187a      	adds	r2, r7, r1
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_TIM15_Init+0xa4>)
 8000e68:	0011      	movs	r1, r2
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f002 fcea 	bl	8003844 <HAL_TIM_ConfigClockSource>
 8000e70:	1e03      	subs	r3, r0, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000e74:	f7ff fcc6 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e78:	003b      	movs	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7e:	003b      	movs	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e84:	003a      	movs	r2, r7
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_TIM15_Init+0xa4>)
 8000e88:	0011      	movs	r1, r2
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f002 feda 	bl	8003c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	1e03      	subs	r3, r0, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8000e94:	f7ff fcb6 	bl	8000804 <Error_Handler>
  }

}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b006      	add	sp, #24
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000da4 	.word	0x20000da4
 8000ea4:	40014000 	.word	0x40014000
 8000ea8:	0000ffff 	.word	0x0000ffff

08000eac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	; 0x30
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	231c      	movs	r3, #28
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	0018      	movs	r0, r3
 8000eba:	2314      	movs	r3, #20
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	f003 fa21 	bl	8004306 <memset>
  if(tim_encoderHandle->Instance==TIM2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	05db      	lsls	r3, r3, #23
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d131      	bne.n	8000f34 <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ed0:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000ed2:	69da      	ldr	r2, [r3, #28]
 8000ed4:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	61da      	str	r2, [r3, #28]
 8000edc:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
 8000ee6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000eea:	695a      	ldr	r2, [r3, #20]
 8000eec:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000eee:	2180      	movs	r1, #128	; 0x80
 8000ef0:	0289      	lsls	r1, r1, #10
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	615a      	str	r2, [r3, #20]
 8000ef6:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000ef8:	695a      	ldr	r2, [r3, #20]
 8000efa:	2380      	movs	r3, #128	; 0x80
 8000efc:	029b      	lsls	r3, r3, #10
 8000efe:	4013      	ands	r3, r2
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f04:	211c      	movs	r1, #28
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2202      	movs	r2, #2
 8000f10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2202      	movs	r2, #2
 8000f22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	187a      	adds	r2, r7, r1
 8000f26:	2390      	movs	r3, #144	; 0x90
 8000f28:	05db      	lsls	r3, r3, #23
 8000f2a:	0011      	movs	r1, r2
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f000 fd83 	bl	8001a38 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f32:	e035      	b.n	8000fa0 <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM3)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a1c      	ldr	r2, [pc, #112]	; (8000fac <HAL_TIM_Encoder_MspInit+0x100>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d130      	bne.n	8000fa0 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000f40:	69da      	ldr	r2, [r3, #28]
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000f44:	2102      	movs	r1, #2
 8000f46:	430a      	orrs	r2, r1
 8000f48:	61da      	str	r2, [r3, #28]
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	2202      	movs	r2, #2
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000f58:	695a      	ldr	r2, [r3, #20]
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	0289      	lsls	r1, r1, #10
 8000f60:	430a      	orrs	r2, r1
 8000f62:	615a      	str	r2, [r3, #20]
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	029b      	lsls	r3, r3, #10
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f72:	211c      	movs	r1, #28
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	22c0      	movs	r2, #192	; 0xc0
 8000f78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2201      	movs	r2, #1
 8000f90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	187a      	adds	r2, r7, r1
 8000f94:	2390      	movs	r3, #144	; 0x90
 8000f96:	05db      	lsls	r3, r3, #23
 8000f98:	0011      	movs	r1, r2
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f000 fd4c 	bl	8001a38 <HAL_GPIO_Init>
}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b00c      	add	sp, #48	; 0x30
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40000400 	.word	0x40000400

08000fb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a2a      	ldr	r2, [pc, #168]	; (8001068 <HAL_TIM_Base_MspInit+0xb8>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d10c      	bne.n	8000fdc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8000fc4:	69da      	ldr	r2, [r3, #28]
 8000fc6:	4b29      	ldr	r3, [pc, #164]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8000fc8:	2110      	movs	r1, #16
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	61da      	str	r2, [r3, #28]
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	2210      	movs	r2, #16
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000fda:	e040      	b.n	800105e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM7)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a23      	ldr	r2, [pc, #140]	; (8001070 <HAL_TIM_Base_MspInit+0xc0>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d10c      	bne.n	8001000 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8000fe8:	69da      	ldr	r2, [r3, #28]
 8000fea:	4b20      	ldr	r3, [pc, #128]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8000fec:	2120      	movs	r1, #32
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	61da      	str	r2, [r3, #28]
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
}
 8000ffe:	e02e      	b.n	800105e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM14)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <HAL_TIM_Base_MspInit+0xc4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d116      	bne.n	8001038 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 800100c:	69da      	ldr	r2, [r3, #28]
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	0049      	lsls	r1, r1, #1
 8001014:	430a      	orrs	r2, r1
 8001016:	61da      	str	r2, [r3, #28]
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 800101a:	69da      	ldr	r2, [r3, #28]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2101      	movs	r1, #1
 800102a:	2013      	movs	r0, #19
 800102c:	f000 f982 	bl	8001334 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001030:	2013      	movs	r0, #19
 8001032:	f000 f994 	bl	800135e <HAL_NVIC_EnableIRQ>
}
 8001036:	e012      	b.n	800105e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM15)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <HAL_TIM_Base_MspInit+0xc8>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d10d      	bne.n	800105e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8001044:	699a      	ldr	r2, [r3, #24]
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	0249      	lsls	r1, r1, #9
 800104c:	430a      	orrs	r2, r1
 800104e:	619a      	str	r2, [r3, #24]
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_TIM_Base_MspInit+0xbc>)
 8001052:	699a      	ldr	r2, [r3, #24]
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	025b      	lsls	r3, r3, #9
 8001058:	4013      	ands	r3, r2
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b006      	add	sp, #24
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	40001000 	.word	0x40001000
 800106c:	40021000 	.word	0x40021000
 8001070:	40001400 	.word	0x40001400
 8001074:	40002000 	.word	0x40002000
 8001078:	40014000 	.word	0x40014000

0800107c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800107e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001082:	490e      	ldr	r1, [pc, #56]	; (80010bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <LoopForever+0xe>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001098:	4c0b      	ldr	r4, [pc, #44]	; (80010c8 <LoopForever+0x16>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010a6:	f7ff fd43 	bl	8000b30 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80010aa:	f003 f8f5 	bl	8004298 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ae:	f7ff fae1 	bl	8000674 <main>

080010b2 <LoopForever>:

LoopForever:
    b LoopForever
 80010b2:	e7fe      	b.n	80010b2 <LoopForever>
  ldr   r0, =_estack
 80010b4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000884 	.word	0x20000884
  ldr r2, =_sidata
 80010c0:	08006c58 	.word	0x08006c58
  ldr r2, =_sbss
 80010c4:	20000884 	.word	0x20000884
  ldr r4, =_ebss
 80010c8:	20000f2c 	.word	0x20000f2c

080010cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_COMP_IRQHandler>
	...

080010d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <HAL_Init+0x24>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_Init+0x24>)
 80010da:	2110      	movs	r1, #16
 80010dc:	430a      	orrs	r2, r1
 80010de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010e0:	2000      	movs	r0, #0
 80010e2:	f000 f809 	bl	80010f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e6:	f7ff fb93 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	40022000 	.word	0x40022000

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_InitTick+0x5c>)
 8001102:	681c      	ldr	r4, [r3, #0]
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_InitTick+0x60>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	0019      	movs	r1, r3
 800110a:	23fa      	movs	r3, #250	; 0xfa
 800110c:	0098      	lsls	r0, r3, #2
 800110e:	f7fe fffb 	bl	8000108 <__udivsi3>
 8001112:	0003      	movs	r3, r0
 8001114:	0019      	movs	r1, r3
 8001116:	0020      	movs	r0, r4
 8001118:	f7fe fff6 	bl	8000108 <__udivsi3>
 800111c:	0003      	movs	r3, r0
 800111e:	0018      	movs	r0, r3
 8001120:	f000 f92d 	bl	800137e <HAL_SYSTICK_Config>
 8001124:	1e03      	subs	r3, r0, #0
 8001126:	d001      	beq.n	800112c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e00f      	b.n	800114c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b03      	cmp	r3, #3
 8001130:	d80b      	bhi.n	800114a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	2301      	movs	r3, #1
 8001136:	425b      	negs	r3, r3
 8001138:	2200      	movs	r2, #0
 800113a:	0018      	movs	r0, r3
 800113c:	f000 f8fa 	bl	8001334 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_InitTick+0x64>)
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b003      	add	sp, #12
 8001152:	bd90      	pop	{r4, r7, pc}
 8001154:	20000804 	.word	0x20000804
 8001158:	2000080c 	.word	0x2000080c
 800115c:	20000808 	.word	0x20000808

08001160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_IncTick+0x1c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	001a      	movs	r2, r3
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_IncTick+0x20>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	18d2      	adds	r2, r2, r3
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_IncTick+0x20>)
 8001172:	601a      	str	r2, [r3, #0]
}
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	2000080c 	.word	0x2000080c
 8001180:	20000f24 	.word	0x20000f24

08001184 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b02      	ldr	r3, [pc, #8]	; (8001194 <HAL_GetTick+0x10>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	20000f24 	.word	0x20000f24

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff fff0 	bl	8001184 <HAL_GetTick>
 80011a4:	0003      	movs	r3, r0
 80011a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3301      	adds	r3, #1
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_Delay+0x40>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	001a      	movs	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	189b      	adds	r3, r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	f7ff ffe0 	bl	8001184 <HAL_GetTick>
 80011c4:	0002      	movs	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b004      	add	sp, #16
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	2000080c 	.word	0x2000080c

080011dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	0002      	movs	r2, r0
 80011e4:	1dfb      	adds	r3, r7, #7
 80011e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b7f      	cmp	r3, #127	; 0x7f
 80011ee:	d809      	bhi.n	8001204 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f0:	1dfb      	adds	r3, r7, #7
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	001a      	movs	r2, r3
 80011f6:	231f      	movs	r3, #31
 80011f8:	401a      	ands	r2, r3
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <__NVIC_EnableIRQ+0x30>)
 80011fc:	2101      	movs	r1, #1
 80011fe:	4091      	lsls	r1, r2
 8001200:	000a      	movs	r2, r1
 8001202:	601a      	str	r2, [r3, #0]
  }
}
 8001204:	46c0      	nop			; (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	b002      	add	sp, #8
 800120a:	bd80      	pop	{r7, pc}
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	0002      	movs	r2, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	1dfb      	adds	r3, r7, #7
 800121c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b7f      	cmp	r3, #127	; 0x7f
 8001224:	d828      	bhi.n	8001278 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001226:	4a2f      	ldr	r2, [pc, #188]	; (80012e4 <__NVIC_SetPriority+0xd4>)
 8001228:	1dfb      	adds	r3, r7, #7
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b25b      	sxtb	r3, r3
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	33c0      	adds	r3, #192	; 0xc0
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	589b      	ldr	r3, [r3, r2]
 8001236:	1dfa      	adds	r2, r7, #7
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	0011      	movs	r1, r2
 800123c:	2203      	movs	r2, #3
 800123e:	400a      	ands	r2, r1
 8001240:	00d2      	lsls	r2, r2, #3
 8001242:	21ff      	movs	r1, #255	; 0xff
 8001244:	4091      	lsls	r1, r2
 8001246:	000a      	movs	r2, r1
 8001248:	43d2      	mvns	r2, r2
 800124a:	401a      	ands	r2, r3
 800124c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	019b      	lsls	r3, r3, #6
 8001252:	22ff      	movs	r2, #255	; 0xff
 8001254:	401a      	ands	r2, r3
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	0018      	movs	r0, r3
 800125c:	2303      	movs	r3, #3
 800125e:	4003      	ands	r3, r0
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001264:	481f      	ldr	r0, [pc, #124]	; (80012e4 <__NVIC_SetPriority+0xd4>)
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b25b      	sxtb	r3, r3
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	430a      	orrs	r2, r1
 8001270:	33c0      	adds	r3, #192	; 0xc0
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001276:	e031      	b.n	80012dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <__NVIC_SetPriority+0xd8>)
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	0019      	movs	r1, r3
 8001280:	230f      	movs	r3, #15
 8001282:	400b      	ands	r3, r1
 8001284:	3b08      	subs	r3, #8
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3306      	adds	r3, #6
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	18d3      	adds	r3, r2, r3
 800128e:	3304      	adds	r3, #4
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1dfa      	adds	r2, r7, #7
 8001294:	7812      	ldrb	r2, [r2, #0]
 8001296:	0011      	movs	r1, r2
 8001298:	2203      	movs	r2, #3
 800129a:	400a      	ands	r2, r1
 800129c:	00d2      	lsls	r2, r2, #3
 800129e:	21ff      	movs	r1, #255	; 0xff
 80012a0:	4091      	lsls	r1, r2
 80012a2:	000a      	movs	r2, r1
 80012a4:	43d2      	mvns	r2, r2
 80012a6:	401a      	ands	r2, r3
 80012a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	019b      	lsls	r3, r3, #6
 80012ae:	22ff      	movs	r2, #255	; 0xff
 80012b0:	401a      	ands	r2, r3
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	0018      	movs	r0, r3
 80012b8:	2303      	movs	r3, #3
 80012ba:	4003      	ands	r3, r0
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c0:	4809      	ldr	r0, [pc, #36]	; (80012e8 <__NVIC_SetPriority+0xd8>)
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	001c      	movs	r4, r3
 80012c8:	230f      	movs	r3, #15
 80012ca:	4023      	ands	r3, r4
 80012cc:	3b08      	subs	r3, #8
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	430a      	orrs	r2, r1
 80012d2:	3306      	adds	r3, #6
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	18c3      	adds	r3, r0, r3
 80012d8:	3304      	adds	r3, #4
 80012da:	601a      	str	r2, [r3, #0]
}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b003      	add	sp, #12
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	4a0c      	ldr	r2, [pc, #48]	; (800132c <SysTick_Config+0x40>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d901      	bls.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e010      	b.n	8001324 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <SysTick_Config+0x44>)
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	3a01      	subs	r2, #1
 8001308:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	2301      	movs	r3, #1
 800130c:	425b      	negs	r3, r3
 800130e:	2103      	movs	r1, #3
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff ff7d 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <SysTick_Config+0x44>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x44>)
 800131e:	2207      	movs	r2, #7
 8001320:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001322:	2300      	movs	r3, #0
}
 8001324:	0018      	movs	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	b002      	add	sp, #8
 800132a:	bd80      	pop	{r7, pc}
 800132c:	00ffffff 	.word	0x00ffffff
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	210f      	movs	r1, #15
 8001340:	187b      	adds	r3, r7, r1
 8001342:	1c02      	adds	r2, r0, #0
 8001344:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	187b      	adds	r3, r7, r1
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b25b      	sxtb	r3, r3
 800134e:	0011      	movs	r1, r2
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff ff5d 	bl	8001210 <__NVIC_SetPriority>
}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b004      	add	sp, #16
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	0002      	movs	r2, r0
 8001366:	1dfb      	adds	r3, r7, #7
 8001368:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b25b      	sxtb	r3, r3
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff ff33 	bl	80011dc <__NVIC_EnableIRQ>
}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	46bd      	mov	sp, r7
 800137a:	b002      	add	sp, #8
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	0018      	movs	r0, r3
 800138a:	f7ff ffaf 	bl	80012ec <SysTick_Config>
 800138e:	0003      	movs	r3, r0
}
 8001390:	0018      	movs	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	b002      	add	sp, #8
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e015      	b.n	80013d6 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	791b      	ldrb	r3, [r3, #4]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d106      	bne.n	80013c2 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	0018      	movs	r0, r3
 80013be:	f7fe ff69 	bl	8000294 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2202      	movs	r2, #2
 80013c6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	0018      	movs	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	b002      	add	sp, #8
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b002      	add	sp, #8
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b002      	add	sp, #8
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	b002      	add	sp, #8
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	795b      	ldrb	r3, [r3, #5]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_DAC_ConfigChannel+0x20>
 800142c:	2302      	movs	r3, #2
 800142e:	e029      	b.n	8001484 <HAL_DAC_ConfigChannel+0x74>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2201      	movs	r2, #1
 8001434:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2202      	movs	r2, #2
 800143a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8001444:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_DAC_ConfigChannel+0x7c>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	409a      	lsls	r2, r3
 800144a:	0013      	movs	r3, r2
 800144c:	43da      	mvns	r2, r3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	4013      	ands	r3, r2
 8001452:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	409a      	lsls	r2, r3
 8001466:	0013      	movs	r3, r2
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	4313      	orrs	r3, r2
 800146c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2201      	movs	r2, #1
 800147a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	0018      	movs	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	b006      	add	sp, #24
 800148a:	bd80      	pop	{r7, pc}
 800148c:	00000ffe 	.word	0x00000ffe

08001490 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	795b      	ldrb	r3, [r3, #5]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HAL_DAC_Start_DMA+0x1e>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e092      	b.n	80015d4 <HAL_DAC_Start_DMA+0x144>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2201      	movs	r2, #1
 80014b2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2202      	movs	r2, #2
 80014b8:	711a      	strb	r2, [r3, #4]
  
  if(Channel == DAC_CHANNEL_1)
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d12b      	bne.n	8001518 <HAL_DAC_Start_DMA+0x88>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	4a45      	ldr	r2, [pc, #276]	; (80015dc <HAL_DAC_Start_DMA+0x14c>)
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4a44      	ldr	r2, [pc, #272]	; (80015e0 <HAL_DAC_Start_DMA+0x150>)
 80014ce:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	4a43      	ldr	r2, [pc, #268]	; (80015e4 <HAL_DAC_Start_DMA+0x154>)
 80014d6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2180      	movs	r1, #128	; 0x80
 80014e4:	0149      	lsls	r1, r1, #5
 80014e6:	430a      	orrs	r2, r1
 80014e8:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d009      	beq.n	8001504 <HAL_DAC_Start_DMA+0x74>
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d00c      	beq.n	800150e <HAL_DAC_Start_DMA+0x7e>
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d000      	beq.n	80014fa <HAL_DAC_Start_DMA+0x6a>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80014f8:	e03a      	b.n	8001570 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3308      	adds	r3, #8
 8001500:	617b      	str	r3, [r7, #20]
        break;
 8001502:	e035      	b.n	8001570 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	330c      	adds	r3, #12
 800150a:	617b      	str	r3, [r7, #20]
        break;
 800150c:	e030      	b.n	8001570 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3310      	adds	r3, #16
 8001514:	617b      	str	r3, [r7, #20]
        break;
 8001516:	e02b      	b.n	8001570 <HAL_DAC_Start_DMA+0xe0>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	4a32      	ldr	r2, [pc, #200]	; (80015e8 <HAL_DAC_Start_DMA+0x158>)
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	4a31      	ldr	r2, [pc, #196]	; (80015ec <HAL_DAC_Start_DMA+0x15c>)
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4a30      	ldr	r2, [pc, #192]	; (80015f0 <HAL_DAC_Start_DMA+0x160>)
 800152e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2180      	movs	r1, #128	; 0x80
 800153c:	0549      	lsls	r1, r1, #21
 800153e:	430a      	orrs	r2, r1
 8001540:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 2 */
    switch(Alignment)
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	2b04      	cmp	r3, #4
 8001546:	d009      	beq.n	800155c <HAL_DAC_Start_DMA+0xcc>
 8001548:	2b08      	cmp	r3, #8
 800154a:	d00c      	beq.n	8001566 <HAL_DAC_Start_DMA+0xd6>
 800154c:	2b00      	cmp	r3, #0
 800154e:	d000      	beq.n	8001552 <HAL_DAC_Start_DMA+0xc2>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001550:	e00e      	b.n	8001570 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3314      	adds	r3, #20
 8001558:	617b      	str	r3, [r7, #20]
        break;
 800155a:	e009      	b.n	8001570 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3318      	adds	r3, #24
 8001562:	617b      	str	r3, [r7, #20]
        break;
 8001564:	e004      	b.n	8001570 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	331c      	adds	r3, #28
 800156c:	617b      	str	r3, [r7, #20]
        break;
 800156e:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  /* Enable the DMA channel */
  if(Channel == DAC_CHANNEL_1)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d110      	bne.n	8001598 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	0189      	lsls	r1, r1, #6
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6898      	ldr	r0, [r3, #8]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	f000 f901 	bl	8001798 <HAL_DMA_Start_IT>
 8001596:	e00f      	b.n	80015b8 <HAL_DAC_Start_DMA+0x128>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2180      	movs	r1, #128	; 0x80
 80015a4:	0589      	lsls	r1, r1, #22
 80015a6:	430a      	orrs	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	68d8      	ldr	r0, [r3, #12]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	f000 f8f0 	bl	8001798 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6819      	ldr	r1, [r3, #0]
 80015be:	2201      	movs	r2, #1
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	409a      	lsls	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	0018      	movs	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b006      	add	sp, #24
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	080015f5 	.word	0x080015f5
 80015e0:	08001619 	.word	0x08001619
 80015e4:	08001637 	.word	0x08001637
 80015e8:	08001667 	.word	0x08001667
 80015ec:	0800168b 	.word	0x0800168b
 80015f0:	080016a9 	.word	0x080016a9

080015f4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	60fb      	str	r3, [r7, #12]
  
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff feea 	bl	80013de <HAL_DAC_ConvCpltCallbackCh1>
  
  hdac->State= HAL_DAC_STATE_READY;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2201      	movs	r2, #1
 800160e:	711a      	strb	r2, [r3, #4]
}
 8001610:	46c0      	nop			; (mov r8, r8)
 8001612:	46bd      	mov	sp, r7
 8001614:	b004      	add	sp, #16
 8001616:	bd80      	pop	{r7, pc}

08001618 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	0018      	movs	r0, r3
 800162a:	f7ff fee0 	bl	80013ee <HAL_DAC_ConvHalfCpltCallbackCh1>
}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	b004      	add	sp, #16
 8001634:	bd80      	pop	{r7, pc}

08001636 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	2204      	movs	r2, #4
 800164a:	431a      	orrs	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	611a      	str	r2, [r3, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	0018      	movs	r0, r3
 8001654:	f7ff fed3 	bl	80013fe <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State= HAL_DAC_STATE_READY;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2201      	movs	r2, #1
 800165c:	711a      	strb	r2, [r3, #4]
}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	46bd      	mov	sp, r7
 8001662:	b004      	add	sp, #16
 8001664:	bd80      	pop	{r7, pc}

08001666 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	0018      	movs	r0, r3
 8001678:	f000 f82e 	bl	80016d8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2201      	movs	r2, #1
 8001680:	711a      	strb	r2, [r3, #4]
}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	46bd      	mov	sp, r7
 8001686:	b004      	add	sp, #16
 8001688:	bd80      	pop	{r7, pc}

0800168a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b084      	sub	sp, #16
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	0018      	movs	r0, r3
 800169c:	f000 f824 	bl	80016e8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 80016a0:	46c0      	nop			; (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b004      	add	sp, #16
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	2204      	movs	r2, #4
 80016bc:	431a      	orrs	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	0018      	movs	r0, r3
 80016c6:	f000 f817 	bl	80016f8 <HAL_DACEx_ErrorCallbackCh2>
#endif 
  hdac->State= HAL_DAC_STATE_READY;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2201      	movs	r2, #1
 80016ce:	711a      	strb	r2, [r3, #4]
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b004      	add	sp, #16
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80016e0:	46c0      	nop			; (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b002      	add	sp, #8
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80016f0:	46c0      	nop			; (mov r8, r8)
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b002      	add	sp, #8
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8001700:	46c0      	nop			; (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b002      	add	sp, #8
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e036      	b.n	800178c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2221      	movs	r2, #33	; 0x21
 8001722:	2102      	movs	r1, #2
 8001724:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4a18      	ldr	r2, [pc, #96]	; (8001794 <HAL_DMA_Init+0x8c>)
 8001732:	4013      	ands	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800173e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800174a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001756:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4313      	orrs	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	0018      	movs	r0, r3
 8001770:	f000 f946 	bl	8001a00 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2221      	movs	r2, #33	; 0x21
 800177e:	2101      	movs	r1, #1
 8001780:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2220      	movs	r2, #32
 8001786:	2100      	movs	r1, #0
 8001788:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}  
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b004      	add	sp, #16
 8001792:	bd80      	pop	{r7, pc}
 8001794:	ffffc00f 	.word	0xffffc00f

08001798 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80017a6:	2317      	movs	r3, #23
 80017a8:	18fb      	adds	r3, r7, r3
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2220      	movs	r2, #32
 80017b2:	5c9b      	ldrb	r3, [r3, r2]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d101      	bne.n	80017bc <HAL_DMA_Start_IT+0x24>
 80017b8:	2302      	movs	r3, #2
 80017ba:	e04f      	b.n	800185c <HAL_DMA_Start_IT+0xc4>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2220      	movs	r2, #32
 80017c0:	2101      	movs	r1, #1
 80017c2:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2221      	movs	r2, #33	; 0x21
 80017c8:	5c9b      	ldrb	r3, [r3, r2]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d13a      	bne.n	8001846 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2221      	movs	r2, #33	; 0x21
 80017d4:	2102      	movs	r1, #2
 80017d6:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	438a      	bics	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	68b9      	ldr	r1, [r7, #8]
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f000 f8d7 	bl	80019a8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d008      	beq.n	8001814 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	210e      	movs	r1, #14
 800180e:	430a      	orrs	r2, r1
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	e00f      	b.n	8001834 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	210a      	movs	r1, #10
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2104      	movs	r1, #4
 8001830:	438a      	bics	r2, r1
 8001832:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2101      	movs	r1, #1
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	e007      	b.n	8001856 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2220      	movs	r2, #32
 800184a:	2100      	movs	r1, #0
 800184c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800184e:	2317      	movs	r3, #23
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	2202      	movs	r2, #2
 8001854:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001856:	2317      	movs	r3, #23
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	781b      	ldrb	r3, [r3, #0]
} 
 800185c:	0018      	movs	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	b006      	add	sp, #24
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	2204      	movs	r2, #4
 8001882:	409a      	lsls	r2, r3
 8001884:	0013      	movs	r3, r2
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4013      	ands	r3, r2
 800188a:	d024      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x72>
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2204      	movs	r2, #4
 8001890:	4013      	ands	r3, r2
 8001892:	d020      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2220      	movs	r2, #32
 800189c:	4013      	ands	r3, r2
 800189e:	d107      	bne.n	80018b0 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2104      	movs	r1, #4
 80018ac:	438a      	bics	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b8:	2104      	movs	r1, #4
 80018ba:	4091      	lsls	r1, r2
 80018bc:	000a      	movs	r2, r1
 80018be:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d100      	bne.n	80018ca <HAL_DMA_IRQHandler+0x66>
 80018c8:	e06a      	b.n	80019a0 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	0010      	movs	r0, r2
 80018d2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80018d4:	e064      	b.n	80019a0 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	2202      	movs	r2, #2
 80018dc:	409a      	lsls	r2, r3
 80018de:	0013      	movs	r3, r2
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4013      	ands	r3, r2
 80018e4:	d02b      	beq.n	800193e <HAL_DMA_IRQHandler+0xda>
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2202      	movs	r2, #2
 80018ea:	4013      	ands	r3, r2
 80018ec:	d027      	beq.n	800193e <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2220      	movs	r2, #32
 80018f6:	4013      	ands	r3, r2
 80018f8:	d10b      	bne.n	8001912 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	210a      	movs	r1, #10
 8001906:	438a      	bics	r2, r1
 8001908:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2221      	movs	r2, #33	; 0x21
 800190e:	2101      	movs	r1, #1
 8001910:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800191a:	2102      	movs	r1, #2
 800191c:	4091      	lsls	r1, r2
 800191e:	000a      	movs	r2, r1
 8001920:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2220      	movs	r2, #32
 8001926:	2100      	movs	r1, #0
 8001928:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192e:	2b00      	cmp	r3, #0
 8001930:	d036      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	0010      	movs	r0, r2
 800193a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800193c:	e030      	b.n	80019a0 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	2208      	movs	r2, #8
 8001944:	409a      	lsls	r2, r3
 8001946:	0013      	movs	r3, r2
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4013      	ands	r3, r2
 800194c:	d028      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x13c>
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	2208      	movs	r2, #8
 8001952:	4013      	ands	r3, r2
 8001954:	d024      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	210e      	movs	r1, #14
 8001962:	438a      	bics	r2, r1
 8001964:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196e:	2101      	movs	r1, #1
 8001970:	4091      	lsls	r1, r2
 8001972:	000a      	movs	r2, r1
 8001974:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2221      	movs	r2, #33	; 0x21
 8001980:	2101      	movs	r1, #1
 8001982:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2220      	movs	r2, #32
 8001988:	2100      	movs	r1, #0
 800198a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	0010      	movs	r0, r2
 800199c:	4798      	blx	r3
    }
   }
}  
 800199e:	e7ff      	b.n	80019a0 <HAL_DMA_IRQHandler+0x13c>
 80019a0:	46c0      	nop			; (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b004      	add	sp, #16
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019be:	2101      	movs	r1, #1
 80019c0:	4091      	lsls	r1, r2
 80019c2:	000a      	movs	r2, r1
 80019c4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b10      	cmp	r3, #16
 80019d4:	d108      	bne.n	80019e8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019e6:	e007      	b.n	80019f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	60da      	str	r2, [r3, #12]
}
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b004      	add	sp, #16
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <DMA_CalcBaseAndBitshift+0x30>)
 8001a0e:	4694      	mov	ip, r2
 8001a10:	4463      	add	r3, ip
 8001a12:	2114      	movs	r1, #20
 8001a14:	0018      	movs	r0, r3
 8001a16:	f7fe fb77 	bl	8000108 <__udivsi3>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	009a      	lsls	r2, r3, #2
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a03      	ldr	r2, [pc, #12]	; (8001a34 <DMA_CalcBaseAndBitshift+0x34>)
 8001a26:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b002      	add	sp, #8
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	bffdfff8 	.word	0xbffdfff8
 8001a34:	40020000 	.word	0x40020000

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a46:	e155      	b.n	8001cf4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4091      	lsls	r1, r2
 8001a52:	000a      	movs	r2, r1
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d100      	bne.n	8001a60 <HAL_GPIO_Init+0x28>
 8001a5e:	e146      	b.n	8001cee <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x38>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b12      	cmp	r3, #18
 8001a6e:	d123      	bne.n	8001ab8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	08da      	lsrs	r2, r3, #3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3208      	adds	r2, #8
 8001a78:	0092      	lsls	r2, r2, #2
 8001a7a:	58d3      	ldr	r3, [r2, r3]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2207      	movs	r2, #7
 8001a82:	4013      	ands	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	220f      	movs	r2, #15
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	0013      	movs	r3, r2
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2107      	movs	r1, #7
 8001a9c:	400b      	ands	r3, r1
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	0013      	movs	r3, r2
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	08da      	lsrs	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3208      	adds	r2, #8
 8001ab2:	0092      	lsls	r2, r2, #2
 8001ab4:	6939      	ldr	r1, [r7, #16]
 8001ab6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	0013      	movs	r3, r2
 8001ac8:	43da      	mvns	r2, r3
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	409a      	lsls	r2, r3
 8001ade:	0013      	movs	r3, r2
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d00b      	beq.n	8001b0c <HAL_GPIO_Init+0xd4>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d007      	beq.n	8001b0c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b00:	2b11      	cmp	r3, #17
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b12      	cmp	r3, #18
 8001b0a:	d130      	bne.n	8001b6e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	0013      	movs	r3, r2
 8001b1c:	43da      	mvns	r2, r3
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	0013      	movs	r3, r2
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b42:	2201      	movs	r2, #1
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	409a      	lsls	r2, r3
 8001b48:	0013      	movs	r3, r2
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	091b      	lsrs	r3, r3, #4
 8001b58:	2201      	movs	r2, #1
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	0013      	movs	r3, r2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	2203      	movs	r2, #3
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	0013      	movs	r3, r2
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	0013      	movs	r3, r2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	055b      	lsls	r3, r3, #21
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d100      	bne.n	8001bac <HAL_GPIO_Init+0x174>
 8001baa:	e0a0      	b.n	8001cee <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bac:	4b57      	ldr	r3, [pc, #348]	; (8001d0c <HAL_GPIO_Init+0x2d4>)
 8001bae:	699a      	ldr	r2, [r3, #24]
 8001bb0:	4b56      	ldr	r3, [pc, #344]	; (8001d0c <HAL_GPIO_Init+0x2d4>)
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	619a      	str	r2, [r3, #24]
 8001bb8:	4b54      	ldr	r3, [pc, #336]	; (8001d0c <HAL_GPIO_Init+0x2d4>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bc4:	4a52      	ldr	r2, [pc, #328]	; (8001d10 <HAL_GPIO_Init+0x2d8>)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	589b      	ldr	r3, [r3, r2]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	220f      	movs	r2, #15
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	0013      	movs	r3, r2
 8001be0:	43da      	mvns	r2, r3
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	2390      	movs	r3, #144	; 0x90
 8001bec:	05db      	lsls	r3, r3, #23
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d019      	beq.n	8001c26 <HAL_GPIO_Init+0x1ee>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a47      	ldr	r2, [pc, #284]	; (8001d14 <HAL_GPIO_Init+0x2dc>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d013      	beq.n	8001c22 <HAL_GPIO_Init+0x1ea>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a46      	ldr	r2, [pc, #280]	; (8001d18 <HAL_GPIO_Init+0x2e0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00d      	beq.n	8001c1e <HAL_GPIO_Init+0x1e6>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a45      	ldr	r2, [pc, #276]	; (8001d1c <HAL_GPIO_Init+0x2e4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d007      	beq.n	8001c1a <HAL_GPIO_Init+0x1e2>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a44      	ldr	r2, [pc, #272]	; (8001d20 <HAL_GPIO_Init+0x2e8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d101      	bne.n	8001c16 <HAL_GPIO_Init+0x1de>
 8001c12:	2304      	movs	r3, #4
 8001c14:	e008      	b.n	8001c28 <HAL_GPIO_Init+0x1f0>
 8001c16:	2305      	movs	r3, #5
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x1f0>
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e004      	b.n	8001c28 <HAL_GPIO_Init+0x1f0>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e002      	b.n	8001c28 <HAL_GPIO_Init+0x1f0>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_GPIO_Init+0x1f0>
 8001c26:	2300      	movs	r3, #0
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	2103      	movs	r1, #3
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	0092      	lsls	r2, r2, #2
 8001c30:	4093      	lsls	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c38:	4935      	ldr	r1, [pc, #212]	; (8001d10 <HAL_GPIO_Init+0x2d8>)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c46:	4b37      	ldr	r3, [pc, #220]	; (8001d24 <HAL_GPIO_Init+0x2ec>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	025b      	lsls	r3, r3, #9
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c6a:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <HAL_GPIO_Init+0x2ec>)
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001c70:	4b2c      	ldr	r3, [pc, #176]	; (8001d24 <HAL_GPIO_Init+0x2ec>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	43da      	mvns	r2, r3
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	029b      	lsls	r3, r3, #10
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c94:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <HAL_GPIO_Init+0x2ec>)
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9a:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <HAL_GPIO_Init+0x2ec>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	035b      	lsls	r3, r3, #13
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_GPIO_Init+0x2ec>)
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_GPIO_Init+0x2ec>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	43da      	mvns	r2, r3
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	039b      	lsls	r3, r3, #14
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <HAL_GPIO_Init+0x2ec>)
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	40da      	lsrs	r2, r3
 8001cfc:	1e13      	subs	r3, r2, #0
 8001cfe:	d000      	beq.n	8001d02 <HAL_GPIO_Init+0x2ca>
 8001d00:	e6a2      	b.n	8001a48 <HAL_GPIO_Init+0x10>
  } 
}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b006      	add	sp, #24
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010000 	.word	0x40010000
 8001d14:	48000400 	.word	0x48000400
 8001d18:	48000800 	.word	0x48000800
 8001d1c:	48000c00 	.word	0x48000c00
 8001d20:	48001000 	.word	0x48001000
 8001d24:	40010400 	.word	0x40010400

08001d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	0008      	movs	r0, r1
 8001d32:	0011      	movs	r1, r2
 8001d34:	1cbb      	adds	r3, r7, #2
 8001d36:	1c02      	adds	r2, r0, #0
 8001d38:	801a      	strh	r2, [r3, #0]
 8001d3a:	1c7b      	adds	r3, r7, #1
 8001d3c:	1c0a      	adds	r2, r1, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d40:	1c7b      	adds	r3, r7, #1
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d48:	1cbb      	adds	r3, r7, #2
 8001d4a:	881a      	ldrh	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d50:	e003      	b.n	8001d5a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d52:	1cbb      	adds	r3, r7, #2
 8001d54:	881a      	ldrh	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b002      	add	sp, #8
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	1dbb      	adds	r3, r7, #6
 8001d6e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	1dba      	adds	r2, r7, #6
 8001d76:	8812      	ldrh	r2, [r2, #0]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d008      	beq.n	8001d8e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001d7e:	1dba      	adds	r2, r7, #6
 8001d80:	8812      	ldrh	r2, [r2, #0]
 8001d82:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d84:	1dbb      	adds	r3, r7, #6
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 f807 	bl	8001d9c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b002      	add	sp, #8
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	40010400 	.word	0x40010400

08001d9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	0002      	movs	r2, r0
 8001da4:	1dbb      	adds	r3, r7, #6
 8001da6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b002      	add	sp, #8
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e082      	b.n	8001ec8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2241      	movs	r2, #65	; 0x41
 8001dc6:	5c9b      	ldrb	r3, [r3, r2]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d107      	bne.n	8001dde <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2240      	movs	r2, #64	; 0x40
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f7fe fbc9 	bl	8000570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2241      	movs	r2, #65	; 0x41
 8001de2:	2124      	movs	r1, #36	; 0x24
 8001de4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2101      	movs	r1, #1
 8001df2:	438a      	bics	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4934      	ldr	r1, [pc, #208]	; (8001ed0 <HAL_I2C_Init+0x120>)
 8001e00:	400a      	ands	r2, r1
 8001e02:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4931      	ldr	r1, [pc, #196]	; (8001ed4 <HAL_I2C_Init+0x124>)
 8001e10:	400a      	ands	r2, r1
 8001e12:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d108      	bne.n	8001e2e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	0209      	lsls	r1, r1, #8
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	e007      	b.n	8001e3e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2184      	movs	r1, #132	; 0x84
 8001e38:	0209      	lsls	r1, r1, #8
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d104      	bne.n	8001e50 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2280      	movs	r2, #128	; 0x80
 8001e4c:	0112      	lsls	r2, r2, #4
 8001e4e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	491f      	ldr	r1, [pc, #124]	; (8001ed8 <HAL_I2C_Init+0x128>)
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	491a      	ldr	r1, [pc, #104]	; (8001ed4 <HAL_I2C_Init+0x124>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	0011      	movs	r1, r2
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	021a      	lsls	r2, r3, #8
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69d9      	ldr	r1, [r3, #28]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1a      	ldr	r2, [r3, #32]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2241      	movs	r2, #65	; 0x41
 8001eb4:	2120      	movs	r1, #32
 8001eb6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2242      	movs	r2, #66	; 0x42
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b002      	add	sp, #8
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	f0ffffff 	.word	0xf0ffffff
 8001ed4:	ffff7fff 	.word	0xffff7fff
 8001ed8:	02008000 	.word	0x02008000

08001edc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	000c      	movs	r4, r1
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	0019      	movs	r1, r3
 8001eea:	230a      	movs	r3, #10
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	1c22      	adds	r2, r4, #0
 8001ef0:	801a      	strh	r2, [r3, #0]
 8001ef2:	2308      	movs	r3, #8
 8001ef4:	18fb      	adds	r3, r7, r3
 8001ef6:	1c02      	adds	r2, r0, #0
 8001ef8:	801a      	strh	r2, [r3, #0]
 8001efa:	1dbb      	adds	r3, r7, #6
 8001efc:	1c0a      	adds	r2, r1, #0
 8001efe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2241      	movs	r2, #65	; 0x41
 8001f04:	5c9b      	ldrb	r3, [r3, r2]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d000      	beq.n	8001f0e <HAL_I2C_Mem_Write+0x32>
 8001f0c:	e10c      	b.n	8002128 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d004      	beq.n	8001f1e <HAL_I2C_Mem_Write+0x42>
 8001f14:	232c      	movs	r3, #44	; 0x2c
 8001f16:	18fb      	adds	r3, r7, r3
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d105      	bne.n	8001f2a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	0092      	lsls	r2, r2, #2
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0ff      	b.n	800212a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2240      	movs	r2, #64	; 0x40
 8001f2e:	5c9b      	ldrb	r3, [r3, r2]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_I2C_Mem_Write+0x5c>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e0f8      	b.n	800212a <HAL_I2C_Mem_Write+0x24e>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2240      	movs	r2, #64	; 0x40
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f40:	f7ff f920 	bl	8001184 <HAL_GetTick>
 8001f44:	0003      	movs	r3, r0
 8001f46:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	0219      	lsls	r1, r3, #8
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2319      	movs	r3, #25
 8001f54:	2201      	movs	r2, #1
 8001f56:	f000 fa8f 	bl	8002478 <I2C_WaitOnFlagUntilTimeout>
 8001f5a:	1e03      	subs	r3, r0, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0e3      	b.n	800212a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2241      	movs	r2, #65	; 0x41
 8001f66:	2121      	movs	r1, #33	; 0x21
 8001f68:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2242      	movs	r2, #66	; 0x42
 8001f6e:	2140      	movs	r1, #64	; 0x40
 8001f70:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	222c      	movs	r2, #44	; 0x2c
 8001f82:	18ba      	adds	r2, r7, r2
 8001f84:	8812      	ldrh	r2, [r2, #0]
 8001f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f8e:	1dbb      	adds	r3, r7, #6
 8001f90:	881c      	ldrh	r4, [r3, #0]
 8001f92:	2308      	movs	r3, #8
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	881a      	ldrh	r2, [r3, #0]
 8001f98:	230a      	movs	r3, #10
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	8819      	ldrh	r1, [r3, #0]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	0023      	movs	r3, r4
 8001faa:	f000 f9df 	bl	800236c <I2C_RequestMemoryWrite>
 8001fae:	1e03      	subs	r3, r0, #0
 8001fb0:	d005      	beq.n	8001fbe <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2240      	movs	r2, #64	; 0x40
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0b5      	b.n	800212a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	2bff      	cmp	r3, #255	; 0xff
 8001fc6:	d911      	bls.n	8001fec <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	22ff      	movs	r2, #255	; 0xff
 8001fcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	045c      	lsls	r4, r3, #17
 8001fd8:	230a      	movs	r3, #10
 8001fda:	18fb      	adds	r3, r7, r3
 8001fdc:	8819      	ldrh	r1, [r3, #0]
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	0023      	movs	r3, r4
 8001fe6:	f000 fb67 	bl	80026b8 <I2C_TransferConfig>
 8001fea:	e012      	b.n	8002012 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	049c      	lsls	r4, r3, #18
 8002000:	230a      	movs	r3, #10
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	8819      	ldrh	r1, [r3, #0]
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	2300      	movs	r3, #0
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	0023      	movs	r3, r4
 800200e:	f000 fb53 	bl	80026b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	0018      	movs	r0, r3
 800201a:	f000 fa6c 	bl	80024f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800201e:	1e03      	subs	r3, r0, #0
 8002020:	d001      	beq.n	8002026 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e081      	b.n	800212a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	781a      	ldrb	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002040:	b29b      	uxth	r3, r3
 8002042:	3b01      	subs	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205a:	b29b      	uxth	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d03a      	beq.n	80020d6 <HAL_I2C_Mem_Write+0x1fa>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	2b00      	cmp	r3, #0
 8002066:	d136      	bne.n	80020d6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	0013      	movs	r3, r2
 8002072:	2200      	movs	r2, #0
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	f000 f9ff 	bl	8002478 <I2C_WaitOnFlagUntilTimeout>
 800207a:	1e03      	subs	r3, r0, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e053      	b.n	800212a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29b      	uxth	r3, r3
 8002088:	2bff      	cmp	r3, #255	; 0xff
 800208a:	d911      	bls.n	80020b0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	22ff      	movs	r2, #255	; 0xff
 8002090:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002096:	b2da      	uxtb	r2, r3
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	045c      	lsls	r4, r3, #17
 800209c:	230a      	movs	r3, #10
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	8819      	ldrh	r1, [r3, #0]
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	2300      	movs	r3, #0
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	0023      	movs	r3, r4
 80020aa:	f000 fb05 	bl	80026b8 <I2C_TransferConfig>
 80020ae:	e012      	b.n	80020d6 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	049c      	lsls	r4, r3, #18
 80020c4:	230a      	movs	r3, #10
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	8819      	ldrh	r1, [r3, #0]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	2300      	movs	r3, #0
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	0023      	movs	r3, r4
 80020d2:	f000 faf1 	bl	80026b8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d198      	bne.n	8002012 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	0018      	movs	r0, r3
 80020e8:	f000 fa44 	bl	8002574 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020ec:	1e03      	subs	r3, r0, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e01a      	b.n	800212a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2220      	movs	r2, #32
 80020fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	490b      	ldr	r1, [pc, #44]	; (8002134 <HAL_I2C_Mem_Write+0x258>)
 8002108:	400a      	ands	r2, r1
 800210a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2241      	movs	r2, #65	; 0x41
 8002110:	2120      	movs	r1, #32
 8002112:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2242      	movs	r2, #66	; 0x42
 8002118:	2100      	movs	r1, #0
 800211a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2240      	movs	r2, #64	; 0x40
 8002120:	2100      	movs	r1, #0
 8002122:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	e000      	b.n	800212a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002128:	2302      	movs	r3, #2
  }
}
 800212a:	0018      	movs	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	b007      	add	sp, #28
 8002130:	bd90      	pop	{r4, r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	fe00e800 	.word	0xfe00e800

08002138 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	230a      	movs	r3, #10
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	1c0a      	adds	r2, r1, #0
 800214a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2241      	movs	r2, #65	; 0x41
 8002154:	5c9b      	ldrb	r3, [r3, r2]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b20      	cmp	r3, #32
 800215a:	d000      	beq.n	800215e <HAL_I2C_IsDeviceReady+0x26>
 800215c:	e0fe      	b.n	800235c <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699a      	ldr	r2, [r3, #24]
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	401a      	ands	r2, r3
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	429a      	cmp	r2, r3
 8002170:	d101      	bne.n	8002176 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8002172:	2302      	movs	r3, #2
 8002174:	e0f3      	b.n	800235e <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2240      	movs	r2, #64	; 0x40
 800217a:	5c9b      	ldrb	r3, [r3, r2]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_I2C_IsDeviceReady+0x4c>
 8002180:	2302      	movs	r3, #2
 8002182:	e0ec      	b.n	800235e <HAL_I2C_IsDeviceReady+0x226>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2240      	movs	r2, #64	; 0x40
 8002188:	2101      	movs	r1, #1
 800218a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2241      	movs	r2, #65	; 0x41
 8002190:	2124      	movs	r1, #36	; 0x24
 8002192:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d107      	bne.n	80021b2 <HAL_I2C_IsDeviceReady+0x7a>
 80021a2:	230a      	movs	r3, #10
 80021a4:	18fb      	adds	r3, r7, r3
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	059b      	lsls	r3, r3, #22
 80021aa:	0d9b      	lsrs	r3, r3, #22
 80021ac:	4a6e      	ldr	r2, [pc, #440]	; (8002368 <HAL_I2C_IsDeviceReady+0x230>)
 80021ae:	431a      	orrs	r2, r3
 80021b0:	e007      	b.n	80021c2 <HAL_I2C_IsDeviceReady+0x8a>
 80021b2:	230a      	movs	r3, #10
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	059b      	lsls	r3, r3, #22
 80021ba:	0d9b      	lsrs	r3, r3, #22
 80021bc:	22a0      	movs	r2, #160	; 0xa0
 80021be:	0192      	lsls	r2, r2, #6
 80021c0:	431a      	orrs	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80021c8:	f7fe ffdc 	bl	8001184 <HAL_GetTick>
 80021cc:	0003      	movs	r3, r0
 80021ce:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2220      	movs	r2, #32
 80021d8:	4013      	ands	r3, r2
 80021da:	3b20      	subs	r3, #32
 80021dc:	425a      	negs	r2, r3
 80021de:	4153      	adcs	r3, r2
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	231f      	movs	r3, #31
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2210      	movs	r2, #16
 80021f0:	4013      	ands	r3, r2
 80021f2:	3b10      	subs	r3, #16
 80021f4:	425a      	negs	r2, r3
 80021f6:	4153      	adcs	r3, r2
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	231e      	movs	r3, #30
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002200:	e035      	b.n	800226e <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	d01a      	beq.n	800223e <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002208:	f7fe ffbc 	bl	8001184 <HAL_GetTick>
 800220c:	0002      	movs	r2, r0
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d302      	bcc.n	800221e <HAL_I2C_IsDeviceReady+0xe6>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10f      	bne.n	800223e <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2241      	movs	r2, #65	; 0x41
 8002222:	2120      	movs	r1, #32
 8002224:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	2220      	movs	r2, #32
 800222c:	431a      	orrs	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2240      	movs	r2, #64	; 0x40
 8002236:	2100      	movs	r1, #0
 8002238:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e08f      	b.n	800235e <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	2220      	movs	r2, #32
 8002246:	4013      	ands	r3, r2
 8002248:	3b20      	subs	r3, #32
 800224a:	425a      	negs	r2, r3
 800224c:	4153      	adcs	r3, r2
 800224e:	b2da      	uxtb	r2, r3
 8002250:	231f      	movs	r3, #31
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2210      	movs	r2, #16
 800225e:	4013      	ands	r3, r2
 8002260:	3b10      	subs	r3, #16
 8002262:	425a      	negs	r2, r3
 8002264:	4153      	adcs	r3, r2
 8002266:	b2da      	uxtb	r2, r3
 8002268:	231e      	movs	r3, #30
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800226e:	231f      	movs	r3, #31
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d104      	bne.n	8002282 <HAL_I2C_IsDeviceReady+0x14a>
 8002278:	231e      	movs	r3, #30
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0bf      	beq.n	8002202 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	2210      	movs	r2, #16
 800228a:	4013      	ands	r3, r2
 800228c:	2b10      	cmp	r3, #16
 800228e:	d01a      	beq.n	80022c6 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	0013      	movs	r3, r2
 800229a:	2200      	movs	r2, #0
 800229c:	2120      	movs	r1, #32
 800229e:	f000 f8eb 	bl	8002478 <I2C_WaitOnFlagUntilTimeout>
 80022a2:	1e03      	subs	r3, r0, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e059      	b.n	800235e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2220      	movs	r2, #32
 80022b0:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2241      	movs	r2, #65	; 0x41
 80022b6:	2120      	movs	r1, #32
 80022b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2240      	movs	r2, #64	; 0x40
 80022be:	2100      	movs	r1, #0
 80022c0:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e04b      	b.n	800235e <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	0013      	movs	r3, r2
 80022d0:	2200      	movs	r2, #0
 80022d2:	2120      	movs	r1, #32
 80022d4:	f000 f8d0 	bl	8002478 <I2C_WaitOnFlagUntilTimeout>
 80022d8:	1e03      	subs	r3, r0, #0
 80022da:	d001      	beq.n	80022e0 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e03e      	b.n	800235e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2210      	movs	r2, #16
 80022e6:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2220      	movs	r2, #32
 80022ee:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d119      	bne.n	800232c <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2180      	movs	r1, #128	; 0x80
 8002304:	01c9      	lsls	r1, r1, #7
 8002306:	430a      	orrs	r2, r1
 8002308:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	0013      	movs	r3, r2
 8002314:	2200      	movs	r2, #0
 8002316:	2120      	movs	r1, #32
 8002318:	f000 f8ae 	bl	8002478 <I2C_WaitOnFlagUntilTimeout>
 800231c:	1e03      	subs	r3, r0, #0
 800231e:	d001      	beq.n	8002324 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e01c      	b.n	800235e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2220      	movs	r2, #32
 800232a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	3301      	adds	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	429a      	cmp	r2, r3
 8002338:	d900      	bls.n	800233c <HAL_I2C_IsDeviceReady+0x204>
 800233a:	e72e      	b.n	800219a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2241      	movs	r2, #65	; 0x41
 8002340:	2120      	movs	r1, #32
 8002342:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	2220      	movs	r2, #32
 800234a:	431a      	orrs	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2240      	movs	r2, #64	; 0x40
 8002354:	2100      	movs	r1, #0
 8002356:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
  }
}
 800235e:	0018      	movs	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	b008      	add	sp, #32
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	02002000 	.word	0x02002000

0800236c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800236c:	b5b0      	push	{r4, r5, r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af02      	add	r7, sp, #8
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	000c      	movs	r4, r1
 8002376:	0010      	movs	r0, r2
 8002378:	0019      	movs	r1, r3
 800237a:	250a      	movs	r5, #10
 800237c:	197b      	adds	r3, r7, r5
 800237e:	1c22      	adds	r2, r4, #0
 8002380:	801a      	strh	r2, [r3, #0]
 8002382:	2308      	movs	r3, #8
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	1c02      	adds	r2, r0, #0
 8002388:	801a      	strh	r2, [r3, #0]
 800238a:	1dbb      	adds	r3, r7, #6
 800238c:	1c0a      	adds	r2, r1, #0
 800238e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002390:	1dbb      	adds	r3, r7, #6
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	b2da      	uxtb	r2, r3
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	045c      	lsls	r4, r3, #17
 800239a:	197b      	adds	r3, r7, r5
 800239c:	8819      	ldrh	r1, [r3, #0]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	4b23      	ldr	r3, [pc, #140]	; (8002430 <I2C_RequestMemoryWrite+0xc4>)
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	0023      	movs	r3, r4
 80023a6:	f000 f987 	bl	80026b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ac:	6a39      	ldr	r1, [r7, #32]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	0018      	movs	r0, r3
 80023b2:	f000 f8a0 	bl	80024f6 <I2C_WaitOnTXISFlagUntilTimeout>
 80023b6:	1e03      	subs	r3, r0, #0
 80023b8:	d001      	beq.n	80023be <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e033      	b.n	8002426 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023be:	1dbb      	adds	r3, r7, #6
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d107      	bne.n	80023d6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023c6:	2308      	movs	r3, #8
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
 80023d4:	e019      	b.n	800240a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023d6:	2308      	movs	r3, #8
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	b29b      	uxth	r3, r3
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ea:	6a39      	ldr	r1, [r7, #32]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 f881 	bl	80024f6 <I2C_WaitOnTXISFlagUntilTimeout>
 80023f4:	1e03      	subs	r3, r0, #0
 80023f6:	d001      	beq.n	80023fc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e014      	b.n	8002426 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023fc:	2308      	movs	r3, #8
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800240a:	6a3a      	ldr	r2, [r7, #32]
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	0013      	movs	r3, r2
 8002414:	2200      	movs	r2, #0
 8002416:	2180      	movs	r1, #128	; 0x80
 8002418:	f000 f82e 	bl	8002478 <I2C_WaitOnFlagUntilTimeout>
 800241c:	1e03      	subs	r3, r0, #0
 800241e:	d001      	beq.n	8002424 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	0018      	movs	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	b004      	add	sp, #16
 800242c:	bdb0      	pop	{r4, r5, r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	80002000 	.word	0x80002000

08002434 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2202      	movs	r2, #2
 8002444:	4013      	ands	r3, r2
 8002446:	2b02      	cmp	r3, #2
 8002448:	d103      	bne.n	8002452 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2200      	movs	r2, #0
 8002450:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2201      	movs	r2, #1
 800245a:	4013      	ands	r3, r2
 800245c:	2b01      	cmp	r3, #1
 800245e:	d007      	beq.n	8002470 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2101      	movs	r1, #1
 800246c:	430a      	orrs	r2, r1
 800246e:	619a      	str	r2, [r3, #24]
  }
}
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	b002      	add	sp, #8
 8002476:	bd80      	pop	{r7, pc}

08002478 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	1dfb      	adds	r3, r7, #7
 8002486:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002488:	e021      	b.n	80024ce <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	3301      	adds	r3, #1
 800248e:	d01e      	beq.n	80024ce <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002490:	f7fe fe78 	bl	8001184 <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d302      	bcc.n	80024a6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d113      	bne.n	80024ce <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	2220      	movs	r2, #32
 80024ac:	431a      	orrs	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2241      	movs	r2, #65	; 0x41
 80024b6:	2120      	movs	r1, #32
 80024b8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2242      	movs	r2, #66	; 0x42
 80024be:	2100      	movs	r1, #0
 80024c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2240      	movs	r2, #64	; 0x40
 80024c6:	2100      	movs	r1, #0
 80024c8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e00f      	b.n	80024ee <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	4013      	ands	r3, r2
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	425a      	negs	r2, r3
 80024de:	4153      	adcs	r3, r2
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	001a      	movs	r2, r3
 80024e4:	1dfb      	adds	r3, r7, #7
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d0ce      	beq.n	800248a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	0018      	movs	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b004      	add	sp, #16
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002502:	e02b      	b.n	800255c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	0018      	movs	r0, r3
 800250c:	f000 f86e 	bl	80025ec <I2C_IsAcknowledgeFailed>
 8002510:	1e03      	subs	r3, r0, #0
 8002512:	d001      	beq.n	8002518 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e029      	b.n	800256c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	3301      	adds	r3, #1
 800251c:	d01e      	beq.n	800255c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251e:	f7fe fe31 	bl	8001184 <HAL_GetTick>
 8002522:	0002      	movs	r2, r0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	429a      	cmp	r2, r3
 800252c:	d302      	bcc.n	8002534 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d113      	bne.n	800255c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	2220      	movs	r2, #32
 800253a:	431a      	orrs	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2241      	movs	r2, #65	; 0x41
 8002544:	2120      	movs	r1, #32
 8002546:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2242      	movs	r2, #66	; 0x42
 800254c:	2100      	movs	r1, #0
 800254e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2240      	movs	r2, #64	; 0x40
 8002554:	2100      	movs	r1, #0
 8002556:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e007      	b.n	800256c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2202      	movs	r2, #2
 8002564:	4013      	ands	r3, r2
 8002566:	2b02      	cmp	r3, #2
 8002568:	d1cc      	bne.n	8002504 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	0018      	movs	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	b004      	add	sp, #16
 8002572:	bd80      	pop	{r7, pc}

08002574 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002580:	e028      	b.n	80025d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	0018      	movs	r0, r3
 800258a:	f000 f82f 	bl	80025ec <I2C_IsAcknowledgeFailed>
 800258e:	1e03      	subs	r3, r0, #0
 8002590:	d001      	beq.n	8002596 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e026      	b.n	80025e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002596:	f7fe fdf5 	bl	8001184 <HAL_GetTick>
 800259a:	0002      	movs	r2, r0
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d302      	bcc.n	80025ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d113      	bne.n	80025d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b0:	2220      	movs	r2, #32
 80025b2:	431a      	orrs	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2241      	movs	r2, #65	; 0x41
 80025bc:	2120      	movs	r1, #32
 80025be:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2242      	movs	r2, #66	; 0x42
 80025c4:	2100      	movs	r1, #0
 80025c6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2240      	movs	r2, #64	; 0x40
 80025cc:	2100      	movs	r1, #0
 80025ce:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e007      	b.n	80025e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2220      	movs	r2, #32
 80025dc:	4013      	ands	r3, r2
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d1cf      	bne.n	8002582 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b004      	add	sp, #16
 80025ea:	bd80      	pop	{r7, pc}

080025ec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2210      	movs	r2, #16
 8002600:	4013      	ands	r3, r2
 8002602:	2b10      	cmp	r3, #16
 8002604:	d151      	bne.n	80026aa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002606:	e021      	b.n	800264c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	3301      	adds	r3, #1
 800260c:	d01e      	beq.n	800264c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260e:	f7fe fdb9 	bl	8001184 <HAL_GetTick>
 8002612:	0002      	movs	r2, r0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	429a      	cmp	r2, r3
 800261c:	d302      	bcc.n	8002624 <I2C_IsAcknowledgeFailed+0x38>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d113      	bne.n	800264c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002628:	2220      	movs	r2, #32
 800262a:	431a      	orrs	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2241      	movs	r2, #65	; 0x41
 8002634:	2120      	movs	r1, #32
 8002636:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2242      	movs	r2, #66	; 0x42
 800263c:	2100      	movs	r1, #0
 800263e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2240      	movs	r2, #64	; 0x40
 8002644:	2100      	movs	r1, #0
 8002646:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e02f      	b.n	80026ac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2220      	movs	r2, #32
 8002654:	4013      	ands	r3, r2
 8002656:	2b20      	cmp	r3, #32
 8002658:	d1d6      	bne.n	8002608 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2210      	movs	r2, #16
 8002660:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2220      	movs	r2, #32
 8002668:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	0018      	movs	r0, r3
 800266e:	f7ff fee1 	bl	8002434 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	490d      	ldr	r1, [pc, #52]	; (80026b4 <I2C_IsAcknowledgeFailed+0xc8>)
 800267e:	400a      	ands	r2, r1
 8002680:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	2204      	movs	r2, #4
 8002688:	431a      	orrs	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2241      	movs	r2, #65	; 0x41
 8002692:	2120      	movs	r1, #32
 8002694:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2242      	movs	r2, #66	; 0x42
 800269a:	2100      	movs	r1, #0
 800269c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2240      	movs	r2, #64	; 0x40
 80026a2:	2100      	movs	r1, #0
 80026a4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b004      	add	sp, #16
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	fe00e800 	.word	0xfe00e800

080026b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	0008      	movs	r0, r1
 80026c2:	0011      	movs	r1, r2
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	240a      	movs	r4, #10
 80026c8:	193b      	adds	r3, r7, r4
 80026ca:	1c02      	adds	r2, r0, #0
 80026cc:	801a      	strh	r2, [r3, #0]
 80026ce:	2009      	movs	r0, #9
 80026d0:	183b      	adds	r3, r7, r0
 80026d2:	1c0a      	adds	r2, r1, #0
 80026d4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	6a3a      	ldr	r2, [r7, #32]
 80026de:	0d51      	lsrs	r1, r2, #21
 80026e0:	2280      	movs	r2, #128	; 0x80
 80026e2:	00d2      	lsls	r2, r2, #3
 80026e4:	400a      	ands	r2, r1
 80026e6:	490e      	ldr	r1, [pc, #56]	; (8002720 <I2C_TransferConfig+0x68>)
 80026e8:	430a      	orrs	r2, r1
 80026ea:	43d2      	mvns	r2, r2
 80026ec:	401a      	ands	r2, r3
 80026ee:	0011      	movs	r1, r2
 80026f0:	193b      	adds	r3, r7, r4
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	059b      	lsls	r3, r3, #22
 80026f6:	0d9a      	lsrs	r2, r3, #22
 80026f8:	183b      	adds	r3, r7, r0
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	0418      	lsls	r0, r3, #16
 80026fe:	23ff      	movs	r3, #255	; 0xff
 8002700:	041b      	lsls	r3, r3, #16
 8002702:	4003      	ands	r3, r0
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	431a      	orrs	r2, r3
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	431a      	orrs	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	46bd      	mov	sp, r7
 800271a:	b005      	add	sp, #20
 800271c:	bd90      	pop	{r4, r7, pc}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	03ff63ff 	.word	0x03ff63ff

08002724 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2241      	movs	r2, #65	; 0x41
 8002732:	5c9b      	ldrb	r3, [r3, r2]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b20      	cmp	r3, #32
 8002738:	d138      	bne.n	80027ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2240      	movs	r2, #64	; 0x40
 800273e:	5c9b      	ldrb	r3, [r3, r2]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002744:	2302      	movs	r3, #2
 8002746:	e032      	b.n	80027ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2240      	movs	r2, #64	; 0x40
 800274c:	2101      	movs	r1, #1
 800274e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2241      	movs	r2, #65	; 0x41
 8002754:	2124      	movs	r1, #36	; 0x24
 8002756:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2101      	movs	r1, #1
 8002764:	438a      	bics	r2, r1
 8002766:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4911      	ldr	r1, [pc, #68]	; (80027b8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002774:	400a      	ands	r2, r1
 8002776:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6819      	ldr	r1, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2101      	movs	r1, #1
 8002794:	430a      	orrs	r2, r1
 8002796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2241      	movs	r2, #65	; 0x41
 800279c:	2120      	movs	r1, #32
 800279e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2240      	movs	r2, #64	; 0x40
 80027a4:	2100      	movs	r1, #0
 80027a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	e000      	b.n	80027ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027ac:	2302      	movs	r3, #2
  }
}
 80027ae:	0018      	movs	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b002      	add	sp, #8
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	ffffefff 	.word	0xffffefff

080027bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2241      	movs	r2, #65	; 0x41
 80027ca:	5c9b      	ldrb	r3, [r3, r2]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	d139      	bne.n	8002846 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2240      	movs	r2, #64	; 0x40
 80027d6:	5c9b      	ldrb	r3, [r3, r2]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027dc:	2302      	movs	r3, #2
 80027de:	e033      	b.n	8002848 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2240      	movs	r2, #64	; 0x40
 80027e4:	2101      	movs	r1, #1
 80027e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2241      	movs	r2, #65	; 0x41
 80027ec:	2124      	movs	r1, #36	; 0x24
 80027ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2101      	movs	r1, #1
 80027fc:	438a      	bics	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4a11      	ldr	r2, [pc, #68]	; (8002850 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2101      	movs	r1, #1
 800282e:	430a      	orrs	r2, r1
 8002830:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2241      	movs	r2, #65	; 0x41
 8002836:	2120      	movs	r1, #32
 8002838:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2240      	movs	r2, #64	; 0x40
 800283e:	2100      	movs	r1, #0
 8002840:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	e000      	b.n	8002848 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002846:	2302      	movs	r3, #2
  }
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b004      	add	sp, #16
 800284e:	bd80      	pop	{r7, pc}
 8002850:	fffff0ff 	.word	0xfffff0ff

08002854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d102      	bne.n	8002868 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	f000 fb76 	bl	8002f54 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2201      	movs	r2, #1
 800286e:	4013      	ands	r3, r2
 8002870:	d100      	bne.n	8002874 <HAL_RCC_OscConfig+0x20>
 8002872:	e08e      	b.n	8002992 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002874:	4bc5      	ldr	r3, [pc, #788]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	220c      	movs	r2, #12
 800287a:	4013      	ands	r3, r2
 800287c:	2b04      	cmp	r3, #4
 800287e:	d00e      	beq.n	800289e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002880:	4bc2      	ldr	r3, [pc, #776]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	220c      	movs	r2, #12
 8002886:	4013      	ands	r3, r2
 8002888:	2b08      	cmp	r3, #8
 800288a:	d117      	bne.n	80028bc <HAL_RCC_OscConfig+0x68>
 800288c:	4bbf      	ldr	r3, [pc, #764]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	23c0      	movs	r3, #192	; 0xc0
 8002892:	025b      	lsls	r3, r3, #9
 8002894:	401a      	ands	r2, r3
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	025b      	lsls	r3, r3, #9
 800289a:	429a      	cmp	r2, r3
 800289c:	d10e      	bne.n	80028bc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289e:	4bbb      	ldr	r3, [pc, #748]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	029b      	lsls	r3, r3, #10
 80028a6:	4013      	ands	r3, r2
 80028a8:	d100      	bne.n	80028ac <HAL_RCC_OscConfig+0x58>
 80028aa:	e071      	b.n	8002990 <HAL_RCC_OscConfig+0x13c>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d000      	beq.n	80028b6 <HAL_RCC_OscConfig+0x62>
 80028b4:	e06c      	b.n	8002990 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f000 fb4c 	bl	8002f54 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d107      	bne.n	80028d4 <HAL_RCC_OscConfig+0x80>
 80028c4:	4bb1      	ldr	r3, [pc, #708]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4bb0      	ldr	r3, [pc, #704]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 80028ca:	2180      	movs	r1, #128	; 0x80
 80028cc:	0249      	lsls	r1, r1, #9
 80028ce:	430a      	orrs	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e02f      	b.n	8002934 <HAL_RCC_OscConfig+0xe0>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10c      	bne.n	80028f6 <HAL_RCC_OscConfig+0xa2>
 80028dc:	4bab      	ldr	r3, [pc, #684]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4baa      	ldr	r3, [pc, #680]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 80028e2:	49ab      	ldr	r1, [pc, #684]	; (8002b90 <HAL_RCC_OscConfig+0x33c>)
 80028e4:	400a      	ands	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	4ba8      	ldr	r3, [pc, #672]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4ba7      	ldr	r3, [pc, #668]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 80028ee:	49a9      	ldr	r1, [pc, #676]	; (8002b94 <HAL_RCC_OscConfig+0x340>)
 80028f0:	400a      	ands	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	e01e      	b.n	8002934 <HAL_RCC_OscConfig+0xe0>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b05      	cmp	r3, #5
 80028fc:	d10e      	bne.n	800291c <HAL_RCC_OscConfig+0xc8>
 80028fe:	4ba3      	ldr	r3, [pc, #652]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	4ba2      	ldr	r3, [pc, #648]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002904:	2180      	movs	r1, #128	; 0x80
 8002906:	02c9      	lsls	r1, r1, #11
 8002908:	430a      	orrs	r2, r1
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	4b9f      	ldr	r3, [pc, #636]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b9e      	ldr	r3, [pc, #632]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002912:	2180      	movs	r1, #128	; 0x80
 8002914:	0249      	lsls	r1, r1, #9
 8002916:	430a      	orrs	r2, r1
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	e00b      	b.n	8002934 <HAL_RCC_OscConfig+0xe0>
 800291c:	4b9b      	ldr	r3, [pc, #620]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b9a      	ldr	r3, [pc, #616]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002922:	499b      	ldr	r1, [pc, #620]	; (8002b90 <HAL_RCC_OscConfig+0x33c>)
 8002924:	400a      	ands	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	4b98      	ldr	r3, [pc, #608]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b97      	ldr	r3, [pc, #604]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 800292e:	4999      	ldr	r1, [pc, #612]	; (8002b94 <HAL_RCC_OscConfig+0x340>)
 8002930:	400a      	ands	r2, r1
 8002932:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d014      	beq.n	8002966 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7fe fc22 	bl	8001184 <HAL_GetTick>
 8002940:	0003      	movs	r3, r0
 8002942:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002946:	f7fe fc1d 	bl	8001184 <HAL_GetTick>
 800294a:	0002      	movs	r2, r0
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b64      	cmp	r3, #100	; 0x64
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e2fd      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002958:	4b8c      	ldr	r3, [pc, #560]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	029b      	lsls	r3, r3, #10
 8002960:	4013      	ands	r3, r2
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0xf2>
 8002964:	e015      	b.n	8002992 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002966:	f7fe fc0d 	bl	8001184 <HAL_GetTick>
 800296a:	0003      	movs	r3, r0
 800296c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002970:	f7fe fc08 	bl	8001184 <HAL_GetTick>
 8002974:	0002      	movs	r2, r0
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b64      	cmp	r3, #100	; 0x64
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e2e8      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002982:	4b82      	ldr	r3, [pc, #520]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	029b      	lsls	r3, r3, #10
 800298a:	4013      	ands	r3, r2
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x11c>
 800298e:	e000      	b.n	8002992 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002990:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2202      	movs	r2, #2
 8002998:	4013      	ands	r3, r2
 800299a:	d100      	bne.n	800299e <HAL_RCC_OscConfig+0x14a>
 800299c:	e06c      	b.n	8002a78 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800299e:	4b7b      	ldr	r3, [pc, #492]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	220c      	movs	r2, #12
 80029a4:	4013      	ands	r3, r2
 80029a6:	d00e      	beq.n	80029c6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029a8:	4b78      	ldr	r3, [pc, #480]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	220c      	movs	r2, #12
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d11f      	bne.n	80029f4 <HAL_RCC_OscConfig+0x1a0>
 80029b4:	4b75      	ldr	r3, [pc, #468]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	23c0      	movs	r3, #192	; 0xc0
 80029ba:	025b      	lsls	r3, r3, #9
 80029bc:	401a      	ands	r2, r3
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d116      	bne.n	80029f4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	4b71      	ldr	r3, [pc, #452]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2202      	movs	r2, #2
 80029cc:	4013      	ands	r3, r2
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_OscConfig+0x188>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e2bb      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029dc:	4b6b      	ldr	r3, [pc, #428]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	22f8      	movs	r2, #248	; 0xf8
 80029e2:	4393      	bics	r3, r2
 80029e4:	0019      	movs	r1, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00da      	lsls	r2, r3, #3
 80029ec:	4b67      	ldr	r3, [pc, #412]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 80029ee:	430a      	orrs	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	e041      	b.n	8002a78 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d024      	beq.n	8002a46 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029fc:	4b63      	ldr	r3, [pc, #396]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b62      	ldr	r3, [pc, #392]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002a02:	2101      	movs	r1, #1
 8002a04:	430a      	orrs	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7fe fbbc 	bl	8001184 <HAL_GetTick>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a12:	f7fe fbb7 	bl	8001184 <HAL_GetTick>
 8002a16:	0002      	movs	r2, r0
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e297      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2202      	movs	r2, #2
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d0f1      	beq.n	8002a12 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2e:	4b57      	ldr	r3, [pc, #348]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	22f8      	movs	r2, #248	; 0xf8
 8002a34:	4393      	bics	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	00da      	lsls	r2, r3, #3
 8002a3e:	4b53      	ldr	r3, [pc, #332]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	e018      	b.n	8002a78 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a46:	4b51      	ldr	r3, [pc, #324]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	438a      	bics	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a52:	f7fe fb97 	bl	8001184 <HAL_GetTick>
 8002a56:	0003      	movs	r3, r0
 8002a58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a5c:	f7fe fb92 	bl	8001184 <HAL_GetTick>
 8002a60:	0002      	movs	r2, r0
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e272      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2202      	movs	r2, #2
 8002a74:	4013      	ands	r3, r2
 8002a76:	d1f1      	bne.n	8002a5c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d036      	beq.n	8002af0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d019      	beq.n	8002abe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8a:	4b40      	ldr	r3, [pc, #256]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a8e:	4b3f      	ldr	r3, [pc, #252]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002a90:	2101      	movs	r1, #1
 8002a92:	430a      	orrs	r2, r1
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a96:	f7fe fb75 	bl	8001184 <HAL_GetTick>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa0:	f7fe fb70 	bl	8001184 <HAL_GetTick>
 8002aa4:	0002      	movs	r2, r0
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e250      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab2:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d0f1      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x24c>
 8002abc:	e018      	b.n	8002af0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002abe:	4b33      	ldr	r3, [pc, #204]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac2:	4b32      	ldr	r3, [pc, #200]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	438a      	bics	r2, r1
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aca:	f7fe fb5b 	bl	8001184 <HAL_GetTick>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad4:	f7fe fb56 	bl	8001184 <HAL_GetTick>
 8002ad8:	0002      	movs	r2, r0
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e236      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae6:	4b29      	ldr	r3, [pc, #164]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	2202      	movs	r2, #2
 8002aec:	4013      	ands	r3, r2
 8002aee:	d1f1      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2204      	movs	r2, #4
 8002af6:	4013      	ands	r3, r2
 8002af8:	d100      	bne.n	8002afc <HAL_RCC_OscConfig+0x2a8>
 8002afa:	e0b5      	b.n	8002c68 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afc:	231f      	movs	r3, #31
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b04:	4b21      	ldr	r3, [pc, #132]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002b06:	69da      	ldr	r2, [r3, #28]
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	055b      	lsls	r3, r3, #21
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d111      	bne.n	8002b34 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b10:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002b12:	69da      	ldr	r2, [r3, #28]
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	0549      	lsls	r1, r1, #21
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	61da      	str	r2, [r3, #28]
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	2380      	movs	r3, #128	; 0x80
 8002b24:	055b      	lsls	r3, r3, #21
 8002b26:	4013      	ands	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b2c:	231f      	movs	r3, #31
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b34:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <HAL_RCC_OscConfig+0x344>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d11a      	bne.n	8002b76 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b40:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <HAL_RCC_OscConfig+0x344>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <HAL_RCC_OscConfig+0x344>)
 8002b46:	2180      	movs	r1, #128	; 0x80
 8002b48:	0049      	lsls	r1, r1, #1
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fb19 	bl	8001184 <HAL_GetTick>
 8002b52:	0003      	movs	r3, r0
 8002b54:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b58:	f7fe fb14 	bl	8001184 <HAL_GetTick>
 8002b5c:	0002      	movs	r2, r0
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e1f4      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCC_OscConfig+0x344>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4013      	ands	r3, r2
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d10e      	bne.n	8002b9c <HAL_RCC_OscConfig+0x348>
 8002b7e:	4b03      	ldr	r3, [pc, #12]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002b80:	6a1a      	ldr	r2, [r3, #32]
 8002b82:	4b02      	ldr	r3, [pc, #8]	; (8002b8c <HAL_RCC_OscConfig+0x338>)
 8002b84:	2101      	movs	r1, #1
 8002b86:	430a      	orrs	r2, r1
 8002b88:	621a      	str	r2, [r3, #32]
 8002b8a:	e035      	b.n	8002bf8 <HAL_RCC_OscConfig+0x3a4>
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	fffeffff 	.word	0xfffeffff
 8002b94:	fffbffff 	.word	0xfffbffff
 8002b98:	40007000 	.word	0x40007000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10c      	bne.n	8002bbe <HAL_RCC_OscConfig+0x36a>
 8002ba4:	4bca      	ldr	r3, [pc, #808]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	4bc9      	ldr	r3, [pc, #804]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002baa:	2101      	movs	r1, #1
 8002bac:	438a      	bics	r2, r1
 8002bae:	621a      	str	r2, [r3, #32]
 8002bb0:	4bc7      	ldr	r3, [pc, #796]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002bb2:	6a1a      	ldr	r2, [r3, #32]
 8002bb4:	4bc6      	ldr	r3, [pc, #792]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002bb6:	2104      	movs	r1, #4
 8002bb8:	438a      	bics	r2, r1
 8002bba:	621a      	str	r2, [r3, #32]
 8002bbc:	e01c      	b.n	8002bf8 <HAL_RCC_OscConfig+0x3a4>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b05      	cmp	r3, #5
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x38c>
 8002bc6:	4bc2      	ldr	r3, [pc, #776]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002bc8:	6a1a      	ldr	r2, [r3, #32]
 8002bca:	4bc1      	ldr	r3, [pc, #772]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002bcc:	2104      	movs	r1, #4
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	621a      	str	r2, [r3, #32]
 8002bd2:	4bbf      	ldr	r3, [pc, #764]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002bd4:	6a1a      	ldr	r2, [r3, #32]
 8002bd6:	4bbe      	ldr	r3, [pc, #760]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002bd8:	2101      	movs	r1, #1
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	621a      	str	r2, [r3, #32]
 8002bde:	e00b      	b.n	8002bf8 <HAL_RCC_OscConfig+0x3a4>
 8002be0:	4bbb      	ldr	r3, [pc, #748]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002be2:	6a1a      	ldr	r2, [r3, #32]
 8002be4:	4bba      	ldr	r3, [pc, #744]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002be6:	2101      	movs	r1, #1
 8002be8:	438a      	bics	r2, r1
 8002bea:	621a      	str	r2, [r3, #32]
 8002bec:	4bb8      	ldr	r3, [pc, #736]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002bee:	6a1a      	ldr	r2, [r3, #32]
 8002bf0:	4bb7      	ldr	r3, [pc, #732]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002bf2:	2104      	movs	r1, #4
 8002bf4:	438a      	bics	r2, r1
 8002bf6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d014      	beq.n	8002c2a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c00:	f7fe fac0 	bl	8001184 <HAL_GetTick>
 8002c04:	0003      	movs	r3, r0
 8002c06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c08:	e009      	b.n	8002c1e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0a:	f7fe fabb 	bl	8001184 <HAL_GetTick>
 8002c0e:	0002      	movs	r2, r0
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	4aaf      	ldr	r2, [pc, #700]	; (8002ed4 <HAL_RCC_OscConfig+0x680>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e19a      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1e:	4bac      	ldr	r3, [pc, #688]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	2202      	movs	r2, #2
 8002c24:	4013      	ands	r3, r2
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x3b6>
 8002c28:	e013      	b.n	8002c52 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2a:	f7fe faab 	bl	8001184 <HAL_GetTick>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c32:	e009      	b.n	8002c48 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c34:	f7fe faa6 	bl	8001184 <HAL_GetTick>
 8002c38:	0002      	movs	r2, r0
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	4aa5      	ldr	r2, [pc, #660]	; (8002ed4 <HAL_RCC_OscConfig+0x680>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e185      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c48:	4ba1      	ldr	r3, [pc, #644]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c52:	231f      	movs	r3, #31
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d105      	bne.n	8002c68 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5c:	4b9c      	ldr	r3, [pc, #624]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002c5e:	69da      	ldr	r2, [r3, #28]
 8002c60:	4b9b      	ldr	r3, [pc, #620]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002c62:	499d      	ldr	r1, [pc, #628]	; (8002ed8 <HAL_RCC_OscConfig+0x684>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2210      	movs	r2, #16
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d063      	beq.n	8002d3a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d12a      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c7a:	4b95      	ldr	r3, [pc, #596]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c7e:	4b94      	ldr	r3, [pc, #592]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002c80:	2104      	movs	r1, #4
 8002c82:	430a      	orrs	r2, r1
 8002c84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002c86:	4b92      	ldr	r3, [pc, #584]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c8a:	4b91      	ldr	r3, [pc, #580]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c92:	f7fe fa77 	bl	8001184 <HAL_GetTick>
 8002c96:	0003      	movs	r3, r0
 8002c98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c9c:	f7fe fa72 	bl	8001184 <HAL_GetTick>
 8002ca0:	0002      	movs	r2, r0
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e152      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002cae:	4b88      	ldr	r3, [pc, #544]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d0f1      	beq.n	8002c9c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002cb8:	4b85      	ldr	r3, [pc, #532]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cbc:	22f8      	movs	r2, #248	; 0xf8
 8002cbe:	4393      	bics	r3, r2
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	00da      	lsls	r2, r3, #3
 8002cc8:	4b81      	ldr	r3, [pc, #516]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cce:	e034      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	3305      	adds	r3, #5
 8002cd6:	d111      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002cd8:	4b7d      	ldr	r3, [pc, #500]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cdc:	4b7c      	ldr	r3, [pc, #496]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002cde:	2104      	movs	r1, #4
 8002ce0:	438a      	bics	r2, r1
 8002ce2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ce4:	4b7a      	ldr	r3, [pc, #488]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce8:	22f8      	movs	r2, #248	; 0xf8
 8002cea:	4393      	bics	r3, r2
 8002cec:	0019      	movs	r1, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	00da      	lsls	r2, r3, #3
 8002cf4:	4b76      	ldr	r3, [pc, #472]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cfa:	e01e      	b.n	8002d3a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cfc:	4b74      	ldr	r3, [pc, #464]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d00:	4b73      	ldr	r3, [pc, #460]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002d02:	2104      	movs	r1, #4
 8002d04:	430a      	orrs	r2, r1
 8002d06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002d08:	4b71      	ldr	r3, [pc, #452]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d0c:	4b70      	ldr	r3, [pc, #448]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002d0e:	2101      	movs	r1, #1
 8002d10:	438a      	bics	r2, r1
 8002d12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d14:	f7fe fa36 	bl	8001184 <HAL_GetTick>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d1e:	f7fe fa31 	bl	8001184 <HAL_GetTick>
 8002d22:	0002      	movs	r2, r0
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e111      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d30:	4b67      	ldr	r3, [pc, #412]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d34:	2202      	movs	r2, #2
 8002d36:	4013      	ands	r3, r2
 8002d38:	d1f1      	bne.n	8002d1e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	4013      	ands	r3, r2
 8002d42:	d05c      	beq.n	8002dfe <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d44:	4b62      	ldr	r3, [pc, #392]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	220c      	movs	r2, #12
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b0c      	cmp	r3, #12
 8002d4e:	d00e      	beq.n	8002d6e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d50:	4b5f      	ldr	r3, [pc, #380]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	220c      	movs	r2, #12
 8002d56:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d114      	bne.n	8002d86 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d5c:	4b5c      	ldr	r3, [pc, #368]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	23c0      	movs	r3, #192	; 0xc0
 8002d62:	025b      	lsls	r3, r3, #9
 8002d64:	401a      	ands	r2, r3
 8002d66:	23c0      	movs	r3, #192	; 0xc0
 8002d68:	025b      	lsls	r3, r3, #9
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d10b      	bne.n	8002d86 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d6e:	4b58      	ldr	r3, [pc, #352]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d72:	2380      	movs	r3, #128	; 0x80
 8002d74:	025b      	lsls	r3, r3, #9
 8002d76:	4013      	ands	r3, r2
 8002d78:	d040      	beq.n	8002dfc <HAL_RCC_OscConfig+0x5a8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d03c      	beq.n	8002dfc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e0e6      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d01b      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d8e:	4b50      	ldr	r3, [pc, #320]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d92:	4b4f      	ldr	r3, [pc, #316]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002d94:	2180      	movs	r1, #128	; 0x80
 8002d96:	0249      	lsls	r1, r1, #9
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fe f9f2 	bl	8001184 <HAL_GetTick>
 8002da0:	0003      	movs	r3, r0
 8002da2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da6:	f7fe f9ed 	bl	8001184 <HAL_GetTick>
 8002daa:	0002      	movs	r2, r0
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0cd      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002db8:	4b45      	ldr	r3, [pc, #276]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	025b      	lsls	r3, r3, #9
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x552>
 8002dc4:	e01b      	b.n	8002dfe <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002dc6:	4b42      	ldr	r3, [pc, #264]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dca:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002dcc:	4943      	ldr	r1, [pc, #268]	; (8002edc <HAL_RCC_OscConfig+0x688>)
 8002dce:	400a      	ands	r2, r1
 8002dd0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd2:	f7fe f9d7 	bl	8001184 <HAL_GetTick>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ddc:	f7fe f9d2 	bl	8001184 <HAL_GetTick>
 8002de0:	0002      	movs	r2, r0
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e0b2      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002dee:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	025b      	lsls	r3, r3, #9
 8002df6:	4013      	ands	r3, r2
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x588>
 8002dfa:	e000      	b.n	8002dfe <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002dfc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d100      	bne.n	8002e08 <HAL_RCC_OscConfig+0x5b4>
 8002e06:	e0a4      	b.n	8002f52 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e08:	4b31      	ldr	r3, [pc, #196]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	220c      	movs	r2, #12
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d100      	bne.n	8002e16 <HAL_RCC_OscConfig+0x5c2>
 8002e14:	e078      	b.n	8002f08 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d14c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4b2b      	ldr	r3, [pc, #172]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002e24:	492e      	ldr	r1, [pc, #184]	; (8002ee0 <HAL_RCC_OscConfig+0x68c>)
 8002e26:	400a      	ands	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2a:	f7fe f9ab 	bl	8001184 <HAL_GetTick>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e34:	f7fe f9a6 	bl	8001184 <HAL_GetTick>
 8002e38:	0002      	movs	r2, r0
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e086      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e46:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	049b      	lsls	r3, r3, #18
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e52:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	220f      	movs	r2, #15
 8002e58:	4393      	bics	r3, r2
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e60:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002e62:	430a      	orrs	r2, r1
 8002e64:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e66:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ee4 <HAL_RCC_OscConfig+0x690>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	0019      	movs	r1, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e80:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002e86:	2180      	movs	r1, #128	; 0x80
 8002e88:	0449      	lsls	r1, r1, #17
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7fe f979 	bl	8001184 <HAL_GetTick>
 8002e92:	0003      	movs	r3, r0
 8002e94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fe f974 	bl	8001184 <HAL_GetTick>
 8002e9c:	0002      	movs	r2, r0
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e054      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	049b      	lsls	r3, r3, #18
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x644>
 8002eb6:	e04c      	b.n	8002f52 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <HAL_RCC_OscConfig+0x67c>)
 8002ebe:	4908      	ldr	r1, [pc, #32]	; (8002ee0 <HAL_RCC_OscConfig+0x68c>)
 8002ec0:	400a      	ands	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe f95e 	bl	8001184 <HAL_GetTick>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ecc:	e015      	b.n	8002efa <HAL_RCC_OscConfig+0x6a6>
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	00001388 	.word	0x00001388
 8002ed8:	efffffff 	.word	0xefffffff
 8002edc:	fffeffff 	.word	0xfffeffff
 8002ee0:	feffffff 	.word	0xfeffffff
 8002ee4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7fe f94c 	bl	8001184 <HAL_GetTick>
 8002eec:	0002      	movs	r2, r0
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e02c      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002efa:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <HAL_RCC_OscConfig+0x708>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	2380      	movs	r3, #128	; 0x80
 8002f00:	049b      	lsls	r3, r3, #18
 8002f02:	4013      	ands	r3, r2
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x694>
 8002f06:	e024      	b.n	8002f52 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e01f      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <HAL_RCC_OscConfig+0x708>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <HAL_RCC_OscConfig+0x708>)
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	23c0      	movs	r3, #192	; 0xc0
 8002f24:	025b      	lsls	r3, r3, #9
 8002f26:	401a      	ands	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d10e      	bne.n	8002f4e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	220f      	movs	r2, #15
 8002f34:	401a      	ands	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	23f0      	movs	r3, #240	; 0xf0
 8002f42:	039b      	lsls	r3, r3, #14
 8002f44:	401a      	ands	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d001      	beq.n	8002f52 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b008      	add	sp, #32
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40021000 	.word	0x40021000

08002f60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0bf      	b.n	80030f4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f74:	4b61      	ldr	r3, [pc, #388]	; (80030fc <HAL_RCC_ClockConfig+0x19c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d911      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b5e      	ldr	r3, [pc, #376]	; (80030fc <HAL_RCC_ClockConfig+0x19c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2201      	movs	r2, #1
 8002f88:	4393      	bics	r3, r2
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	4b5b      	ldr	r3, [pc, #364]	; (80030fc <HAL_RCC_ClockConfig+0x19c>)
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f94:	4b59      	ldr	r3, [pc, #356]	; (80030fc <HAL_RCC_ClockConfig+0x19c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d001      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e0a6      	b.n	80030f4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2202      	movs	r2, #2
 8002fac:	4013      	ands	r3, r2
 8002fae:	d015      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d006      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002fba:	4b51      	ldr	r3, [pc, #324]	; (8003100 <HAL_RCC_ClockConfig+0x1a0>)
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	4b50      	ldr	r3, [pc, #320]	; (8003100 <HAL_RCC_ClockConfig+0x1a0>)
 8002fc0:	21e0      	movs	r1, #224	; 0xe0
 8002fc2:	00c9      	lsls	r1, r1, #3
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc8:	4b4d      	ldr	r3, [pc, #308]	; (8003100 <HAL_RCC_ClockConfig+0x1a0>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	22f0      	movs	r2, #240	; 0xf0
 8002fce:	4393      	bics	r3, r2
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	4b4a      	ldr	r3, [pc, #296]	; (8003100 <HAL_RCC_ClockConfig+0x1a0>)
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d04c      	beq.n	8003080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	4b44      	ldr	r3, [pc, #272]	; (8003100 <HAL_RCC_ClockConfig+0x1a0>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	029b      	lsls	r3, r3, #10
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d120      	bne.n	800303c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e07a      	b.n	80030f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d107      	bne.n	8003016 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003006:	4b3e      	ldr	r3, [pc, #248]	; (8003100 <HAL_RCC_ClockConfig+0x1a0>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	049b      	lsls	r3, r3, #18
 800300e:	4013      	ands	r3, r2
 8003010:	d114      	bne.n	800303c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e06e      	b.n	80030f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b03      	cmp	r3, #3
 800301c:	d107      	bne.n	800302e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800301e:	4b38      	ldr	r3, [pc, #224]	; (8003100 <HAL_RCC_ClockConfig+0x1a0>)
 8003020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	025b      	lsls	r3, r3, #9
 8003026:	4013      	ands	r3, r2
 8003028:	d108      	bne.n	800303c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e062      	b.n	80030f4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302e:	4b34      	ldr	r3, [pc, #208]	; (8003100 <HAL_RCC_ClockConfig+0x1a0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2202      	movs	r2, #2
 8003034:	4013      	ands	r3, r2
 8003036:	d101      	bne.n	800303c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e05b      	b.n	80030f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800303c:	4b30      	ldr	r3, [pc, #192]	; (8003100 <HAL_RCC_ClockConfig+0x1a0>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2203      	movs	r2, #3
 8003042:	4393      	bics	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	4b2d      	ldr	r3, [pc, #180]	; (8003100 <HAL_RCC_ClockConfig+0x1a0>)
 800304c:	430a      	orrs	r2, r1
 800304e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003050:	f7fe f898 	bl	8001184 <HAL_GetTick>
 8003054:	0003      	movs	r3, r0
 8003056:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003058:	e009      	b.n	800306e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305a:	f7fe f893 	bl	8001184 <HAL_GetTick>
 800305e:	0002      	movs	r2, r0
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	4a27      	ldr	r2, [pc, #156]	; (8003104 <HAL_RCC_ClockConfig+0x1a4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e042      	b.n	80030f4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306e:	4b24      	ldr	r3, [pc, #144]	; (8003100 <HAL_RCC_ClockConfig+0x1a0>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	220c      	movs	r2, #12
 8003074:	401a      	ands	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	429a      	cmp	r2, r3
 800307e:	d1ec      	bne.n	800305a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003080:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <HAL_RCC_ClockConfig+0x19c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2201      	movs	r2, #1
 8003086:	4013      	ands	r3, r2
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d211      	bcs.n	80030b2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <HAL_RCC_ClockConfig+0x19c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2201      	movs	r2, #1
 8003094:	4393      	bics	r3, r2
 8003096:	0019      	movs	r1, r3
 8003098:	4b18      	ldr	r3, [pc, #96]	; (80030fc <HAL_RCC_ClockConfig+0x19c>)
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a0:	4b16      	ldr	r3, [pc, #88]	; (80030fc <HAL_RCC_ClockConfig+0x19c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2201      	movs	r2, #1
 80030a6:	4013      	ands	r3, r2
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d001      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e020      	b.n	80030f4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2204      	movs	r2, #4
 80030b8:	4013      	ands	r3, r2
 80030ba:	d009      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030bc:	4b10      	ldr	r3, [pc, #64]	; (8003100 <HAL_RCC_ClockConfig+0x1a0>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a11      	ldr	r2, [pc, #68]	; (8003108 <HAL_RCC_ClockConfig+0x1a8>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <HAL_RCC_ClockConfig+0x1a0>)
 80030cc:	430a      	orrs	r2, r1
 80030ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030d0:	f000 f820 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80030d4:	0001      	movs	r1, r0
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <HAL_RCC_ClockConfig+0x1a0>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	091b      	lsrs	r3, r3, #4
 80030dc:	220f      	movs	r2, #15
 80030de:	4013      	ands	r3, r2
 80030e0:	4a0a      	ldr	r2, [pc, #40]	; (800310c <HAL_RCC_ClockConfig+0x1ac>)
 80030e2:	5cd3      	ldrb	r3, [r2, r3]
 80030e4:	000a      	movs	r2, r1
 80030e6:	40da      	lsrs	r2, r3
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_RCC_ClockConfig+0x1b0>)
 80030ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80030ec:	2000      	movs	r0, #0
 80030ee:	f7fe f803 	bl	80010f8 <HAL_InitTick>
  
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	0018      	movs	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b004      	add	sp, #16
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40022000 	.word	0x40022000
 8003100:	40021000 	.word	0x40021000
 8003104:	00001388 	.word	0x00001388
 8003108:	fffff8ff 	.word	0xfffff8ff
 800310c:	08004b64 	.word	0x08004b64
 8003110:	20000804 	.word	0x20000804

08003114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b08f      	sub	sp, #60	; 0x3c
 8003118:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800311a:	2314      	movs	r3, #20
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	4a37      	ldr	r2, [pc, #220]	; (80031fc <HAL_RCC_GetSysClockFreq+0xe8>)
 8003120:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003122:	c313      	stmia	r3!, {r0, r1, r4}
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003128:	1d3b      	adds	r3, r7, #4
 800312a:	4a35      	ldr	r2, [pc, #212]	; (8003200 <HAL_RCC_GetSysClockFreq+0xec>)
 800312c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800312e:	c313      	stmia	r3!, {r0, r1, r4}
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003138:	2300      	movs	r3, #0
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28
 800313c:	2300      	movs	r3, #0
 800313e:	637b      	str	r3, [r7, #52]	; 0x34
 8003140:	2300      	movs	r3, #0
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003148:	4b2e      	ldr	r3, [pc, #184]	; (8003204 <HAL_RCC_GetSysClockFreq+0xf0>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	220c      	movs	r2, #12
 8003152:	4013      	ands	r3, r2
 8003154:	2b08      	cmp	r3, #8
 8003156:	d006      	beq.n	8003166 <HAL_RCC_GetSysClockFreq+0x52>
 8003158:	2b0c      	cmp	r3, #12
 800315a:	d043      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0xd0>
 800315c:	2b04      	cmp	r3, #4
 800315e:	d144      	bne.n	80031ea <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003160:	4b29      	ldr	r3, [pc, #164]	; (8003208 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003162:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003164:	e044      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003168:	0c9b      	lsrs	r3, r3, #18
 800316a:	220f      	movs	r2, #15
 800316c:	4013      	ands	r3, r2
 800316e:	2214      	movs	r2, #20
 8003170:	18ba      	adds	r2, r7, r2
 8003172:	5cd3      	ldrb	r3, [r2, r3]
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003176:	4b23      	ldr	r3, [pc, #140]	; (8003204 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	220f      	movs	r2, #15
 800317c:	4013      	ands	r3, r2
 800317e:	1d3a      	adds	r2, r7, #4
 8003180:	5cd3      	ldrb	r3, [r2, r3]
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003186:	23c0      	movs	r3, #192	; 0xc0
 8003188:	025b      	lsls	r3, r3, #9
 800318a:	401a      	ands	r2, r3
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	025b      	lsls	r3, r3, #9
 8003190:	429a      	cmp	r2, r3
 8003192:	d109      	bne.n	80031a8 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003196:	481c      	ldr	r0, [pc, #112]	; (8003208 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003198:	f7fc ffb6 	bl	8000108 <__udivsi3>
 800319c:	0003      	movs	r3, r0
 800319e:	001a      	movs	r2, r3
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	4353      	muls	r3, r2
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
 80031a6:	e01a      	b.n	80031de <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80031a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031aa:	23c0      	movs	r3, #192	; 0xc0
 80031ac:	025b      	lsls	r3, r3, #9
 80031ae:	401a      	ands	r2, r3
 80031b0:	23c0      	movs	r3, #192	; 0xc0
 80031b2:	025b      	lsls	r3, r3, #9
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d109      	bne.n	80031cc <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ba:	4814      	ldr	r0, [pc, #80]	; (800320c <HAL_RCC_GetSysClockFreq+0xf8>)
 80031bc:	f7fc ffa4 	bl	8000108 <__udivsi3>
 80031c0:	0003      	movs	r3, r0
 80031c2:	001a      	movs	r2, r3
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	4353      	muls	r3, r2
 80031c8:	637b      	str	r3, [r7, #52]	; 0x34
 80031ca:	e008      	b.n	80031de <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ce:	480e      	ldr	r0, [pc, #56]	; (8003208 <HAL_RCC_GetSysClockFreq+0xf4>)
 80031d0:	f7fc ff9a 	bl	8000108 <__udivsi3>
 80031d4:	0003      	movs	r3, r0
 80031d6:	001a      	movs	r2, r3
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	4353      	muls	r3, r2
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80031de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031e2:	e005      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80031e4:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_RCC_GetSysClockFreq+0xf8>)
 80031e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031e8:	e002      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031ea:	4b07      	ldr	r3, [pc, #28]	; (8003208 <HAL_RCC_GetSysClockFreq+0xf4>)
 80031ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031ee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80031f2:	0018      	movs	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b00f      	add	sp, #60	; 0x3c
 80031f8:	bd90      	pop	{r4, r7, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	08004b44 	.word	0x08004b44
 8003200:	08004b54 	.word	0x08004b54
 8003204:	40021000 	.word	0x40021000
 8003208:	007a1200 	.word	0x007a1200
 800320c:	02dc6c00 	.word	0x02dc6c00

08003210 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	2380      	movs	r3, #128	; 0x80
 8003226:	025b      	lsls	r3, r3, #9
 8003228:	4013      	ands	r3, r2
 800322a:	d100      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800322c:	e08f      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800322e:	2317      	movs	r3, #23
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003236:	4b6f      	ldr	r3, [pc, #444]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003238:	69da      	ldr	r2, [r3, #28]
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	055b      	lsls	r3, r3, #21
 800323e:	4013      	ands	r3, r2
 8003240:	d111      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	4b6c      	ldr	r3, [pc, #432]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003244:	69da      	ldr	r2, [r3, #28]
 8003246:	4b6b      	ldr	r3, [pc, #428]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003248:	2180      	movs	r1, #128	; 0x80
 800324a:	0549      	lsls	r1, r1, #21
 800324c:	430a      	orrs	r2, r1
 800324e:	61da      	str	r2, [r3, #28]
 8003250:	4b68      	ldr	r3, [pc, #416]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	055b      	lsls	r3, r3, #21
 8003258:	4013      	ands	r3, r2
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325e:	2317      	movs	r3, #23
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003266:	4b64      	ldr	r3, [pc, #400]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4013      	ands	r3, r2
 8003270:	d11a      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003272:	4b61      	ldr	r3, [pc, #388]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	4b60      	ldr	r3, [pc, #384]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003278:	2180      	movs	r1, #128	; 0x80
 800327a:	0049      	lsls	r1, r1, #1
 800327c:	430a      	orrs	r2, r1
 800327e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003280:	f7fd ff80 	bl	8001184 <HAL_GetTick>
 8003284:	0003      	movs	r3, r0
 8003286:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	e008      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328a:	f7fd ff7b 	bl	8001184 <HAL_GetTick>
 800328e:	0002      	movs	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b64      	cmp	r3, #100	; 0x64
 8003296:	d901      	bls.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e0a6      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	4b56      	ldr	r3, [pc, #344]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4013      	ands	r3, r2
 80032a6:	d0f0      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032a8:	4b52      	ldr	r3, [pc, #328]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032aa:	6a1a      	ldr	r2, [r3, #32]
 80032ac:	23c0      	movs	r3, #192	; 0xc0
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4013      	ands	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d034      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	23c0      	movs	r3, #192	; 0xc0
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4013      	ands	r3, r2
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d02c      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032ca:	4b4a      	ldr	r3, [pc, #296]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	4a4b      	ldr	r2, [pc, #300]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032d4:	4b47      	ldr	r3, [pc, #284]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032d6:	6a1a      	ldr	r2, [r3, #32]
 80032d8:	4b46      	ldr	r3, [pc, #280]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032da:	2180      	movs	r1, #128	; 0x80
 80032dc:	0249      	lsls	r1, r1, #9
 80032de:	430a      	orrs	r2, r1
 80032e0:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032e2:	4b44      	ldr	r3, [pc, #272]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032e4:	6a1a      	ldr	r2, [r3, #32]
 80032e6:	4b43      	ldr	r3, [pc, #268]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032e8:	4945      	ldr	r1, [pc, #276]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80032ea:	400a      	ands	r2, r1
 80032ec:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032ee:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	4013      	ands	r3, r2
 80032fa:	d013      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7fd ff42 	bl	8001184 <HAL_GetTick>
 8003300:	0003      	movs	r3, r0
 8003302:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003304:	e009      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003306:	f7fd ff3d 	bl	8001184 <HAL_GetTick>
 800330a:	0002      	movs	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	4a3c      	ldr	r2, [pc, #240]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e067      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331a:	4b36      	ldr	r3, [pc, #216]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	2202      	movs	r2, #2
 8003320:	4013      	ands	r3, r2
 8003322:	d0f0      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003324:	4b33      	ldr	r3, [pc, #204]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	4a34      	ldr	r2, [pc, #208]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800332a:	4013      	ands	r3, r2
 800332c:	0019      	movs	r1, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003334:	430a      	orrs	r2, r1
 8003336:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003338:	2317      	movs	r3, #23
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d105      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003342:	4b2c      	ldr	r3, [pc, #176]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003344:	69da      	ldr	r2, [r3, #28]
 8003346:	4b2b      	ldr	r3, [pc, #172]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003348:	492f      	ldr	r1, [pc, #188]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800334a:	400a      	ands	r2, r1
 800334c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2201      	movs	r2, #1
 8003354:	4013      	ands	r3, r2
 8003356:	d009      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003358:	4b26      	ldr	r3, [pc, #152]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	2203      	movs	r2, #3
 800335e:	4393      	bics	r3, r2
 8003360:	0019      	movs	r1, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	4b23      	ldr	r3, [pc, #140]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003368:	430a      	orrs	r2, r1
 800336a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2202      	movs	r2, #2
 8003372:	4013      	ands	r3, r2
 8003374:	d009      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003376:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	4a24      	ldr	r2, [pc, #144]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800337c:	4013      	ands	r3, r2
 800337e:	0019      	movs	r1, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003386:	430a      	orrs	r2, r1
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2220      	movs	r2, #32
 8003390:	4013      	ands	r3, r2
 8003392:	d009      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003394:	4b17      	ldr	r3, [pc, #92]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	2210      	movs	r2, #16
 800339a:	4393      	bics	r3, r2
 800339c:	0019      	movs	r1, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691a      	ldr	r2, [r3, #16]
 80033a2:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80033a4:	430a      	orrs	r2, r1
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	2380      	movs	r3, #128	; 0x80
 80033ae:	029b      	lsls	r3, r3, #10
 80033b0:	4013      	ands	r3, r2
 80033b2:	d009      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	2280      	movs	r2, #128	; 0x80
 80033ba:	4393      	bics	r3, r2
 80033bc:	0019      	movs	r1, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80033c4:	430a      	orrs	r2, r1
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4013      	ands	r3, r2
 80033d2:	d009      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033d4:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	2240      	movs	r2, #64	; 0x40
 80033da:	4393      	bics	r3, r2
 80033dc:	0019      	movs	r1, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80033e4:	430a      	orrs	r2, r1
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	0018      	movs	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b006      	add	sp, #24
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40007000 	.word	0x40007000
 80033fc:	fffffcff 	.word	0xfffffcff
 8003400:	fffeffff 	.word	0xfffeffff
 8003404:	00001388 	.word	0x00001388
 8003408:	efffffff 	.word	0xefffffff
 800340c:	fffcffff 	.word	0xfffcffff

08003410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e01e      	b.n	8003460 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	223d      	movs	r2, #61	; 0x3d
 8003426:	5c9b      	ldrb	r3, [r3, r2]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d107      	bne.n	800343e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	223c      	movs	r2, #60	; 0x3c
 8003432:	2100      	movs	r1, #0
 8003434:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	0018      	movs	r0, r3
 800343a:	f7fd fdb9 	bl	8000fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	223d      	movs	r2, #61	; 0x3d
 8003442:	2102      	movs	r1, #2
 8003444:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3304      	adds	r3, #4
 800344e:	0019      	movs	r1, r3
 8003450:	0010      	movs	r0, r2
 8003452:	f000 fadd 	bl	8003a10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	223d      	movs	r2, #61	; 0x3d
 800345a:	2101      	movs	r1, #1
 800345c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	0018      	movs	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	b002      	add	sp, #8
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	223d      	movs	r2, #61	; 0x3d
 8003474:	2102      	movs	r1, #2
 8003476:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2207      	movs	r2, #7
 8003480:	4013      	ands	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b06      	cmp	r3, #6
 8003488:	d007      	beq.n	800349a <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2101      	movs	r1, #1
 8003496:	430a      	orrs	r2, r1
 8003498:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	223d      	movs	r2, #61	; 0x3d
 800349e:	2101      	movs	r1, #1
 80034a0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	0018      	movs	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b004      	add	sp, #16
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2101      	movs	r1, #1
 80034c0:	430a      	orrs	r2, r1
 80034c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2207      	movs	r2, #7
 80034cc:	4013      	ands	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b06      	cmp	r3, #6
 80034d4:	d007      	beq.n	80034e6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2101      	movs	r1, #1
 80034e2:	430a      	orrs	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	0018      	movs	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b004      	add	sp, #16
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e07c      	b.n	80035fe <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	223d      	movs	r2, #61	; 0x3d
 8003508:	5c9b      	ldrb	r3, [r3, r2]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d107      	bne.n	8003520 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	223c      	movs	r2, #60	; 0x3c
 8003514:	2100      	movs	r1, #0
 8003516:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	0018      	movs	r0, r3
 800351c:	f7fd fcc6 	bl	8000eac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	223d      	movs	r2, #61	; 0x3d
 8003524:	2102      	movs	r1, #2
 8003526:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4935      	ldr	r1, [pc, #212]	; (8003608 <HAL_TIM_Encoder_Init+0x118>)
 8003534:	400a      	ands	r2, r1
 8003536:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3304      	adds	r3, #4
 8003540:	0019      	movs	r1, r3
 8003542:	0010      	movs	r0, r2
 8003544:	f000 fa64 	bl	8003a10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4a27      	ldr	r2, [pc, #156]	; (800360c <HAL_TIM_Encoder_Init+0x11c>)
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	4313      	orrs	r3, r2
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4a22      	ldr	r2, [pc, #136]	; (8003610 <HAL_TIM_Encoder_Init+0x120>)
 8003588:	4013      	ands	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4a21      	ldr	r2, [pc, #132]	; (8003614 <HAL_TIM_Encoder_Init+0x124>)
 8003590:	4013      	ands	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	4313      	orrs	r3, r2
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	011a      	lsls	r2, r3, #4
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	031b      	lsls	r3, r3, #12
 80035b2:	4313      	orrs	r3, r2
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2222      	movs	r2, #34	; 0x22
 80035be:	4393      	bics	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2288      	movs	r2, #136	; 0x88
 80035c6:	4393      	bics	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	4313      	orrs	r3, r2
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	223d      	movs	r2, #61	; 0x3d
 80035f8:	2101      	movs	r1, #1
 80035fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	0018      	movs	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	b006      	add	sp, #24
 8003604:	bd80      	pop	{r7, pc}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	ffffbff8 	.word	0xffffbff8
 800360c:	fffffcfc 	.word	0xfffffcfc
 8003610:	fffff3f3 	.word	0xfffff3f3
 8003614:	ffff0f0f 	.word	0xffff0f0f

08003618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2202      	movs	r2, #2
 8003628:	4013      	ands	r3, r2
 800362a:	2b02      	cmp	r3, #2
 800362c:	d124      	bne.n	8003678 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2202      	movs	r2, #2
 8003636:	4013      	ands	r3, r2
 8003638:	2b02      	cmp	r3, #2
 800363a:	d11d      	bne.n	8003678 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2203      	movs	r2, #3
 8003642:	4252      	negs	r2, r2
 8003644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2203      	movs	r2, #3
 8003654:	4013      	ands	r3, r2
 8003656:	d004      	beq.n	8003662 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	0018      	movs	r0, r3
 800365c:	f000 f9c0 	bl	80039e0 <HAL_TIM_IC_CaptureCallback>
 8003660:	e007      	b.n	8003672 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	0018      	movs	r0, r3
 8003666:	f000 f9b3 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	0018      	movs	r0, r3
 800366e:	f000 f9bf 	bl	80039f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2204      	movs	r2, #4
 8003680:	4013      	ands	r3, r2
 8003682:	2b04      	cmp	r3, #4
 8003684:	d125      	bne.n	80036d2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2204      	movs	r2, #4
 800368e:	4013      	ands	r3, r2
 8003690:	2b04      	cmp	r3, #4
 8003692:	d11e      	bne.n	80036d2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2205      	movs	r2, #5
 800369a:	4252      	negs	r2, r2
 800369c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2202      	movs	r2, #2
 80036a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	23c0      	movs	r3, #192	; 0xc0
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4013      	ands	r3, r2
 80036b0:	d004      	beq.n	80036bc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	0018      	movs	r0, r3
 80036b6:	f000 f993 	bl	80039e0 <HAL_TIM_IC_CaptureCallback>
 80036ba:	e007      	b.n	80036cc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	0018      	movs	r0, r3
 80036c0:	f000 f986 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 f992 	bl	80039f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2208      	movs	r2, #8
 80036da:	4013      	ands	r3, r2
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d124      	bne.n	800372a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	2208      	movs	r2, #8
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d11d      	bne.n	800372a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2209      	movs	r2, #9
 80036f4:	4252      	negs	r2, r2
 80036f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2204      	movs	r2, #4
 80036fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	2203      	movs	r2, #3
 8003706:	4013      	ands	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	0018      	movs	r0, r3
 800370e:	f000 f967 	bl	80039e0 <HAL_TIM_IC_CaptureCallback>
 8003712:	e007      	b.n	8003724 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	0018      	movs	r0, r3
 8003718:	f000 f95a 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	0018      	movs	r0, r3
 8003720:	f000 f966 	bl	80039f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	2210      	movs	r2, #16
 8003732:	4013      	ands	r3, r2
 8003734:	2b10      	cmp	r3, #16
 8003736:	d125      	bne.n	8003784 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2210      	movs	r2, #16
 8003740:	4013      	ands	r3, r2
 8003742:	2b10      	cmp	r3, #16
 8003744:	d11e      	bne.n	8003784 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2211      	movs	r2, #17
 800374c:	4252      	negs	r2, r2
 800374e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2208      	movs	r2, #8
 8003754:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69da      	ldr	r2, [r3, #28]
 800375c:	23c0      	movs	r3, #192	; 0xc0
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4013      	ands	r3, r2
 8003762:	d004      	beq.n	800376e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	0018      	movs	r0, r3
 8003768:	f000 f93a 	bl	80039e0 <HAL_TIM_IC_CaptureCallback>
 800376c:	e007      	b.n	800377e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	0018      	movs	r0, r3
 8003772:	f000 f92d 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	0018      	movs	r0, r3
 800377a:	f000 f939 	bl	80039f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2201      	movs	r2, #1
 800378c:	4013      	ands	r3, r2
 800378e:	2b01      	cmp	r3, #1
 8003790:	d10f      	bne.n	80037b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	4013      	ands	r3, r2
 800379c:	2b01      	cmp	r3, #1
 800379e:	d108      	bne.n	80037b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2202      	movs	r2, #2
 80037a6:	4252      	negs	r2, r2
 80037a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	0018      	movs	r0, r3
 80037ae:	f000 f907 	bl	80039c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	2280      	movs	r2, #128	; 0x80
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b80      	cmp	r3, #128	; 0x80
 80037be:	d10f      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2280      	movs	r2, #128	; 0x80
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b80      	cmp	r3, #128	; 0x80
 80037cc:	d108      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2281      	movs	r2, #129	; 0x81
 80037d4:	4252      	negs	r2, r2
 80037d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	0018      	movs	r0, r3
 80037dc:	f000 fa98 	bl	8003d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2240      	movs	r2, #64	; 0x40
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b40      	cmp	r3, #64	; 0x40
 80037ec:	d10f      	bne.n	800380e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	2240      	movs	r2, #64	; 0x40
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b40      	cmp	r3, #64	; 0x40
 80037fa:	d108      	bne.n	800380e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2241      	movs	r2, #65	; 0x41
 8003802:	4252      	negs	r2, r2
 8003804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	0018      	movs	r0, r3
 800380a:	f000 f8f9 	bl	8003a00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2220      	movs	r2, #32
 8003816:	4013      	ands	r3, r2
 8003818:	2b20      	cmp	r3, #32
 800381a:	d10f      	bne.n	800383c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	4013      	ands	r3, r2
 8003826:	2b20      	cmp	r3, #32
 8003828:	d108      	bne.n	800383c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2221      	movs	r2, #33	; 0x21
 8003830:	4252      	negs	r2, r2
 8003832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	0018      	movs	r0, r3
 8003838:	f000 fa62 	bl	8003d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800383c:	46c0      	nop			; (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	b002      	add	sp, #8
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	223c      	movs	r2, #60	; 0x3c
 8003852:	5c9b      	ldrb	r3, [r3, r2]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_TIM_ConfigClockSource+0x18>
 8003858:	2302      	movs	r3, #2
 800385a:	e0ab      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x170>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	223c      	movs	r2, #60	; 0x3c
 8003860:	2101      	movs	r1, #1
 8003862:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	223d      	movs	r2, #61	; 0x3d
 8003868:	2102      	movs	r1, #2
 800386a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2277      	movs	r2, #119	; 0x77
 8003878:	4393      	bics	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4a4f      	ldr	r2, [pc, #316]	; (80039bc <HAL_TIM_ConfigClockSource+0x178>)
 8003880:	4013      	ands	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b40      	cmp	r3, #64	; 0x40
 8003892:	d100      	bne.n	8003896 <HAL_TIM_ConfigClockSource+0x52>
 8003894:	e06b      	b.n	800396e <HAL_TIM_ConfigClockSource+0x12a>
 8003896:	d80e      	bhi.n	80038b6 <HAL_TIM_ConfigClockSource+0x72>
 8003898:	2b10      	cmp	r3, #16
 800389a:	d100      	bne.n	800389e <HAL_TIM_ConfigClockSource+0x5a>
 800389c:	e077      	b.n	800398e <HAL_TIM_ConfigClockSource+0x14a>
 800389e:	d803      	bhi.n	80038a8 <HAL_TIM_ConfigClockSource+0x64>
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d100      	bne.n	80038a6 <HAL_TIM_ConfigClockSource+0x62>
 80038a4:	e073      	b.n	800398e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80038a6:	e07c      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d100      	bne.n	80038ae <HAL_TIM_ConfigClockSource+0x6a>
 80038ac:	e06f      	b.n	800398e <HAL_TIM_ConfigClockSource+0x14a>
 80038ae:	2b30      	cmp	r3, #48	; 0x30
 80038b0:	d100      	bne.n	80038b4 <HAL_TIM_ConfigClockSource+0x70>
 80038b2:	e06c      	b.n	800398e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80038b4:	e075      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80038b6:	2b70      	cmp	r3, #112	; 0x70
 80038b8:	d00e      	beq.n	80038d8 <HAL_TIM_ConfigClockSource+0x94>
 80038ba:	d804      	bhi.n	80038c6 <HAL_TIM_ConfigClockSource+0x82>
 80038bc:	2b50      	cmp	r3, #80	; 0x50
 80038be:	d036      	beq.n	800392e <HAL_TIM_ConfigClockSource+0xea>
 80038c0:	2b60      	cmp	r3, #96	; 0x60
 80038c2:	d044      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80038c4:	e06d      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80038c6:	2280      	movs	r2, #128	; 0x80
 80038c8:	0152      	lsls	r2, r2, #5
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d068      	beq.n	80039a0 <HAL_TIM_ConfigClockSource+0x15c>
 80038ce:	2280      	movs	r2, #128	; 0x80
 80038d0:	0192      	lsls	r2, r2, #6
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d017      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80038d6:	e064      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	6899      	ldr	r1, [r3, #8]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f000 f98c 	bl	8003c04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2277      	movs	r2, #119	; 0x77
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	609a      	str	r2, [r3, #8]
      break;
 8003904:	e04d      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	6899      	ldr	r1, [r3, #8]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f000 f975 	bl	8003c04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2180      	movs	r1, #128	; 0x80
 8003926:	01c9      	lsls	r1, r1, #7
 8003928:	430a      	orrs	r2, r1
 800392a:	609a      	str	r2, [r3, #8]
      break;
 800392c:	e039      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6859      	ldr	r1, [r3, #4]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	001a      	movs	r2, r3
 800393c:	f000 f8e8 	bl	8003b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2150      	movs	r1, #80	; 0x50
 8003946:	0018      	movs	r0, r3
 8003948:	f000 f942 	bl	8003bd0 <TIM_ITRx_SetConfig>
      break;
 800394c:	e029      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6859      	ldr	r1, [r3, #4]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	001a      	movs	r2, r3
 800395c:	f000 f906 	bl	8003b6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2160      	movs	r1, #96	; 0x60
 8003966:	0018      	movs	r0, r3
 8003968:	f000 f932 	bl	8003bd0 <TIM_ITRx_SetConfig>
      break;
 800396c:	e019      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6859      	ldr	r1, [r3, #4]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	001a      	movs	r2, r3
 800397c:	f000 f8c8 	bl	8003b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2140      	movs	r1, #64	; 0x40
 8003986:	0018      	movs	r0, r3
 8003988:	f000 f922 	bl	8003bd0 <TIM_ITRx_SetConfig>
      break;
 800398c:	e009      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	0019      	movs	r1, r3
 8003998:	0010      	movs	r0, r2
 800399a:	f000 f919 	bl	8003bd0 <TIM_ITRx_SetConfig>
      break;
 800399e:	e000      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80039a0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	223d      	movs	r2, #61	; 0x3d
 80039a6:	2101      	movs	r1, #1
 80039a8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	223c      	movs	r2, #60	; 0x3c
 80039ae:	2100      	movs	r1, #0
 80039b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	0018      	movs	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b004      	add	sp, #16
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	ffff00ff 	.word	0xffff00ff

080039c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b002      	add	sp, #8
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a34      	ldr	r2, [pc, #208]	; (8003af4 <TIM_Base_SetConfig+0xe4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d008      	beq.n	8003a3a <TIM_Base_SetConfig+0x2a>
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	2380      	movs	r3, #128	; 0x80
 8003a2c:	05db      	lsls	r3, r3, #23
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d003      	beq.n	8003a3a <TIM_Base_SetConfig+0x2a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a30      	ldr	r2, [pc, #192]	; (8003af8 <TIM_Base_SetConfig+0xe8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d108      	bne.n	8003a4c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2270      	movs	r2, #112	; 0x70
 8003a3e:	4393      	bics	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a29      	ldr	r2, [pc, #164]	; (8003af4 <TIM_Base_SetConfig+0xe4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d018      	beq.n	8003a86 <TIM_Base_SetConfig+0x76>
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	2380      	movs	r3, #128	; 0x80
 8003a58:	05db      	lsls	r3, r3, #23
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d013      	beq.n	8003a86 <TIM_Base_SetConfig+0x76>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a25      	ldr	r2, [pc, #148]	; (8003af8 <TIM_Base_SetConfig+0xe8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00f      	beq.n	8003a86 <TIM_Base_SetConfig+0x76>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a24      	ldr	r2, [pc, #144]	; (8003afc <TIM_Base_SetConfig+0xec>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00b      	beq.n	8003a86 <TIM_Base_SetConfig+0x76>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a23      	ldr	r2, [pc, #140]	; (8003b00 <TIM_Base_SetConfig+0xf0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d007      	beq.n	8003a86 <TIM_Base_SetConfig+0x76>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a22      	ldr	r2, [pc, #136]	; (8003b04 <TIM_Base_SetConfig+0xf4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d003      	beq.n	8003a86 <TIM_Base_SetConfig+0x76>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <TIM_Base_SetConfig+0xf8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d108      	bne.n	8003a98 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4a20      	ldr	r2, [pc, #128]	; (8003b0c <TIM_Base_SetConfig+0xfc>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2280      	movs	r2, #128	; 0x80
 8003a9c:	4393      	bics	r3, r2
 8003a9e:	001a      	movs	r2, r3
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a0c      	ldr	r2, [pc, #48]	; (8003af4 <TIM_Base_SetConfig+0xe4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <TIM_Base_SetConfig+0xce>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a0d      	ldr	r2, [pc, #52]	; (8003b00 <TIM_Base_SetConfig+0xf0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d007      	beq.n	8003ade <TIM_Base_SetConfig+0xce>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a0c      	ldr	r2, [pc, #48]	; (8003b04 <TIM_Base_SetConfig+0xf4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d003      	beq.n	8003ade <TIM_Base_SetConfig+0xce>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a0b      	ldr	r2, [pc, #44]	; (8003b08 <TIM_Base_SetConfig+0xf8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d103      	bne.n	8003ae6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	615a      	str	r2, [r3, #20]
}
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b004      	add	sp, #16
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40012c00 	.word	0x40012c00
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40002000 	.word	0x40002000
 8003b00:	40014000 	.word	0x40014000
 8003b04:	40014400 	.word	0x40014400
 8003b08:	40014800 	.word	0x40014800
 8003b0c:	fffffcff 	.word	0xfffffcff

08003b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	2201      	movs	r2, #1
 8003b28:	4393      	bics	r3, r2
 8003b2a:	001a      	movs	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	22f0      	movs	r2, #240	; 0xf0
 8003b3a:	4393      	bics	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	220a      	movs	r2, #10
 8003b4c:	4393      	bics	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	621a      	str	r2, [r3, #32]
}
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b006      	add	sp, #24
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	2210      	movs	r2, #16
 8003b7e:	4393      	bics	r3, r2
 8003b80:	001a      	movs	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	4a0d      	ldr	r2, [pc, #52]	; (8003bcc <TIM_TI2_ConfigInputStage+0x60>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	031b      	lsls	r3, r3, #12
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	22a0      	movs	r2, #160	; 0xa0
 8003ba8:	4393      	bics	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	621a      	str	r2, [r3, #32]
}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b006      	add	sp, #24
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	ffff0fff 	.word	0xffff0fff

08003bd0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2270      	movs	r2, #112	; 0x70
 8003be4:	4393      	bics	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	2207      	movs	r2, #7
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	609a      	str	r2, [r3, #8]
}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b004      	add	sp, #16
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <TIM_ETR_SetConfig+0x3c>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	021a      	lsls	r2, r3, #8
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	609a      	str	r2, [r3, #8]
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b006      	add	sp, #24
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	ffff00ff 	.word	0xffff00ff

08003c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	223c      	movs	r2, #60	; 0x3c
 8003c52:	5c9b      	ldrb	r3, [r3, r2]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e047      	b.n	8003cec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	223c      	movs	r2, #60	; 0x3c
 8003c60:	2101      	movs	r1, #1
 8003c62:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	223d      	movs	r2, #61	; 0x3d
 8003c68:	2102      	movs	r1, #2
 8003c6a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2270      	movs	r2, #112	; 0x70
 8003c80:	4393      	bics	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a16      	ldr	r2, [pc, #88]	; (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00f      	beq.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	05db      	lsls	r3, r3, #23
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d009      	beq.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a11      	ldr	r2, [pc, #68]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d004      	beq.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a10      	ldr	r2, [pc, #64]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d10c      	bne.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2280      	movs	r2, #128	; 0x80
 8003cc4:	4393      	bics	r3, r2
 8003cc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	223d      	movs	r2, #61	; 0x3d
 8003cde:	2101      	movs	r1, #1
 8003ce0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	223c      	movs	r2, #60	; 0x3c
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b004      	add	sp, #16
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40014000 	.word	0x40014000

08003d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d08:	46c0      	nop			; (mov r8, r8)
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d18:	46c0      	nop			; (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b002      	add	sp, #8
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <ssd1306_SetI2CAddress>:

uint16_t SSD1306_I2C_ADDR = 0x3D;


void ssd1306_SetI2CAddress(uint16_t addr)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	0002      	movs	r2, r0
 8003d28:	1dbb      	adds	r3, r7, #6
 8003d2a:	801a      	strh	r2, [r3, #0]
	if(addr == 0x3D)
 8003d2c:	1dbb      	adds	r3, r7, #6
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	2b3d      	cmp	r3, #61	; 0x3d
 8003d32:	d106      	bne.n	8003d42 <ssd1306_SetI2CAddress+0x22>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	019b      	lsls	r3, r3, #6
 8003d38:	4806      	ldr	r0, [pc, #24]	; (8003d54 <ssd1306_SetI2CAddress+0x34>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	0019      	movs	r1, r3
 8003d3e:	f7fd fff3 	bl	8001d28 <HAL_GPIO_WritePin>

	SSD1306_I2C_ADDR = addr;
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <ssd1306_SetI2CAddress+0x38>)
 8003d44:	1dba      	adds	r2, r7, #6
 8003d46:	8812      	ldrh	r2, [r2, #0]
 8003d48:	801a      	strh	r2, [r3, #0]
}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b002      	add	sp, #8
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	48000c00 	.word	0x48000c00
 8003d58:	2000080e 	.word	0x2000080e

08003d5c <ssd1306_Reset>:

void ssd1306_Reset(void) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0

	//HAL_I2C_ClearBusyFlagErrata_2_14_7(&hi2c1);
	/* for I2C - do nothing */
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <ssd1306_WriteCommand>:


// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003d68:	b5b0      	push	{r4, r5, r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af04      	add	r7, sp, #16
 8003d6e:	0002      	movs	r2, r0
 8003d70:	1dfb      	adds	r3, r7, #7
 8003d72:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret =  HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR << 1, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <ssd1306_WriteCommand+0x54>)
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	18db      	adds	r3, r3, r3
 8003d7a:	b299      	uxth	r1, r3
 8003d7c:	250f      	movs	r5, #15
 8003d7e:	197c      	adds	r4, r7, r5
 8003d80:	480f      	ldr	r0, [pc, #60]	; (8003dc0 <ssd1306_WriteCommand+0x58>)
 8003d82:	2301      	movs	r3, #1
 8003d84:	425b      	negs	r3, r3
 8003d86:	9302      	str	r3, [sp, #8]
 8003d88:	2301      	movs	r3, #1
 8003d8a:	9301      	str	r3, [sp, #4]
 8003d8c:	1dfb      	adds	r3, r7, #7
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	2301      	movs	r3, #1
 8003d92:	2200      	movs	r2, #0
 8003d94:	f7fe f8a2 	bl	8001edc <HAL_I2C_Mem_Write>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	7023      	strb	r3, [r4, #0]
	if(ret == HAL_ERROR)
 8003d9c:	197b      	adds	r3, r7, r5
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d106      	bne.n	8003db2 <ssd1306_WriteCommand+0x4a>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	019b      	lsls	r3, r3, #6
 8003da8:	4806      	ldr	r0, [pc, #24]	; (8003dc4 <ssd1306_WriteCommand+0x5c>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	0019      	movs	r1, r3
 8003dae:	f7fd ffbb 	bl	8001d28 <HAL_GPIO_WritePin>
	}

		//HAL_I2C_ClearBusyFlagErrata_2_14_7(&hi2c1);
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
	//printf("ssd1306_WriteCommand %d Status: %d\n", byte, ret);
}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b004      	add	sp, #16
 8003db8:	bdb0      	pop	{r4, r5, r7, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	2000080e 	.word	0x2000080e
 8003dc0:	20000d58 	.word	0x20000d58
 8003dc4:	48000c00 	.word	0x48000c00

08003dc8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003dc8:	b5b0      	push	{r4, r5, r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af04      	add	r7, sp, #16
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret =  HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR << 1, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003dd2:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <ssd1306_WriteData+0x54>)
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	18db      	adds	r3, r3, r3
 8003dd8:	b299      	uxth	r1, r3
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	250f      	movs	r5, #15
 8003de0:	197c      	adds	r4, r7, r5
 8003de2:	480f      	ldr	r0, [pc, #60]	; (8003e20 <ssd1306_WriteData+0x58>)
 8003de4:	2201      	movs	r2, #1
 8003de6:	4252      	negs	r2, r2
 8003de8:	9202      	str	r2, [sp, #8]
 8003dea:	9301      	str	r3, [sp, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	2301      	movs	r3, #1
 8003df2:	2240      	movs	r2, #64	; 0x40
 8003df4:	f7fe f872 	bl	8001edc <HAL_I2C_Mem_Write>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	7023      	strb	r3, [r4, #0]
	if(ret == HAL_ERROR)
 8003dfc:	197b      	adds	r3, r7, r5
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d106      	bne.n	8003e12 <ssd1306_WriteData+0x4a>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	019b      	lsls	r3, r3, #6
 8003e08:	4806      	ldr	r0, [pc, #24]	; (8003e24 <ssd1306_WriteData+0x5c>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	0019      	movs	r1, r3
 8003e0e:	f7fd ff8b 	bl	8001d28 <HAL_GPIO_WritePin>

		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b004      	add	sp, #16
 8003e18:	bdb0      	pop	{r4, r5, r7, pc}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	2000080e 	.word	0x2000080e
 8003e20:	20000d58 	.word	0x20000d58
 8003e24:	48000c00 	.word	0x48000c00

08003e28 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8003e2c:	f7ff ff96 	bl	8003d5c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003e30:	2064      	movs	r0, #100	; 0x64
 8003e32:	f7fd f9b1 	bl	8001198 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8003e36:	20ae      	movs	r0, #174	; 0xae
 8003e38:	f7ff ff96 	bl	8003d68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003e3c:	2020      	movs	r0, #32
 8003e3e:	f7ff ff93 	bl	8003d68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 8003e42:	2010      	movs	r0, #16
 8003e44:	f7ff ff90 	bl	8003d68 <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003e48:	20b0      	movs	r0, #176	; 0xb0
 8003e4a:	f7ff ff8d 	bl	8003d68 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8003e4e:	20c0      	movs	r0, #192	; 0xc0
 8003e50:	f7ff ff8a 	bl	8003d68 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003e54:	2000      	movs	r0, #0
 8003e56:	f7ff ff87 	bl	8003d68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003e5a:	2010      	movs	r0, #16
 8003e5c:	f7ff ff84 	bl	8003d68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003e60:	2040      	movs	r0, #64	; 0x40
 8003e62:	f7ff ff81 	bl	8003d68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8003e66:	2081      	movs	r0, #129	; 0x81
 8003e68:	f7ff ff7e 	bl	8003d68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8003e6c:	20ff      	movs	r0, #255	; 0xff
 8003e6e:	f7ff ff7b 	bl	8003d68 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8003e72:	20a0      	movs	r0, #160	; 0xa0
 8003e74:	f7ff ff78 	bl	8003d68 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003e78:	20a6      	movs	r0, #166	; 0xa6
 8003e7a:	f7ff ff75 	bl	8003d68 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003e7e:	20a8      	movs	r0, #168	; 0xa8
 8003e80:	f7ff ff72 	bl	8003d68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8003e84:	203f      	movs	r0, #63	; 0x3f
 8003e86:	f7ff ff6f 	bl	8003d68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003e8a:	20a4      	movs	r0, #164	; 0xa4
 8003e8c:	f7ff ff6c 	bl	8003d68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003e90:	20d3      	movs	r0, #211	; 0xd3
 8003e92:	f7ff ff69 	bl	8003d68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003e96:	2000      	movs	r0, #0
 8003e98:	f7ff ff66 	bl	8003d68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003e9c:	20d5      	movs	r0, #213	; 0xd5
 8003e9e:	f7ff ff63 	bl	8003d68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003ea2:	20f0      	movs	r0, #240	; 0xf0
 8003ea4:	f7ff ff60 	bl	8003d68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003ea8:	20d9      	movs	r0, #217	; 0xd9
 8003eaa:	f7ff ff5d 	bl	8003d68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003eae:	2022      	movs	r0, #34	; 0x22
 8003eb0:	f7ff ff5a 	bl	8003d68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003eb4:	20da      	movs	r0, #218	; 0xda
 8003eb6:	f7ff ff57 	bl	8003d68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8003eba:	2012      	movs	r0, #18
 8003ebc:	f7ff ff54 	bl	8003d68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003ec0:	20db      	movs	r0, #219	; 0xdb
 8003ec2:	f7ff ff51 	bl	8003d68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003ec6:	2020      	movs	r0, #32
 8003ec8:	f7ff ff4e 	bl	8003d68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003ecc:	208d      	movs	r0, #141	; 0x8d
 8003ece:	f7ff ff4b 	bl	8003d68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003ed2:	2014      	movs	r0, #20
 8003ed4:	f7ff ff48 	bl	8003d68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8003ed8:	20af      	movs	r0, #175	; 0xaf
 8003eda:	f7ff ff45 	bl	8003d68 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8003ede:	2000      	movs	r0, #0
 8003ee0:	f000 f810 	bl	8003f04 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003ee4:	f000 f832 	bl	8003f4c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <ssd1306_Init+0xd8>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003eee:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <ssd1306_Init+0xd8>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003ef4:	4b02      	ldr	r3, [pc, #8]	; (8003f00 <ssd1306_Init+0xd8>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	715a      	strb	r2, [r3, #5]
}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20000cac 	.word	0x20000cac

08003f04 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	0002      	movs	r2, r0
 8003f0c:	1dfb      	adds	r3, r7, #7
 8003f0e:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003f10:	2300      	movs	r3, #0
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	e00e      	b.n	8003f34 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003f16:	1dfb      	adds	r3, r7, #7
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <ssd1306_Fill+0x1e>
 8003f1e:	2100      	movs	r1, #0
 8003f20:	e000      	b.n	8003f24 <ssd1306_Fill+0x20>
 8003f22:	21ff      	movs	r1, #255	; 0xff
 8003f24:	4a07      	ldr	r2, [pc, #28]	; (8003f44 <ssd1306_Fill+0x40>)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	18d3      	adds	r3, r2, r3
 8003f2a:	1c0a      	adds	r2, r1, #0
 8003f2c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3301      	adds	r3, #1
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <ssd1306_Fill+0x44>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d9ec      	bls.n	8003f16 <ssd1306_Fill+0x12>
    }
}
 8003f3c:	46c0      	nop			; (mov r8, r8)
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b004      	add	sp, #16
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	200008ac 	.word	0x200008ac
 8003f48:	000003ff 	.word	0x000003ff

08003f4c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8003f52:	1dfb      	adds	r3, r7, #7
 8003f54:	2200      	movs	r2, #0
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	e01a      	b.n	8003f90 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i);
 8003f5a:	1dfb      	adds	r3, r7, #7
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	3b50      	subs	r3, #80	; 0x50
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	0018      	movs	r0, r3
 8003f64:	f7ff ff00 	bl	8003d68 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8003f68:	2000      	movs	r0, #0
 8003f6a:	f7ff fefd 	bl	8003d68 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8003f6e:	2010      	movs	r0, #16
 8003f70:	f7ff fefa 	bl	8003d68 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003f74:	1dfb      	adds	r3, r7, #7
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	01da      	lsls	r2, r3, #7
 8003f7a:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <ssd1306_UpdateScreen+0x54>)
 8003f7c:	18d3      	adds	r3, r2, r3
 8003f7e:	2180      	movs	r1, #128	; 0x80
 8003f80:	0018      	movs	r0, r3
 8003f82:	f7ff ff21 	bl	8003dc8 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781a      	ldrb	r2, [r3, #0]
 8003f8a:	1dfb      	adds	r3, r7, #7
 8003f8c:	3201      	adds	r2, #1
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	1dfb      	adds	r3, r7, #7
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b07      	cmp	r3, #7
 8003f96:	d9e0      	bls.n	8003f5a <ssd1306_UpdateScreen+0xe>
    }
}
 8003f98:	46c0      	nop			; (mov r8, r8)
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	200008ac 	.word	0x200008ac

08003fa4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003fa4:	b590      	push	{r4, r7, lr}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	0004      	movs	r4, r0
 8003fac:	0008      	movs	r0, r1
 8003fae:	0011      	movs	r1, r2
 8003fb0:	1dfb      	adds	r3, r7, #7
 8003fb2:	1c22      	adds	r2, r4, #0
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	1dbb      	adds	r3, r7, #6
 8003fb8:	1c02      	adds	r2, r0, #0
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	1d7b      	adds	r3, r7, #5
 8003fbe:	1c0a      	adds	r2, r1, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003fc2:	1dfb      	adds	r3, r7, #7
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	b25b      	sxtb	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	db52      	blt.n	8004072 <ssd1306_DrawPixel+0xce>
 8003fcc:	1dbb      	adds	r3, r7, #6
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b3f      	cmp	r3, #63	; 0x3f
 8003fd2:	d84e      	bhi.n	8004072 <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8003fd4:	4b29      	ldr	r3, [pc, #164]	; (800407c <ssd1306_DrawPixel+0xd8>)
 8003fd6:	791b      	ldrb	r3, [r3, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d006      	beq.n	8003fea <ssd1306_DrawPixel+0x46>
        color = (SSD1306_COLOR)!color;
 8003fdc:	1d7b      	adds	r3, r7, #5
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	425a      	negs	r2, r3
 8003fe2:	4153      	adcs	r3, r2
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	1d7b      	adds	r3, r7, #5
 8003fe8:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 8003fea:	1d7b      	adds	r3, r7, #5
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d11e      	bne.n	8004030 <ssd1306_DrawPixel+0x8c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003ff2:	1dfb      	adds	r3, r7, #7
 8003ff4:	781a      	ldrb	r2, [r3, #0]
 8003ff6:	1dbb      	adds	r3, r7, #6
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	08db      	lsrs	r3, r3, #3
 8003ffc:	b2d8      	uxtb	r0, r3
 8003ffe:	0003      	movs	r3, r0
 8004000:	01db      	lsls	r3, r3, #7
 8004002:	18d3      	adds	r3, r2, r3
 8004004:	4a1e      	ldr	r2, [pc, #120]	; (8004080 <ssd1306_DrawPixel+0xdc>)
 8004006:	5cd3      	ldrb	r3, [r2, r3]
 8004008:	b25a      	sxtb	r2, r3
 800400a:	1dbb      	adds	r3, r7, #6
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2107      	movs	r1, #7
 8004010:	400b      	ands	r3, r1
 8004012:	2101      	movs	r1, #1
 8004014:	4099      	lsls	r1, r3
 8004016:	000b      	movs	r3, r1
 8004018:	b25b      	sxtb	r3, r3
 800401a:	4313      	orrs	r3, r2
 800401c:	b259      	sxtb	r1, r3
 800401e:	1dfb      	adds	r3, r7, #7
 8004020:	781a      	ldrb	r2, [r3, #0]
 8004022:	0003      	movs	r3, r0
 8004024:	01db      	lsls	r3, r3, #7
 8004026:	18d3      	adds	r3, r2, r3
 8004028:	b2c9      	uxtb	r1, r1
 800402a:	4a15      	ldr	r2, [pc, #84]	; (8004080 <ssd1306_DrawPixel+0xdc>)
 800402c:	54d1      	strb	r1, [r2, r3]
 800402e:	e021      	b.n	8004074 <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004030:	1dfb      	adds	r3, r7, #7
 8004032:	781a      	ldrb	r2, [r3, #0]
 8004034:	1dbb      	adds	r3, r7, #6
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	08db      	lsrs	r3, r3, #3
 800403a:	b2d8      	uxtb	r0, r3
 800403c:	0003      	movs	r3, r0
 800403e:	01db      	lsls	r3, r3, #7
 8004040:	18d3      	adds	r3, r2, r3
 8004042:	4a0f      	ldr	r2, [pc, #60]	; (8004080 <ssd1306_DrawPixel+0xdc>)
 8004044:	5cd3      	ldrb	r3, [r2, r3]
 8004046:	b25b      	sxtb	r3, r3
 8004048:	1dba      	adds	r2, r7, #6
 800404a:	7812      	ldrb	r2, [r2, #0]
 800404c:	2107      	movs	r1, #7
 800404e:	400a      	ands	r2, r1
 8004050:	2101      	movs	r1, #1
 8004052:	4091      	lsls	r1, r2
 8004054:	000a      	movs	r2, r1
 8004056:	b252      	sxtb	r2, r2
 8004058:	43d2      	mvns	r2, r2
 800405a:	b252      	sxtb	r2, r2
 800405c:	4013      	ands	r3, r2
 800405e:	b259      	sxtb	r1, r3
 8004060:	1dfb      	adds	r3, r7, #7
 8004062:	781a      	ldrb	r2, [r3, #0]
 8004064:	0003      	movs	r3, r0
 8004066:	01db      	lsls	r3, r3, #7
 8004068:	18d3      	adds	r3, r2, r3
 800406a:	b2c9      	uxtb	r1, r1
 800406c:	4a04      	ldr	r2, [pc, #16]	; (8004080 <ssd1306_DrawPixel+0xdc>)
 800406e:	54d1      	strb	r1, [r2, r3]
 8004070:	e000      	b.n	8004074 <ssd1306_DrawPixel+0xd0>
        return;
 8004072:	46c0      	nop			; (mov r8, r8)
    }
}
 8004074:	46bd      	mov	sp, r7
 8004076:	b003      	add	sp, #12
 8004078:	bd90      	pop	{r4, r7, pc}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	20000cac 	.word	0x20000cac
 8004080:	200008ac 	.word	0x200008ac

08004084 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color, int padding) {
 8004084:	b590      	push	{r4, r7, lr}
 8004086:	b089      	sub	sp, #36	; 0x24
 8004088:	af00      	add	r7, sp, #0
 800408a:	0004      	movs	r4, r0
 800408c:	1d38      	adds	r0, r7, #4
 800408e:	6001      	str	r1, [r0, #0]
 8004090:	6042      	str	r2, [r0, #4]
 8004092:	0019      	movs	r1, r3
 8004094:	230f      	movs	r3, #15
 8004096:	18fb      	adds	r3, r7, r3
 8004098:	1c22      	adds	r2, r4, #0
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	230e      	movs	r3, #14
 800409e:	18fb      	adds	r3, r7, r3
 80040a0:	1c0a      	adds	r2, r1, #0
 80040a2:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80040a4:	4b54      	ldr	r3, [pc, #336]	; (80041f8 <ssd1306_WriteChar+0x174>)
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	001a      	movs	r2, r3
 80040aa:	1d3b      	adds	r3, r7, #4
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	18d3      	adds	r3, r2, r3
 80040b0:	2b7f      	cmp	r3, #127	; 0x7f
 80040b2:	dc07      	bgt.n	80040c4 <ssd1306_WriteChar+0x40>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80040b4:	4b50      	ldr	r3, [pc, #320]	; (80041f8 <ssd1306_WriteChar+0x174>)
 80040b6:	885b      	ldrh	r3, [r3, #2]
 80040b8:	001a      	movs	r2, r3
 80040ba:	1d3b      	adds	r3, r7, #4
 80040bc:	785b      	ldrb	r3, [r3, #1]
 80040be:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80040c0:	2b3f      	cmp	r3, #63	; 0x3f
 80040c2:	dd01      	ble.n	80040c8 <ssd1306_WriteChar+0x44>
    {
        // Not enough space on current line
        return 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e092      	b.n	80041ee <ssd1306_WriteChar+0x16a>
    }

    // add extra leading horizontal space
    if (padding == 1)
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d11f      	bne.n	800410e <ssd1306_WriteChar+0x8a>
    {
    	for(int n = 0; n < Font.FontHeight; n++)
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	e010      	b.n	80040f6 <ssd1306_WriteChar+0x72>
		{
			ssd1306_DrawPixel(SSD1306.CurrentX, (SSD1306.CurrentY + n), Black);
 80040d4:	4b48      	ldr	r3, [pc, #288]	; (80041f8 <ssd1306_WriteChar+0x174>)
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b2d8      	uxtb	r0, r3
 80040da:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <ssd1306_WriteChar+0x174>)
 80040dc:	885b      	ldrh	r3, [r3, #2]
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	18d3      	adds	r3, r2, r3
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2200      	movs	r2, #0
 80040ea:	0019      	movs	r1, r3
 80040ec:	f7ff ff5a 	bl	8003fa4 <ssd1306_DrawPixel>
    	for(int n = 0; n < Font.FontHeight; n++)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	3301      	adds	r3, #1
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	1d3b      	adds	r3, r7, #4
 80040f8:	785b      	ldrb	r3, [r3, #1]
 80040fa:	001a      	movs	r2, r3
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	4293      	cmp	r3, r2
 8004100:	dbe8      	blt.n	80040d4 <ssd1306_WriteChar+0x50>
		}
    	SSD1306.CurrentX += 1;
 8004102:	4b3d      	ldr	r3, [pc, #244]	; (80041f8 <ssd1306_WriteChar+0x174>)
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	4b3b      	ldr	r3, [pc, #236]	; (80041f8 <ssd1306_WriteChar+0x174>)
 800410c:	801a      	strh	r2, [r3, #0]
    }
    

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	e051      	b.n	80041b8 <ssd1306_WriteChar+0x134>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004114:	1d3b      	adds	r3, r7, #4
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	230f      	movs	r3, #15
 800411a:	18fb      	adds	r3, r7, r3
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	3b20      	subs	r3, #32
 8004120:	1d39      	adds	r1, r7, #4
 8004122:	7849      	ldrb	r1, [r1, #1]
 8004124:	434b      	muls	r3, r1
 8004126:	0019      	movs	r1, r3
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	18cb      	adds	r3, r1, r3
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	18d3      	adds	r3, r2, r3
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	613b      	str	r3, [r7, #16]
        for(j = 0; j < Font.FontWidth; j++) {
 8004134:	2300      	movs	r3, #0
 8004136:	61bb      	str	r3, [r7, #24]
 8004138:	e035      	b.n	80041a6 <ssd1306_WriteChar+0x122>
            if((b << j) & 0x8000)  {
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	409a      	lsls	r2, r3
 8004140:	2380      	movs	r3, #128	; 0x80
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	4013      	ands	r3, r2
 8004146:	d014      	beq.n	8004172 <ssd1306_WriteChar+0xee>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004148:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <ssd1306_WriteChar+0x174>)
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	b2da      	uxtb	r2, r3
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	18d3      	adds	r3, r2, r3
 8004154:	b2d8      	uxtb	r0, r3
 8004156:	4b28      	ldr	r3, [pc, #160]	; (80041f8 <ssd1306_WriteChar+0x174>)
 8004158:	885b      	ldrh	r3, [r3, #2]
 800415a:	b2da      	uxtb	r2, r3
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	b2db      	uxtb	r3, r3
 8004160:	18d3      	adds	r3, r2, r3
 8004162:	b2d9      	uxtb	r1, r3
 8004164:	230e      	movs	r3, #14
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	001a      	movs	r2, r3
 800416c:	f7ff ff1a 	bl	8003fa4 <ssd1306_DrawPixel>
 8004170:	e016      	b.n	80041a0 <ssd1306_WriteChar+0x11c>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004172:	4b21      	ldr	r3, [pc, #132]	; (80041f8 <ssd1306_WriteChar+0x174>)
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b2da      	uxtb	r2, r3
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	18d3      	adds	r3, r2, r3
 800417e:	b2d8      	uxtb	r0, r3
 8004180:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <ssd1306_WriteChar+0x174>)
 8004182:	885b      	ldrh	r3, [r3, #2]
 8004184:	b2da      	uxtb	r2, r3
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	18d3      	adds	r3, r2, r3
 800418c:	b2d9      	uxtb	r1, r3
 800418e:	230e      	movs	r3, #14
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	425a      	negs	r2, r3
 8004196:	4153      	adcs	r3, r2
 8004198:	b2db      	uxtb	r3, r3
 800419a:	001a      	movs	r2, r3
 800419c:	f7ff ff02 	bl	8003fa4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	3301      	adds	r3, #1
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	1d3b      	adds	r3, r7, #4
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	001a      	movs	r2, r3
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d3c3      	bcc.n	800413a <ssd1306_WriteChar+0xb6>
    for(i = 0; i < Font.FontHeight; i++) {
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	3301      	adds	r3, #1
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	1d3b      	adds	r3, r7, #4
 80041ba:	785b      	ldrb	r3, [r3, #1]
 80041bc:	001a      	movs	r2, r3
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d3a7      	bcc.n	8004114 <ssd1306_WriteChar+0x90>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <ssd1306_WriteChar+0x174>)
 80041c6:	881a      	ldrh	r2, [r3, #0]
 80041c8:	1d3b      	adds	r3, r7, #4
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	18d3      	adds	r3, r2, r3
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <ssd1306_WriteChar+0x174>)
 80041d4:	801a      	strh	r2, [r3, #0]
    // add extra leading horizontal space
    if (padding == 1)
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d105      	bne.n	80041e8 <ssd1306_WriteChar+0x164>
    	SSD1306.CurrentX += 1;
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <ssd1306_WriteChar+0x174>)
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	3301      	adds	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <ssd1306_WriteChar+0x174>)
 80041e6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80041e8:	230f      	movs	r3, #15
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	781b      	ldrb	r3, [r3, #0]
}
 80041ee:	0018      	movs	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b009      	add	sp, #36	; 0x24
 80041f4:	bd90      	pop	{r4, r7, pc}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	20000cac 	.word	0x20000cac

080041fc <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color, int padding) {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af02      	add	r7, sp, #8
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	1d38      	adds	r0, r7, #4
 8004206:	6001      	str	r1, [r0, #0]
 8004208:	6042      	str	r2, [r0, #4]
 800420a:	001a      	movs	r2, r3
 800420c:	1cfb      	adds	r3, r7, #3
 800420e:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8004210:	e017      	b.n	8004242 <ssd1306_WriteString+0x46>
        if (ssd1306_WriteChar(*str, Font, color, padding) != *str) {
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	7818      	ldrb	r0, [r3, #0]
 8004216:	1cfb      	adds	r3, r7, #3
 8004218:	7819      	ldrb	r1, [r3, #0]
 800421a:	1d3a      	adds	r2, r7, #4
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	000b      	movs	r3, r1
 8004222:	6811      	ldr	r1, [r2, #0]
 8004224:	6852      	ldr	r2, [r2, #4]
 8004226:	f7ff ff2d 	bl	8004084 <ssd1306_WriteChar>
 800422a:	0003      	movs	r3, r0
 800422c:	001a      	movs	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d002      	beq.n	800423c <ssd1306_WriteString+0x40>
            // Char could not be written
            return *str;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	e008      	b.n	800424e <ssd1306_WriteString+0x52>
        }
        
        // Next char
        str++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3301      	adds	r3, #1
 8004240:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e3      	bne.n	8004212 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	781b      	ldrb	r3, [r3, #0]
}
 800424e:	0018      	movs	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	b004      	add	sp, #16
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	0002      	movs	r2, r0
 8004260:	1dfb      	adds	r3, r7, #7
 8004262:	701a      	strb	r2, [r3, #0]
 8004264:	1dbb      	adds	r3, r7, #6
 8004266:	1c0a      	adds	r2, r1, #0
 8004268:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 800426a:	1dfb      	adds	r3, r7, #7
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	b29a      	uxth	r2, r3
 8004270:	4b05      	ldr	r3, [pc, #20]	; (8004288 <ssd1306_SetCursor+0x30>)
 8004272:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004274:	1dbb      	adds	r3, r7, #6
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	b29a      	uxth	r2, r3
 800427a:	4b03      	ldr	r3, [pc, #12]	; (8004288 <ssd1306_SetCursor+0x30>)
 800427c:	805a      	strh	r2, [r3, #2]
}
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	46bd      	mov	sp, r7
 8004282:	b002      	add	sp, #8
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	20000cac 	.word	0x20000cac

0800428c <__errno>:
 800428c:	4b01      	ldr	r3, [pc, #4]	; (8004294 <__errno+0x8>)
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	4770      	bx	lr
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	20000820 	.word	0x20000820

08004298 <__libc_init_array>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	2600      	movs	r6, #0
 800429c:	4d0c      	ldr	r5, [pc, #48]	; (80042d0 <__libc_init_array+0x38>)
 800429e:	4c0d      	ldr	r4, [pc, #52]	; (80042d4 <__libc_init_array+0x3c>)
 80042a0:	1b64      	subs	r4, r4, r5
 80042a2:	10a4      	asrs	r4, r4, #2
 80042a4:	42a6      	cmp	r6, r4
 80042a6:	d109      	bne.n	80042bc <__libc_init_array+0x24>
 80042a8:	2600      	movs	r6, #0
 80042aa:	f000 fc3b 	bl	8004b24 <_init>
 80042ae:	4d0a      	ldr	r5, [pc, #40]	; (80042d8 <__libc_init_array+0x40>)
 80042b0:	4c0a      	ldr	r4, [pc, #40]	; (80042dc <__libc_init_array+0x44>)
 80042b2:	1b64      	subs	r4, r4, r5
 80042b4:	10a4      	asrs	r4, r4, #2
 80042b6:	42a6      	cmp	r6, r4
 80042b8:	d105      	bne.n	80042c6 <__libc_init_array+0x2e>
 80042ba:	bd70      	pop	{r4, r5, r6, pc}
 80042bc:	00b3      	lsls	r3, r6, #2
 80042be:	58eb      	ldr	r3, [r5, r3]
 80042c0:	4798      	blx	r3
 80042c2:	3601      	adds	r6, #1
 80042c4:	e7ee      	b.n	80042a4 <__libc_init_array+0xc>
 80042c6:	00b3      	lsls	r3, r6, #2
 80042c8:	58eb      	ldr	r3, [r5, r3]
 80042ca:	4798      	blx	r3
 80042cc:	3601      	adds	r6, #1
 80042ce:	e7f2      	b.n	80042b6 <__libc_init_array+0x1e>
 80042d0:	08006c50 	.word	0x08006c50
 80042d4:	08006c50 	.word	0x08006c50
 80042d8:	08006c50 	.word	0x08006c50
 80042dc:	08006c54 	.word	0x08006c54

080042e0 <memmove>:
 80042e0:	b510      	push	{r4, lr}
 80042e2:	4288      	cmp	r0, r1
 80042e4:	d902      	bls.n	80042ec <memmove+0xc>
 80042e6:	188b      	adds	r3, r1, r2
 80042e8:	4298      	cmp	r0, r3
 80042ea:	d303      	bcc.n	80042f4 <memmove+0x14>
 80042ec:	2300      	movs	r3, #0
 80042ee:	e007      	b.n	8004300 <memmove+0x20>
 80042f0:	5c8b      	ldrb	r3, [r1, r2]
 80042f2:	5483      	strb	r3, [r0, r2]
 80042f4:	3a01      	subs	r2, #1
 80042f6:	d2fb      	bcs.n	80042f0 <memmove+0x10>
 80042f8:	bd10      	pop	{r4, pc}
 80042fa:	5ccc      	ldrb	r4, [r1, r3]
 80042fc:	54c4      	strb	r4, [r0, r3]
 80042fe:	3301      	adds	r3, #1
 8004300:	429a      	cmp	r2, r3
 8004302:	d1fa      	bne.n	80042fa <memmove+0x1a>
 8004304:	e7f8      	b.n	80042f8 <memmove+0x18>

08004306 <memset>:
 8004306:	0003      	movs	r3, r0
 8004308:	1812      	adds	r2, r2, r0
 800430a:	4293      	cmp	r3, r2
 800430c:	d100      	bne.n	8004310 <memset+0xa>
 800430e:	4770      	bx	lr
 8004310:	7019      	strb	r1, [r3, #0]
 8004312:	3301      	adds	r3, #1
 8004314:	e7f9      	b.n	800430a <memset+0x4>
	...

08004318 <sniprintf>:
 8004318:	b40c      	push	{r2, r3}
 800431a:	b530      	push	{r4, r5, lr}
 800431c:	4b16      	ldr	r3, [pc, #88]	; (8004378 <sniprintf+0x60>)
 800431e:	b09d      	sub	sp, #116	; 0x74
 8004320:	1e0c      	subs	r4, r1, #0
 8004322:	681d      	ldr	r5, [r3, #0]
 8004324:	da08      	bge.n	8004338 <sniprintf+0x20>
 8004326:	238b      	movs	r3, #139	; 0x8b
 8004328:	2001      	movs	r0, #1
 800432a:	602b      	str	r3, [r5, #0]
 800432c:	4240      	negs	r0, r0
 800432e:	b01d      	add	sp, #116	; 0x74
 8004330:	bc30      	pop	{r4, r5}
 8004332:	bc08      	pop	{r3}
 8004334:	b002      	add	sp, #8
 8004336:	4718      	bx	r3
 8004338:	2382      	movs	r3, #130	; 0x82
 800433a:	a902      	add	r1, sp, #8
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	818b      	strh	r3, [r1, #12]
 8004340:	2300      	movs	r3, #0
 8004342:	9002      	str	r0, [sp, #8]
 8004344:	6108      	str	r0, [r1, #16]
 8004346:	429c      	cmp	r4, r3
 8004348:	d000      	beq.n	800434c <sniprintf+0x34>
 800434a:	1e63      	subs	r3, r4, #1
 800434c:	608b      	str	r3, [r1, #8]
 800434e:	614b      	str	r3, [r1, #20]
 8004350:	2301      	movs	r3, #1
 8004352:	425b      	negs	r3, r3
 8004354:	81cb      	strh	r3, [r1, #14]
 8004356:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004358:	ab21      	add	r3, sp, #132	; 0x84
 800435a:	0028      	movs	r0, r5
 800435c:	9301      	str	r3, [sp, #4]
 800435e:	f000 f86f 	bl	8004440 <_svfiprintf_r>
 8004362:	1c43      	adds	r3, r0, #1
 8004364:	da01      	bge.n	800436a <sniprintf+0x52>
 8004366:	238b      	movs	r3, #139	; 0x8b
 8004368:	602b      	str	r3, [r5, #0]
 800436a:	2c00      	cmp	r4, #0
 800436c:	d0df      	beq.n	800432e <sniprintf+0x16>
 800436e:	2300      	movs	r3, #0
 8004370:	9a02      	ldr	r2, [sp, #8]
 8004372:	7013      	strb	r3, [r2, #0]
 8004374:	e7db      	b.n	800432e <sniprintf+0x16>
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	20000820 	.word	0x20000820

0800437c <__ssputs_r>:
 800437c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800437e:	688e      	ldr	r6, [r1, #8]
 8004380:	b085      	sub	sp, #20
 8004382:	0007      	movs	r7, r0
 8004384:	000c      	movs	r4, r1
 8004386:	9203      	str	r2, [sp, #12]
 8004388:	9301      	str	r3, [sp, #4]
 800438a:	429e      	cmp	r6, r3
 800438c:	d83c      	bhi.n	8004408 <__ssputs_r+0x8c>
 800438e:	2390      	movs	r3, #144	; 0x90
 8004390:	898a      	ldrh	r2, [r1, #12]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	421a      	tst	r2, r3
 8004396:	d034      	beq.n	8004402 <__ssputs_r+0x86>
 8004398:	2503      	movs	r5, #3
 800439a:	6909      	ldr	r1, [r1, #16]
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	1a5b      	subs	r3, r3, r1
 80043a0:	9302      	str	r3, [sp, #8]
 80043a2:	6963      	ldr	r3, [r4, #20]
 80043a4:	9802      	ldr	r0, [sp, #8]
 80043a6:	435d      	muls	r5, r3
 80043a8:	0feb      	lsrs	r3, r5, #31
 80043aa:	195d      	adds	r5, r3, r5
 80043ac:	9b01      	ldr	r3, [sp, #4]
 80043ae:	106d      	asrs	r5, r5, #1
 80043b0:	3301      	adds	r3, #1
 80043b2:	181b      	adds	r3, r3, r0
 80043b4:	42ab      	cmp	r3, r5
 80043b6:	d900      	bls.n	80043ba <__ssputs_r+0x3e>
 80043b8:	001d      	movs	r5, r3
 80043ba:	0553      	lsls	r3, r2, #21
 80043bc:	d532      	bpl.n	8004424 <__ssputs_r+0xa8>
 80043be:	0029      	movs	r1, r5
 80043c0:	0038      	movs	r0, r7
 80043c2:	f000 fb0f 	bl	80049e4 <_malloc_r>
 80043c6:	1e06      	subs	r6, r0, #0
 80043c8:	d109      	bne.n	80043de <__ssputs_r+0x62>
 80043ca:	230c      	movs	r3, #12
 80043cc:	603b      	str	r3, [r7, #0]
 80043ce:	2340      	movs	r3, #64	; 0x40
 80043d0:	2001      	movs	r0, #1
 80043d2:	89a2      	ldrh	r2, [r4, #12]
 80043d4:	4240      	negs	r0, r0
 80043d6:	4313      	orrs	r3, r2
 80043d8:	81a3      	strh	r3, [r4, #12]
 80043da:	b005      	add	sp, #20
 80043dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043de:	9a02      	ldr	r2, [sp, #8]
 80043e0:	6921      	ldr	r1, [r4, #16]
 80043e2:	f000 faac 	bl	800493e <memcpy>
 80043e6:	89a3      	ldrh	r3, [r4, #12]
 80043e8:	4a14      	ldr	r2, [pc, #80]	; (800443c <__ssputs_r+0xc0>)
 80043ea:	401a      	ands	r2, r3
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	4313      	orrs	r3, r2
 80043f0:	81a3      	strh	r3, [r4, #12]
 80043f2:	9b02      	ldr	r3, [sp, #8]
 80043f4:	6126      	str	r6, [r4, #16]
 80043f6:	18f6      	adds	r6, r6, r3
 80043f8:	6026      	str	r6, [r4, #0]
 80043fa:	6165      	str	r5, [r4, #20]
 80043fc:	9e01      	ldr	r6, [sp, #4]
 80043fe:	1aed      	subs	r5, r5, r3
 8004400:	60a5      	str	r5, [r4, #8]
 8004402:	9b01      	ldr	r3, [sp, #4]
 8004404:	429e      	cmp	r6, r3
 8004406:	d900      	bls.n	800440a <__ssputs_r+0x8e>
 8004408:	9e01      	ldr	r6, [sp, #4]
 800440a:	0032      	movs	r2, r6
 800440c:	9903      	ldr	r1, [sp, #12]
 800440e:	6820      	ldr	r0, [r4, #0]
 8004410:	f7ff ff66 	bl	80042e0 <memmove>
 8004414:	68a3      	ldr	r3, [r4, #8]
 8004416:	2000      	movs	r0, #0
 8004418:	1b9b      	subs	r3, r3, r6
 800441a:	60a3      	str	r3, [r4, #8]
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	199e      	adds	r6, r3, r6
 8004420:	6026      	str	r6, [r4, #0]
 8004422:	e7da      	b.n	80043da <__ssputs_r+0x5e>
 8004424:	002a      	movs	r2, r5
 8004426:	0038      	movs	r0, r7
 8004428:	f000 fb3a 	bl	8004aa0 <_realloc_r>
 800442c:	1e06      	subs	r6, r0, #0
 800442e:	d1e0      	bne.n	80043f2 <__ssputs_r+0x76>
 8004430:	6921      	ldr	r1, [r4, #16]
 8004432:	0038      	movs	r0, r7
 8004434:	f000 fa8c 	bl	8004950 <_free_r>
 8004438:	e7c7      	b.n	80043ca <__ssputs_r+0x4e>
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	fffffb7f 	.word	0xfffffb7f

08004440 <_svfiprintf_r>:
 8004440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004442:	b0a1      	sub	sp, #132	; 0x84
 8004444:	9003      	str	r0, [sp, #12]
 8004446:	001d      	movs	r5, r3
 8004448:	898b      	ldrh	r3, [r1, #12]
 800444a:	000f      	movs	r7, r1
 800444c:	0016      	movs	r6, r2
 800444e:	061b      	lsls	r3, r3, #24
 8004450:	d511      	bpl.n	8004476 <_svfiprintf_r+0x36>
 8004452:	690b      	ldr	r3, [r1, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10e      	bne.n	8004476 <_svfiprintf_r+0x36>
 8004458:	2140      	movs	r1, #64	; 0x40
 800445a:	f000 fac3 	bl	80049e4 <_malloc_r>
 800445e:	6038      	str	r0, [r7, #0]
 8004460:	6138      	str	r0, [r7, #16]
 8004462:	2800      	cmp	r0, #0
 8004464:	d105      	bne.n	8004472 <_svfiprintf_r+0x32>
 8004466:	230c      	movs	r3, #12
 8004468:	9a03      	ldr	r2, [sp, #12]
 800446a:	3801      	subs	r0, #1
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	b021      	add	sp, #132	; 0x84
 8004470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004472:	2340      	movs	r3, #64	; 0x40
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	2300      	movs	r3, #0
 8004478:	ac08      	add	r4, sp, #32
 800447a:	6163      	str	r3, [r4, #20]
 800447c:	3320      	adds	r3, #32
 800447e:	7663      	strb	r3, [r4, #25]
 8004480:	3310      	adds	r3, #16
 8004482:	76a3      	strb	r3, [r4, #26]
 8004484:	9507      	str	r5, [sp, #28]
 8004486:	0035      	movs	r5, r6
 8004488:	782b      	ldrb	r3, [r5, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <_svfiprintf_r+0x52>
 800448e:	2b25      	cmp	r3, #37	; 0x25
 8004490:	d146      	bne.n	8004520 <_svfiprintf_r+0xe0>
 8004492:	1bab      	subs	r3, r5, r6
 8004494:	9305      	str	r3, [sp, #20]
 8004496:	d00c      	beq.n	80044b2 <_svfiprintf_r+0x72>
 8004498:	0032      	movs	r2, r6
 800449a:	0039      	movs	r1, r7
 800449c:	9803      	ldr	r0, [sp, #12]
 800449e:	f7ff ff6d 	bl	800437c <__ssputs_r>
 80044a2:	1c43      	adds	r3, r0, #1
 80044a4:	d100      	bne.n	80044a8 <_svfiprintf_r+0x68>
 80044a6:	e0ae      	b.n	8004606 <_svfiprintf_r+0x1c6>
 80044a8:	6962      	ldr	r2, [r4, #20]
 80044aa:	9b05      	ldr	r3, [sp, #20]
 80044ac:	4694      	mov	ip, r2
 80044ae:	4463      	add	r3, ip
 80044b0:	6163      	str	r3, [r4, #20]
 80044b2:	782b      	ldrb	r3, [r5, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d100      	bne.n	80044ba <_svfiprintf_r+0x7a>
 80044b8:	e0a5      	b.n	8004606 <_svfiprintf_r+0x1c6>
 80044ba:	2201      	movs	r2, #1
 80044bc:	2300      	movs	r3, #0
 80044be:	4252      	negs	r2, r2
 80044c0:	6062      	str	r2, [r4, #4]
 80044c2:	a904      	add	r1, sp, #16
 80044c4:	3254      	adds	r2, #84	; 0x54
 80044c6:	1852      	adds	r2, r2, r1
 80044c8:	1c6e      	adds	r6, r5, #1
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	60e3      	str	r3, [r4, #12]
 80044ce:	60a3      	str	r3, [r4, #8]
 80044d0:	7013      	strb	r3, [r2, #0]
 80044d2:	65a3      	str	r3, [r4, #88]	; 0x58
 80044d4:	7831      	ldrb	r1, [r6, #0]
 80044d6:	2205      	movs	r2, #5
 80044d8:	4853      	ldr	r0, [pc, #332]	; (8004628 <_svfiprintf_r+0x1e8>)
 80044da:	f000 fa25 	bl	8004928 <memchr>
 80044de:	1c75      	adds	r5, r6, #1
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d11f      	bne.n	8004524 <_svfiprintf_r+0xe4>
 80044e4:	6822      	ldr	r2, [r4, #0]
 80044e6:	06d3      	lsls	r3, r2, #27
 80044e8:	d504      	bpl.n	80044f4 <_svfiprintf_r+0xb4>
 80044ea:	2353      	movs	r3, #83	; 0x53
 80044ec:	a904      	add	r1, sp, #16
 80044ee:	185b      	adds	r3, r3, r1
 80044f0:	2120      	movs	r1, #32
 80044f2:	7019      	strb	r1, [r3, #0]
 80044f4:	0713      	lsls	r3, r2, #28
 80044f6:	d504      	bpl.n	8004502 <_svfiprintf_r+0xc2>
 80044f8:	2353      	movs	r3, #83	; 0x53
 80044fa:	a904      	add	r1, sp, #16
 80044fc:	185b      	adds	r3, r3, r1
 80044fe:	212b      	movs	r1, #43	; 0x2b
 8004500:	7019      	strb	r1, [r3, #0]
 8004502:	7833      	ldrb	r3, [r6, #0]
 8004504:	2b2a      	cmp	r3, #42	; 0x2a
 8004506:	d016      	beq.n	8004536 <_svfiprintf_r+0xf6>
 8004508:	0035      	movs	r5, r6
 800450a:	2100      	movs	r1, #0
 800450c:	200a      	movs	r0, #10
 800450e:	68e3      	ldr	r3, [r4, #12]
 8004510:	782a      	ldrb	r2, [r5, #0]
 8004512:	1c6e      	adds	r6, r5, #1
 8004514:	3a30      	subs	r2, #48	; 0x30
 8004516:	2a09      	cmp	r2, #9
 8004518:	d94e      	bls.n	80045b8 <_svfiprintf_r+0x178>
 800451a:	2900      	cmp	r1, #0
 800451c:	d018      	beq.n	8004550 <_svfiprintf_r+0x110>
 800451e:	e010      	b.n	8004542 <_svfiprintf_r+0x102>
 8004520:	3501      	adds	r5, #1
 8004522:	e7b1      	b.n	8004488 <_svfiprintf_r+0x48>
 8004524:	4b40      	ldr	r3, [pc, #256]	; (8004628 <_svfiprintf_r+0x1e8>)
 8004526:	6822      	ldr	r2, [r4, #0]
 8004528:	1ac0      	subs	r0, r0, r3
 800452a:	2301      	movs	r3, #1
 800452c:	4083      	lsls	r3, r0
 800452e:	4313      	orrs	r3, r2
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	002e      	movs	r6, r5
 8004534:	e7ce      	b.n	80044d4 <_svfiprintf_r+0x94>
 8004536:	9b07      	ldr	r3, [sp, #28]
 8004538:	1d19      	adds	r1, r3, #4
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	9107      	str	r1, [sp, #28]
 800453e:	2b00      	cmp	r3, #0
 8004540:	db01      	blt.n	8004546 <_svfiprintf_r+0x106>
 8004542:	930b      	str	r3, [sp, #44]	; 0x2c
 8004544:	e004      	b.n	8004550 <_svfiprintf_r+0x110>
 8004546:	425b      	negs	r3, r3
 8004548:	60e3      	str	r3, [r4, #12]
 800454a:	2302      	movs	r3, #2
 800454c:	4313      	orrs	r3, r2
 800454e:	6023      	str	r3, [r4, #0]
 8004550:	782b      	ldrb	r3, [r5, #0]
 8004552:	2b2e      	cmp	r3, #46	; 0x2e
 8004554:	d10a      	bne.n	800456c <_svfiprintf_r+0x12c>
 8004556:	786b      	ldrb	r3, [r5, #1]
 8004558:	2b2a      	cmp	r3, #42	; 0x2a
 800455a:	d135      	bne.n	80045c8 <_svfiprintf_r+0x188>
 800455c:	9b07      	ldr	r3, [sp, #28]
 800455e:	3502      	adds	r5, #2
 8004560:	1d1a      	adds	r2, r3, #4
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	9207      	str	r2, [sp, #28]
 8004566:	2b00      	cmp	r3, #0
 8004568:	db2b      	blt.n	80045c2 <_svfiprintf_r+0x182>
 800456a:	9309      	str	r3, [sp, #36]	; 0x24
 800456c:	4e2f      	ldr	r6, [pc, #188]	; (800462c <_svfiprintf_r+0x1ec>)
 800456e:	7829      	ldrb	r1, [r5, #0]
 8004570:	2203      	movs	r2, #3
 8004572:	0030      	movs	r0, r6
 8004574:	f000 f9d8 	bl	8004928 <memchr>
 8004578:	2800      	cmp	r0, #0
 800457a:	d006      	beq.n	800458a <_svfiprintf_r+0x14a>
 800457c:	2340      	movs	r3, #64	; 0x40
 800457e:	1b80      	subs	r0, r0, r6
 8004580:	4083      	lsls	r3, r0
 8004582:	6822      	ldr	r2, [r4, #0]
 8004584:	3501      	adds	r5, #1
 8004586:	4313      	orrs	r3, r2
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	7829      	ldrb	r1, [r5, #0]
 800458c:	2206      	movs	r2, #6
 800458e:	4828      	ldr	r0, [pc, #160]	; (8004630 <_svfiprintf_r+0x1f0>)
 8004590:	1c6e      	adds	r6, r5, #1
 8004592:	7621      	strb	r1, [r4, #24]
 8004594:	f000 f9c8 	bl	8004928 <memchr>
 8004598:	2800      	cmp	r0, #0
 800459a:	d03c      	beq.n	8004616 <_svfiprintf_r+0x1d6>
 800459c:	4b25      	ldr	r3, [pc, #148]	; (8004634 <_svfiprintf_r+0x1f4>)
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d125      	bne.n	80045ee <_svfiprintf_r+0x1ae>
 80045a2:	2207      	movs	r2, #7
 80045a4:	9b07      	ldr	r3, [sp, #28]
 80045a6:	3307      	adds	r3, #7
 80045a8:	4393      	bics	r3, r2
 80045aa:	3308      	adds	r3, #8
 80045ac:	9307      	str	r3, [sp, #28]
 80045ae:	6963      	ldr	r3, [r4, #20]
 80045b0:	9a04      	ldr	r2, [sp, #16]
 80045b2:	189b      	adds	r3, r3, r2
 80045b4:	6163      	str	r3, [r4, #20]
 80045b6:	e766      	b.n	8004486 <_svfiprintf_r+0x46>
 80045b8:	4343      	muls	r3, r0
 80045ba:	2101      	movs	r1, #1
 80045bc:	189b      	adds	r3, r3, r2
 80045be:	0035      	movs	r5, r6
 80045c0:	e7a6      	b.n	8004510 <_svfiprintf_r+0xd0>
 80045c2:	2301      	movs	r3, #1
 80045c4:	425b      	negs	r3, r3
 80045c6:	e7d0      	b.n	800456a <_svfiprintf_r+0x12a>
 80045c8:	2300      	movs	r3, #0
 80045ca:	200a      	movs	r0, #10
 80045cc:	001a      	movs	r2, r3
 80045ce:	3501      	adds	r5, #1
 80045d0:	6063      	str	r3, [r4, #4]
 80045d2:	7829      	ldrb	r1, [r5, #0]
 80045d4:	1c6e      	adds	r6, r5, #1
 80045d6:	3930      	subs	r1, #48	; 0x30
 80045d8:	2909      	cmp	r1, #9
 80045da:	d903      	bls.n	80045e4 <_svfiprintf_r+0x1a4>
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0c5      	beq.n	800456c <_svfiprintf_r+0x12c>
 80045e0:	9209      	str	r2, [sp, #36]	; 0x24
 80045e2:	e7c3      	b.n	800456c <_svfiprintf_r+0x12c>
 80045e4:	4342      	muls	r2, r0
 80045e6:	2301      	movs	r3, #1
 80045e8:	1852      	adds	r2, r2, r1
 80045ea:	0035      	movs	r5, r6
 80045ec:	e7f1      	b.n	80045d2 <_svfiprintf_r+0x192>
 80045ee:	ab07      	add	r3, sp, #28
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	003a      	movs	r2, r7
 80045f4:	4b10      	ldr	r3, [pc, #64]	; (8004638 <_svfiprintf_r+0x1f8>)
 80045f6:	0021      	movs	r1, r4
 80045f8:	9803      	ldr	r0, [sp, #12]
 80045fa:	e000      	b.n	80045fe <_svfiprintf_r+0x1be>
 80045fc:	bf00      	nop
 80045fe:	9004      	str	r0, [sp, #16]
 8004600:	9b04      	ldr	r3, [sp, #16]
 8004602:	3301      	adds	r3, #1
 8004604:	d1d3      	bne.n	80045ae <_svfiprintf_r+0x16e>
 8004606:	89bb      	ldrh	r3, [r7, #12]
 8004608:	980d      	ldr	r0, [sp, #52]	; 0x34
 800460a:	065b      	lsls	r3, r3, #25
 800460c:	d400      	bmi.n	8004610 <_svfiprintf_r+0x1d0>
 800460e:	e72e      	b.n	800446e <_svfiprintf_r+0x2e>
 8004610:	2001      	movs	r0, #1
 8004612:	4240      	negs	r0, r0
 8004614:	e72b      	b.n	800446e <_svfiprintf_r+0x2e>
 8004616:	ab07      	add	r3, sp, #28
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	003a      	movs	r2, r7
 800461c:	4b06      	ldr	r3, [pc, #24]	; (8004638 <_svfiprintf_r+0x1f8>)
 800461e:	0021      	movs	r1, r4
 8004620:	9803      	ldr	r0, [sp, #12]
 8004622:	f000 f879 	bl	8004718 <_printf_i>
 8004626:	e7ea      	b.n	80045fe <_svfiprintf_r+0x1be>
 8004628:	08006c1c 	.word	0x08006c1c
 800462c:	08006c22 	.word	0x08006c22
 8004630:	08006c26 	.word	0x08006c26
 8004634:	00000000 	.word	0x00000000
 8004638:	0800437d 	.word	0x0800437d

0800463c <_printf_common>:
 800463c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800463e:	0015      	movs	r5, r2
 8004640:	9301      	str	r3, [sp, #4]
 8004642:	688a      	ldr	r2, [r1, #8]
 8004644:	690b      	ldr	r3, [r1, #16]
 8004646:	9000      	str	r0, [sp, #0]
 8004648:	000c      	movs	r4, r1
 800464a:	4293      	cmp	r3, r2
 800464c:	da00      	bge.n	8004650 <_printf_common+0x14>
 800464e:	0013      	movs	r3, r2
 8004650:	0022      	movs	r2, r4
 8004652:	602b      	str	r3, [r5, #0]
 8004654:	3243      	adds	r2, #67	; 0x43
 8004656:	7812      	ldrb	r2, [r2, #0]
 8004658:	2a00      	cmp	r2, #0
 800465a:	d001      	beq.n	8004660 <_printf_common+0x24>
 800465c:	3301      	adds	r3, #1
 800465e:	602b      	str	r3, [r5, #0]
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	069b      	lsls	r3, r3, #26
 8004664:	d502      	bpl.n	800466c <_printf_common+0x30>
 8004666:	682b      	ldr	r3, [r5, #0]
 8004668:	3302      	adds	r3, #2
 800466a:	602b      	str	r3, [r5, #0]
 800466c:	2706      	movs	r7, #6
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	401f      	ands	r7, r3
 8004672:	d027      	beq.n	80046c4 <_printf_common+0x88>
 8004674:	0023      	movs	r3, r4
 8004676:	3343      	adds	r3, #67	; 0x43
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	1e5a      	subs	r2, r3, #1
 800467c:	4193      	sbcs	r3, r2
 800467e:	6822      	ldr	r2, [r4, #0]
 8004680:	0692      	lsls	r2, r2, #26
 8004682:	d430      	bmi.n	80046e6 <_printf_common+0xaa>
 8004684:	0022      	movs	r2, r4
 8004686:	9901      	ldr	r1, [sp, #4]
 8004688:	3243      	adds	r2, #67	; 0x43
 800468a:	9800      	ldr	r0, [sp, #0]
 800468c:	9e08      	ldr	r6, [sp, #32]
 800468e:	47b0      	blx	r6
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	d025      	beq.n	80046e0 <_printf_common+0xa4>
 8004694:	2306      	movs	r3, #6
 8004696:	6820      	ldr	r0, [r4, #0]
 8004698:	682a      	ldr	r2, [r5, #0]
 800469a:	68e1      	ldr	r1, [r4, #12]
 800469c:	4003      	ands	r3, r0
 800469e:	2500      	movs	r5, #0
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d103      	bne.n	80046ac <_printf_common+0x70>
 80046a4:	1a8d      	subs	r5, r1, r2
 80046a6:	43eb      	mvns	r3, r5
 80046a8:	17db      	asrs	r3, r3, #31
 80046aa:	401d      	ands	r5, r3
 80046ac:	68a3      	ldr	r3, [r4, #8]
 80046ae:	6922      	ldr	r2, [r4, #16]
 80046b0:	4293      	cmp	r3, r2
 80046b2:	dd01      	ble.n	80046b8 <_printf_common+0x7c>
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	18ed      	adds	r5, r5, r3
 80046b8:	2700      	movs	r7, #0
 80046ba:	42bd      	cmp	r5, r7
 80046bc:	d120      	bne.n	8004700 <_printf_common+0xc4>
 80046be:	2000      	movs	r0, #0
 80046c0:	e010      	b.n	80046e4 <_printf_common+0xa8>
 80046c2:	3701      	adds	r7, #1
 80046c4:	68e3      	ldr	r3, [r4, #12]
 80046c6:	682a      	ldr	r2, [r5, #0]
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	42bb      	cmp	r3, r7
 80046cc:	ddd2      	ble.n	8004674 <_printf_common+0x38>
 80046ce:	0022      	movs	r2, r4
 80046d0:	2301      	movs	r3, #1
 80046d2:	3219      	adds	r2, #25
 80046d4:	9901      	ldr	r1, [sp, #4]
 80046d6:	9800      	ldr	r0, [sp, #0]
 80046d8:	9e08      	ldr	r6, [sp, #32]
 80046da:	47b0      	blx	r6
 80046dc:	1c43      	adds	r3, r0, #1
 80046de:	d1f0      	bne.n	80046c2 <_printf_common+0x86>
 80046e0:	2001      	movs	r0, #1
 80046e2:	4240      	negs	r0, r0
 80046e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046e6:	2030      	movs	r0, #48	; 0x30
 80046e8:	18e1      	adds	r1, r4, r3
 80046ea:	3143      	adds	r1, #67	; 0x43
 80046ec:	7008      	strb	r0, [r1, #0]
 80046ee:	0021      	movs	r1, r4
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	3145      	adds	r1, #69	; 0x45
 80046f4:	7809      	ldrb	r1, [r1, #0]
 80046f6:	18a2      	adds	r2, r4, r2
 80046f8:	3243      	adds	r2, #67	; 0x43
 80046fa:	3302      	adds	r3, #2
 80046fc:	7011      	strb	r1, [r2, #0]
 80046fe:	e7c1      	b.n	8004684 <_printf_common+0x48>
 8004700:	0022      	movs	r2, r4
 8004702:	2301      	movs	r3, #1
 8004704:	321a      	adds	r2, #26
 8004706:	9901      	ldr	r1, [sp, #4]
 8004708:	9800      	ldr	r0, [sp, #0]
 800470a:	9e08      	ldr	r6, [sp, #32]
 800470c:	47b0      	blx	r6
 800470e:	1c43      	adds	r3, r0, #1
 8004710:	d0e6      	beq.n	80046e0 <_printf_common+0xa4>
 8004712:	3701      	adds	r7, #1
 8004714:	e7d1      	b.n	80046ba <_printf_common+0x7e>
	...

08004718 <_printf_i>:
 8004718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471a:	b089      	sub	sp, #36	; 0x24
 800471c:	9204      	str	r2, [sp, #16]
 800471e:	000a      	movs	r2, r1
 8004720:	3243      	adds	r2, #67	; 0x43
 8004722:	9305      	str	r3, [sp, #20]
 8004724:	9003      	str	r0, [sp, #12]
 8004726:	9202      	str	r2, [sp, #8]
 8004728:	7e0a      	ldrb	r2, [r1, #24]
 800472a:	000c      	movs	r4, r1
 800472c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800472e:	2a6e      	cmp	r2, #110	; 0x6e
 8004730:	d100      	bne.n	8004734 <_printf_i+0x1c>
 8004732:	e086      	b.n	8004842 <_printf_i+0x12a>
 8004734:	d81f      	bhi.n	8004776 <_printf_i+0x5e>
 8004736:	2a63      	cmp	r2, #99	; 0x63
 8004738:	d033      	beq.n	80047a2 <_printf_i+0x8a>
 800473a:	d808      	bhi.n	800474e <_printf_i+0x36>
 800473c:	2a00      	cmp	r2, #0
 800473e:	d100      	bne.n	8004742 <_printf_i+0x2a>
 8004740:	e08c      	b.n	800485c <_printf_i+0x144>
 8004742:	2a58      	cmp	r2, #88	; 0x58
 8004744:	d04d      	beq.n	80047e2 <_printf_i+0xca>
 8004746:	0025      	movs	r5, r4
 8004748:	3542      	adds	r5, #66	; 0x42
 800474a:	702a      	strb	r2, [r5, #0]
 800474c:	e030      	b.n	80047b0 <_printf_i+0x98>
 800474e:	2a64      	cmp	r2, #100	; 0x64
 8004750:	d001      	beq.n	8004756 <_printf_i+0x3e>
 8004752:	2a69      	cmp	r2, #105	; 0x69
 8004754:	d1f7      	bne.n	8004746 <_printf_i+0x2e>
 8004756:	6819      	ldr	r1, [r3, #0]
 8004758:	6825      	ldr	r5, [r4, #0]
 800475a:	1d0a      	adds	r2, r1, #4
 800475c:	0628      	lsls	r0, r5, #24
 800475e:	d529      	bpl.n	80047b4 <_printf_i+0x9c>
 8004760:	6808      	ldr	r0, [r1, #0]
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	2800      	cmp	r0, #0
 8004766:	da03      	bge.n	8004770 <_printf_i+0x58>
 8004768:	232d      	movs	r3, #45	; 0x2d
 800476a:	9a02      	ldr	r2, [sp, #8]
 800476c:	4240      	negs	r0, r0
 800476e:	7013      	strb	r3, [r2, #0]
 8004770:	4e6b      	ldr	r6, [pc, #428]	; (8004920 <_printf_i+0x208>)
 8004772:	270a      	movs	r7, #10
 8004774:	e04f      	b.n	8004816 <_printf_i+0xfe>
 8004776:	2a73      	cmp	r2, #115	; 0x73
 8004778:	d074      	beq.n	8004864 <_printf_i+0x14c>
 800477a:	d808      	bhi.n	800478e <_printf_i+0x76>
 800477c:	2a6f      	cmp	r2, #111	; 0x6f
 800477e:	d01f      	beq.n	80047c0 <_printf_i+0xa8>
 8004780:	2a70      	cmp	r2, #112	; 0x70
 8004782:	d1e0      	bne.n	8004746 <_printf_i+0x2e>
 8004784:	2220      	movs	r2, #32
 8004786:	6809      	ldr	r1, [r1, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	6022      	str	r2, [r4, #0]
 800478c:	e003      	b.n	8004796 <_printf_i+0x7e>
 800478e:	2a75      	cmp	r2, #117	; 0x75
 8004790:	d016      	beq.n	80047c0 <_printf_i+0xa8>
 8004792:	2a78      	cmp	r2, #120	; 0x78
 8004794:	d1d7      	bne.n	8004746 <_printf_i+0x2e>
 8004796:	0022      	movs	r2, r4
 8004798:	2178      	movs	r1, #120	; 0x78
 800479a:	3245      	adds	r2, #69	; 0x45
 800479c:	7011      	strb	r1, [r2, #0]
 800479e:	4e61      	ldr	r6, [pc, #388]	; (8004924 <_printf_i+0x20c>)
 80047a0:	e022      	b.n	80047e8 <_printf_i+0xd0>
 80047a2:	0025      	movs	r5, r4
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	3542      	adds	r5, #66	; 0x42
 80047a8:	1d11      	adds	r1, r2, #4
 80047aa:	6019      	str	r1, [r3, #0]
 80047ac:	6813      	ldr	r3, [r2, #0]
 80047ae:	702b      	strb	r3, [r5, #0]
 80047b0:	2301      	movs	r3, #1
 80047b2:	e065      	b.n	8004880 <_printf_i+0x168>
 80047b4:	6808      	ldr	r0, [r1, #0]
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	0669      	lsls	r1, r5, #25
 80047ba:	d5d3      	bpl.n	8004764 <_printf_i+0x4c>
 80047bc:	b200      	sxth	r0, r0
 80047be:	e7d1      	b.n	8004764 <_printf_i+0x4c>
 80047c0:	6819      	ldr	r1, [r3, #0]
 80047c2:	6825      	ldr	r5, [r4, #0]
 80047c4:	1d08      	adds	r0, r1, #4
 80047c6:	6018      	str	r0, [r3, #0]
 80047c8:	6808      	ldr	r0, [r1, #0]
 80047ca:	062e      	lsls	r6, r5, #24
 80047cc:	d505      	bpl.n	80047da <_printf_i+0xc2>
 80047ce:	4e54      	ldr	r6, [pc, #336]	; (8004920 <_printf_i+0x208>)
 80047d0:	2708      	movs	r7, #8
 80047d2:	2a6f      	cmp	r2, #111	; 0x6f
 80047d4:	d01b      	beq.n	800480e <_printf_i+0xf6>
 80047d6:	270a      	movs	r7, #10
 80047d8:	e019      	b.n	800480e <_printf_i+0xf6>
 80047da:	066d      	lsls	r5, r5, #25
 80047dc:	d5f7      	bpl.n	80047ce <_printf_i+0xb6>
 80047de:	b280      	uxth	r0, r0
 80047e0:	e7f5      	b.n	80047ce <_printf_i+0xb6>
 80047e2:	3145      	adds	r1, #69	; 0x45
 80047e4:	4e4e      	ldr	r6, [pc, #312]	; (8004920 <_printf_i+0x208>)
 80047e6:	700a      	strb	r2, [r1, #0]
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	6822      	ldr	r2, [r4, #0]
 80047ec:	1d01      	adds	r1, r0, #4
 80047ee:	6800      	ldr	r0, [r0, #0]
 80047f0:	6019      	str	r1, [r3, #0]
 80047f2:	0615      	lsls	r5, r2, #24
 80047f4:	d521      	bpl.n	800483a <_printf_i+0x122>
 80047f6:	07d3      	lsls	r3, r2, #31
 80047f8:	d502      	bpl.n	8004800 <_printf_i+0xe8>
 80047fa:	2320      	movs	r3, #32
 80047fc:	431a      	orrs	r2, r3
 80047fe:	6022      	str	r2, [r4, #0]
 8004800:	2710      	movs	r7, #16
 8004802:	2800      	cmp	r0, #0
 8004804:	d103      	bne.n	800480e <_printf_i+0xf6>
 8004806:	2320      	movs	r3, #32
 8004808:	6822      	ldr	r2, [r4, #0]
 800480a:	439a      	bics	r2, r3
 800480c:	6022      	str	r2, [r4, #0]
 800480e:	0023      	movs	r3, r4
 8004810:	2200      	movs	r2, #0
 8004812:	3343      	adds	r3, #67	; 0x43
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	6863      	ldr	r3, [r4, #4]
 8004818:	60a3      	str	r3, [r4, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	db58      	blt.n	80048d0 <_printf_i+0x1b8>
 800481e:	2204      	movs	r2, #4
 8004820:	6821      	ldr	r1, [r4, #0]
 8004822:	4391      	bics	r1, r2
 8004824:	6021      	str	r1, [r4, #0]
 8004826:	2800      	cmp	r0, #0
 8004828:	d154      	bne.n	80048d4 <_printf_i+0x1bc>
 800482a:	9d02      	ldr	r5, [sp, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d05a      	beq.n	80048e6 <_printf_i+0x1ce>
 8004830:	0025      	movs	r5, r4
 8004832:	7833      	ldrb	r3, [r6, #0]
 8004834:	3542      	adds	r5, #66	; 0x42
 8004836:	702b      	strb	r3, [r5, #0]
 8004838:	e055      	b.n	80048e6 <_printf_i+0x1ce>
 800483a:	0655      	lsls	r5, r2, #25
 800483c:	d5db      	bpl.n	80047f6 <_printf_i+0xde>
 800483e:	b280      	uxth	r0, r0
 8004840:	e7d9      	b.n	80047f6 <_printf_i+0xde>
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	680d      	ldr	r5, [r1, #0]
 8004846:	1d10      	adds	r0, r2, #4
 8004848:	6949      	ldr	r1, [r1, #20]
 800484a:	6018      	str	r0, [r3, #0]
 800484c:	6813      	ldr	r3, [r2, #0]
 800484e:	062e      	lsls	r6, r5, #24
 8004850:	d501      	bpl.n	8004856 <_printf_i+0x13e>
 8004852:	6019      	str	r1, [r3, #0]
 8004854:	e002      	b.n	800485c <_printf_i+0x144>
 8004856:	066d      	lsls	r5, r5, #25
 8004858:	d5fb      	bpl.n	8004852 <_printf_i+0x13a>
 800485a:	8019      	strh	r1, [r3, #0]
 800485c:	2300      	movs	r3, #0
 800485e:	9d02      	ldr	r5, [sp, #8]
 8004860:	6123      	str	r3, [r4, #16]
 8004862:	e04f      	b.n	8004904 <_printf_i+0x1ec>
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	1d11      	adds	r1, r2, #4
 8004868:	6019      	str	r1, [r3, #0]
 800486a:	6815      	ldr	r5, [r2, #0]
 800486c:	2100      	movs	r1, #0
 800486e:	6862      	ldr	r2, [r4, #4]
 8004870:	0028      	movs	r0, r5
 8004872:	f000 f859 	bl	8004928 <memchr>
 8004876:	2800      	cmp	r0, #0
 8004878:	d001      	beq.n	800487e <_printf_i+0x166>
 800487a:	1b40      	subs	r0, r0, r5
 800487c:	6060      	str	r0, [r4, #4]
 800487e:	6863      	ldr	r3, [r4, #4]
 8004880:	6123      	str	r3, [r4, #16]
 8004882:	2300      	movs	r3, #0
 8004884:	9a02      	ldr	r2, [sp, #8]
 8004886:	7013      	strb	r3, [r2, #0]
 8004888:	e03c      	b.n	8004904 <_printf_i+0x1ec>
 800488a:	6923      	ldr	r3, [r4, #16]
 800488c:	002a      	movs	r2, r5
 800488e:	9904      	ldr	r1, [sp, #16]
 8004890:	9803      	ldr	r0, [sp, #12]
 8004892:	9d05      	ldr	r5, [sp, #20]
 8004894:	47a8      	blx	r5
 8004896:	1c43      	adds	r3, r0, #1
 8004898:	d03e      	beq.n	8004918 <_printf_i+0x200>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	079b      	lsls	r3, r3, #30
 800489e:	d415      	bmi.n	80048cc <_printf_i+0x1b4>
 80048a0:	9b07      	ldr	r3, [sp, #28]
 80048a2:	68e0      	ldr	r0, [r4, #12]
 80048a4:	4298      	cmp	r0, r3
 80048a6:	da39      	bge.n	800491c <_printf_i+0x204>
 80048a8:	0018      	movs	r0, r3
 80048aa:	e037      	b.n	800491c <_printf_i+0x204>
 80048ac:	0022      	movs	r2, r4
 80048ae:	2301      	movs	r3, #1
 80048b0:	3219      	adds	r2, #25
 80048b2:	9904      	ldr	r1, [sp, #16]
 80048b4:	9803      	ldr	r0, [sp, #12]
 80048b6:	9e05      	ldr	r6, [sp, #20]
 80048b8:	47b0      	blx	r6
 80048ba:	1c43      	adds	r3, r0, #1
 80048bc:	d02c      	beq.n	8004918 <_printf_i+0x200>
 80048be:	3501      	adds	r5, #1
 80048c0:	68e3      	ldr	r3, [r4, #12]
 80048c2:	9a07      	ldr	r2, [sp, #28]
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	42ab      	cmp	r3, r5
 80048c8:	dcf0      	bgt.n	80048ac <_printf_i+0x194>
 80048ca:	e7e9      	b.n	80048a0 <_printf_i+0x188>
 80048cc:	2500      	movs	r5, #0
 80048ce:	e7f7      	b.n	80048c0 <_printf_i+0x1a8>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	d0ad      	beq.n	8004830 <_printf_i+0x118>
 80048d4:	9d02      	ldr	r5, [sp, #8]
 80048d6:	0039      	movs	r1, r7
 80048d8:	f7fb fc9c 	bl	8000214 <__aeabi_uidivmod>
 80048dc:	5c73      	ldrb	r3, [r6, r1]
 80048de:	3d01      	subs	r5, #1
 80048e0:	702b      	strb	r3, [r5, #0]
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d1f7      	bne.n	80048d6 <_printf_i+0x1be>
 80048e6:	2f08      	cmp	r7, #8
 80048e8:	d109      	bne.n	80048fe <_printf_i+0x1e6>
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	07db      	lsls	r3, r3, #31
 80048ee:	d506      	bpl.n	80048fe <_printf_i+0x1e6>
 80048f0:	6863      	ldr	r3, [r4, #4]
 80048f2:	6922      	ldr	r2, [r4, #16]
 80048f4:	4293      	cmp	r3, r2
 80048f6:	dc02      	bgt.n	80048fe <_printf_i+0x1e6>
 80048f8:	2330      	movs	r3, #48	; 0x30
 80048fa:	3d01      	subs	r5, #1
 80048fc:	702b      	strb	r3, [r5, #0]
 80048fe:	9b02      	ldr	r3, [sp, #8]
 8004900:	1b5b      	subs	r3, r3, r5
 8004902:	6123      	str	r3, [r4, #16]
 8004904:	9b05      	ldr	r3, [sp, #20]
 8004906:	aa07      	add	r2, sp, #28
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	0021      	movs	r1, r4
 800490c:	9b04      	ldr	r3, [sp, #16]
 800490e:	9803      	ldr	r0, [sp, #12]
 8004910:	f7ff fe94 	bl	800463c <_printf_common>
 8004914:	1c43      	adds	r3, r0, #1
 8004916:	d1b8      	bne.n	800488a <_printf_i+0x172>
 8004918:	2001      	movs	r0, #1
 800491a:	4240      	negs	r0, r0
 800491c:	b009      	add	sp, #36	; 0x24
 800491e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004920:	08006c2d 	.word	0x08006c2d
 8004924:	08006c3e 	.word	0x08006c3e

08004928 <memchr>:
 8004928:	b2c9      	uxtb	r1, r1
 800492a:	1882      	adds	r2, r0, r2
 800492c:	4290      	cmp	r0, r2
 800492e:	d101      	bne.n	8004934 <memchr+0xc>
 8004930:	2000      	movs	r0, #0
 8004932:	4770      	bx	lr
 8004934:	7803      	ldrb	r3, [r0, #0]
 8004936:	428b      	cmp	r3, r1
 8004938:	d0fb      	beq.n	8004932 <memchr+0xa>
 800493a:	3001      	adds	r0, #1
 800493c:	e7f6      	b.n	800492c <memchr+0x4>

0800493e <memcpy>:
 800493e:	2300      	movs	r3, #0
 8004940:	b510      	push	{r4, lr}
 8004942:	429a      	cmp	r2, r3
 8004944:	d100      	bne.n	8004948 <memcpy+0xa>
 8004946:	bd10      	pop	{r4, pc}
 8004948:	5ccc      	ldrb	r4, [r1, r3]
 800494a:	54c4      	strb	r4, [r0, r3]
 800494c:	3301      	adds	r3, #1
 800494e:	e7f8      	b.n	8004942 <memcpy+0x4>

08004950 <_free_r>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	0005      	movs	r5, r0
 8004954:	2900      	cmp	r1, #0
 8004956:	d010      	beq.n	800497a <_free_r+0x2a>
 8004958:	1f0c      	subs	r4, r1, #4
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	da00      	bge.n	8004962 <_free_r+0x12>
 8004960:	18e4      	adds	r4, r4, r3
 8004962:	0028      	movs	r0, r5
 8004964:	f000 f8d4 	bl	8004b10 <__malloc_lock>
 8004968:	4a1d      	ldr	r2, [pc, #116]	; (80049e0 <_free_r+0x90>)
 800496a:	6813      	ldr	r3, [r2, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d105      	bne.n	800497c <_free_r+0x2c>
 8004970:	6063      	str	r3, [r4, #4]
 8004972:	6014      	str	r4, [r2, #0]
 8004974:	0028      	movs	r0, r5
 8004976:	f000 f8cc 	bl	8004b12 <__malloc_unlock>
 800497a:	bd70      	pop	{r4, r5, r6, pc}
 800497c:	42a3      	cmp	r3, r4
 800497e:	d909      	bls.n	8004994 <_free_r+0x44>
 8004980:	6821      	ldr	r1, [r4, #0]
 8004982:	1860      	adds	r0, r4, r1
 8004984:	4283      	cmp	r3, r0
 8004986:	d1f3      	bne.n	8004970 <_free_r+0x20>
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	1841      	adds	r1, r0, r1
 800498e:	6021      	str	r1, [r4, #0]
 8004990:	e7ee      	b.n	8004970 <_free_r+0x20>
 8004992:	0013      	movs	r3, r2
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	2a00      	cmp	r2, #0
 8004998:	d001      	beq.n	800499e <_free_r+0x4e>
 800499a:	42a2      	cmp	r2, r4
 800499c:	d9f9      	bls.n	8004992 <_free_r+0x42>
 800499e:	6819      	ldr	r1, [r3, #0]
 80049a0:	1858      	adds	r0, r3, r1
 80049a2:	42a0      	cmp	r0, r4
 80049a4:	d10b      	bne.n	80049be <_free_r+0x6e>
 80049a6:	6820      	ldr	r0, [r4, #0]
 80049a8:	1809      	adds	r1, r1, r0
 80049aa:	1858      	adds	r0, r3, r1
 80049ac:	6019      	str	r1, [r3, #0]
 80049ae:	4282      	cmp	r2, r0
 80049b0:	d1e0      	bne.n	8004974 <_free_r+0x24>
 80049b2:	6810      	ldr	r0, [r2, #0]
 80049b4:	6852      	ldr	r2, [r2, #4]
 80049b6:	1841      	adds	r1, r0, r1
 80049b8:	6019      	str	r1, [r3, #0]
 80049ba:	605a      	str	r2, [r3, #4]
 80049bc:	e7da      	b.n	8004974 <_free_r+0x24>
 80049be:	42a0      	cmp	r0, r4
 80049c0:	d902      	bls.n	80049c8 <_free_r+0x78>
 80049c2:	230c      	movs	r3, #12
 80049c4:	602b      	str	r3, [r5, #0]
 80049c6:	e7d5      	b.n	8004974 <_free_r+0x24>
 80049c8:	6821      	ldr	r1, [r4, #0]
 80049ca:	1860      	adds	r0, r4, r1
 80049cc:	4282      	cmp	r2, r0
 80049ce:	d103      	bne.n	80049d8 <_free_r+0x88>
 80049d0:	6810      	ldr	r0, [r2, #0]
 80049d2:	6852      	ldr	r2, [r2, #4]
 80049d4:	1841      	adds	r1, r0, r1
 80049d6:	6021      	str	r1, [r4, #0]
 80049d8:	6062      	str	r2, [r4, #4]
 80049da:	605c      	str	r4, [r3, #4]
 80049dc:	e7ca      	b.n	8004974 <_free_r+0x24>
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	20000cb4 	.word	0x20000cb4

080049e4 <_malloc_r>:
 80049e4:	2303      	movs	r3, #3
 80049e6:	b570      	push	{r4, r5, r6, lr}
 80049e8:	1ccd      	adds	r5, r1, #3
 80049ea:	439d      	bics	r5, r3
 80049ec:	3508      	adds	r5, #8
 80049ee:	0006      	movs	r6, r0
 80049f0:	2d0c      	cmp	r5, #12
 80049f2:	d21e      	bcs.n	8004a32 <_malloc_r+0x4e>
 80049f4:	250c      	movs	r5, #12
 80049f6:	42a9      	cmp	r1, r5
 80049f8:	d81d      	bhi.n	8004a36 <_malloc_r+0x52>
 80049fa:	0030      	movs	r0, r6
 80049fc:	f000 f888 	bl	8004b10 <__malloc_lock>
 8004a00:	4a25      	ldr	r2, [pc, #148]	; (8004a98 <_malloc_r+0xb4>)
 8004a02:	6814      	ldr	r4, [r2, #0]
 8004a04:	0021      	movs	r1, r4
 8004a06:	2900      	cmp	r1, #0
 8004a08:	d119      	bne.n	8004a3e <_malloc_r+0x5a>
 8004a0a:	4c24      	ldr	r4, [pc, #144]	; (8004a9c <_malloc_r+0xb8>)
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d103      	bne.n	8004a1a <_malloc_r+0x36>
 8004a12:	0030      	movs	r0, r6
 8004a14:	f000 f86a 	bl	8004aec <_sbrk_r>
 8004a18:	6020      	str	r0, [r4, #0]
 8004a1a:	0029      	movs	r1, r5
 8004a1c:	0030      	movs	r0, r6
 8004a1e:	f000 f865 	bl	8004aec <_sbrk_r>
 8004a22:	1c43      	adds	r3, r0, #1
 8004a24:	d12b      	bne.n	8004a7e <_malloc_r+0x9a>
 8004a26:	230c      	movs	r3, #12
 8004a28:	0030      	movs	r0, r6
 8004a2a:	6033      	str	r3, [r6, #0]
 8004a2c:	f000 f871 	bl	8004b12 <__malloc_unlock>
 8004a30:	e003      	b.n	8004a3a <_malloc_r+0x56>
 8004a32:	2d00      	cmp	r5, #0
 8004a34:	dadf      	bge.n	80049f6 <_malloc_r+0x12>
 8004a36:	230c      	movs	r3, #12
 8004a38:	6033      	str	r3, [r6, #0]
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	bd70      	pop	{r4, r5, r6, pc}
 8004a3e:	680b      	ldr	r3, [r1, #0]
 8004a40:	1b5b      	subs	r3, r3, r5
 8004a42:	d419      	bmi.n	8004a78 <_malloc_r+0x94>
 8004a44:	2b0b      	cmp	r3, #11
 8004a46:	d903      	bls.n	8004a50 <_malloc_r+0x6c>
 8004a48:	600b      	str	r3, [r1, #0]
 8004a4a:	18cc      	adds	r4, r1, r3
 8004a4c:	6025      	str	r5, [r4, #0]
 8004a4e:	e003      	b.n	8004a58 <_malloc_r+0x74>
 8004a50:	684b      	ldr	r3, [r1, #4]
 8004a52:	428c      	cmp	r4, r1
 8004a54:	d10d      	bne.n	8004a72 <_malloc_r+0x8e>
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	0030      	movs	r0, r6
 8004a5a:	f000 f85a 	bl	8004b12 <__malloc_unlock>
 8004a5e:	0020      	movs	r0, r4
 8004a60:	2207      	movs	r2, #7
 8004a62:	300b      	adds	r0, #11
 8004a64:	1d23      	adds	r3, r4, #4
 8004a66:	4390      	bics	r0, r2
 8004a68:	1ac3      	subs	r3, r0, r3
 8004a6a:	d0e7      	beq.n	8004a3c <_malloc_r+0x58>
 8004a6c:	425a      	negs	r2, r3
 8004a6e:	50e2      	str	r2, [r4, r3]
 8004a70:	e7e4      	b.n	8004a3c <_malloc_r+0x58>
 8004a72:	6063      	str	r3, [r4, #4]
 8004a74:	000c      	movs	r4, r1
 8004a76:	e7ef      	b.n	8004a58 <_malloc_r+0x74>
 8004a78:	000c      	movs	r4, r1
 8004a7a:	6849      	ldr	r1, [r1, #4]
 8004a7c:	e7c3      	b.n	8004a06 <_malloc_r+0x22>
 8004a7e:	2303      	movs	r3, #3
 8004a80:	1cc4      	adds	r4, r0, #3
 8004a82:	439c      	bics	r4, r3
 8004a84:	42a0      	cmp	r0, r4
 8004a86:	d0e1      	beq.n	8004a4c <_malloc_r+0x68>
 8004a88:	1a21      	subs	r1, r4, r0
 8004a8a:	0030      	movs	r0, r6
 8004a8c:	f000 f82e 	bl	8004aec <_sbrk_r>
 8004a90:	1c43      	adds	r3, r0, #1
 8004a92:	d1db      	bne.n	8004a4c <_malloc_r+0x68>
 8004a94:	e7c7      	b.n	8004a26 <_malloc_r+0x42>
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	20000cb4 	.word	0x20000cb4
 8004a9c:	20000cb8 	.word	0x20000cb8

08004aa0 <_realloc_r>:
 8004aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa2:	0007      	movs	r7, r0
 8004aa4:	000d      	movs	r5, r1
 8004aa6:	0016      	movs	r6, r2
 8004aa8:	2900      	cmp	r1, #0
 8004aaa:	d105      	bne.n	8004ab8 <_realloc_r+0x18>
 8004aac:	0011      	movs	r1, r2
 8004aae:	f7ff ff99 	bl	80049e4 <_malloc_r>
 8004ab2:	0004      	movs	r4, r0
 8004ab4:	0020      	movs	r0, r4
 8004ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ab8:	2a00      	cmp	r2, #0
 8004aba:	d103      	bne.n	8004ac4 <_realloc_r+0x24>
 8004abc:	f7ff ff48 	bl	8004950 <_free_r>
 8004ac0:	0034      	movs	r4, r6
 8004ac2:	e7f7      	b.n	8004ab4 <_realloc_r+0x14>
 8004ac4:	f000 f826 	bl	8004b14 <_malloc_usable_size_r>
 8004ac8:	002c      	movs	r4, r5
 8004aca:	42b0      	cmp	r0, r6
 8004acc:	d2f2      	bcs.n	8004ab4 <_realloc_r+0x14>
 8004ace:	0031      	movs	r1, r6
 8004ad0:	0038      	movs	r0, r7
 8004ad2:	f7ff ff87 	bl	80049e4 <_malloc_r>
 8004ad6:	1e04      	subs	r4, r0, #0
 8004ad8:	d0ec      	beq.n	8004ab4 <_realloc_r+0x14>
 8004ada:	0029      	movs	r1, r5
 8004adc:	0032      	movs	r2, r6
 8004ade:	f7ff ff2e 	bl	800493e <memcpy>
 8004ae2:	0029      	movs	r1, r5
 8004ae4:	0038      	movs	r0, r7
 8004ae6:	f7ff ff33 	bl	8004950 <_free_r>
 8004aea:	e7e3      	b.n	8004ab4 <_realloc_r+0x14>

08004aec <_sbrk_r>:
 8004aec:	2300      	movs	r3, #0
 8004aee:	b570      	push	{r4, r5, r6, lr}
 8004af0:	4c06      	ldr	r4, [pc, #24]	; (8004b0c <_sbrk_r+0x20>)
 8004af2:	0005      	movs	r5, r0
 8004af4:	0008      	movs	r0, r1
 8004af6:	6023      	str	r3, [r4, #0]
 8004af8:	f7fb ffee 	bl	8000ad8 <_sbrk>
 8004afc:	1c43      	adds	r3, r0, #1
 8004afe:	d103      	bne.n	8004b08 <_sbrk_r+0x1c>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d000      	beq.n	8004b08 <_sbrk_r+0x1c>
 8004b06:	602b      	str	r3, [r5, #0]
 8004b08:	bd70      	pop	{r4, r5, r6, pc}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	20000f28 	.word	0x20000f28

08004b10 <__malloc_lock>:
 8004b10:	4770      	bx	lr

08004b12 <__malloc_unlock>:
 8004b12:	4770      	bx	lr

08004b14 <_malloc_usable_size_r>:
 8004b14:	1f0b      	subs	r3, r1, #4
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	1f18      	subs	r0, r3, #4
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	da01      	bge.n	8004b22 <_malloc_usable_size_r+0xe>
 8004b1e:	580b      	ldr	r3, [r1, r0]
 8004b20:	18c0      	adds	r0, r0, r3
 8004b22:	4770      	bx	lr

08004b24 <_init>:
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2a:	bc08      	pop	{r3}
 8004b2c:	469e      	mov	lr, r3
 8004b2e:	4770      	bx	lr

08004b30 <_fini>:
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b36:	bc08      	pop	{r3}
 8004b38:	469e      	mov	lr, r3
 8004b3a:	4770      	bx	lr
