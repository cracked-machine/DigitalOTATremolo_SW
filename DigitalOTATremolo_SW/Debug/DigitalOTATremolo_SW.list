
DigitalOTATremolo_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f80  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002040  08002040  00012040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002070  08002070  0002080c  2**0
                  CONTENTS
  4 .ARM          00000000  08002070  08002070  0002080c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002070  08002070  0002080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002070  08002070  00012070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002074  08002074  00012074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000080c  20000000  08002078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000080c  08002884  0002080c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000948  08002884  00020948  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002080c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094a8  00000000  00000000  00020834  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cc4  00000000  00000000  00029cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ae8  00000000  00000000  0002b9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d0  00000000  00000000  0002c488  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015d4a  00000000  00000000  0002ce58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009983  00000000  00000000  00042ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000788f0  00000000  00000000  0004c525  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4e15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002584  00000000  00000000  000c4e90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000080c 	.word	0x2000080c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002028 	.word	0x08002028

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000810 	.word	0x20000810
 8000104:	08002028 	.word	0x08002028

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_DAC_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000226:	003b      	movs	r3, r7
 8000228:	0018      	movs	r0, r3
 800022a:	2308      	movs	r3, #8
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f001 fef2 	bl	8002018 <memset>

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <MX_DAC_Init+0x6c>)
 8000236:	4a16      	ldr	r2, [pc, #88]	; (8000290 <MX_DAC_Init+0x70>)
 8000238:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800023a:	4b14      	ldr	r3, [pc, #80]	; (800028c <MX_DAC_Init+0x6c>)
 800023c:	0018      	movs	r0, r3
 800023e:	f000 fbf5 	bl	8000a2c <HAL_DAC_Init>
 8000242:	1e03      	subs	r3, r0, #0
 8000244:	d001      	beq.n	800024a <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 8000246:	f000 f979 	bl	800053c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800024a:	003b      	movs	r3, r7
 800024c:	2204      	movs	r2, #4
 800024e:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000250:	003b      	movs	r3, r7
 8000252:	2200      	movs	r2, #0
 8000254:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000256:	0039      	movs	r1, r7
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <MX_DAC_Init+0x6c>)
 800025a:	2200      	movs	r2, #0
 800025c:	0018      	movs	r0, r3
 800025e:	f000 fc21 	bl	8000aa4 <HAL_DAC_ConfigChannel>
 8000262:	1e03      	subs	r3, r0, #0
 8000264:	d001      	beq.n	800026a <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 8000266:	f000 f969 	bl	800053c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800026a:	003b      	movs	r3, r7
 800026c:	2214      	movs	r2, #20
 800026e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000270:	0039      	movs	r1, r7
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <MX_DAC_Init+0x6c>)
 8000274:	2210      	movs	r2, #16
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fc14 	bl	8000aa4 <HAL_DAC_ConfigChannel>
 800027c:	1e03      	subs	r3, r0, #0
 800027e:	d001      	beq.n	8000284 <MX_DAC_Init+0x64>
  {
    Error_Handler();
 8000280:	f000 f95c 	bl	800053c <Error_Handler>
  }

}
 8000284:	46c0      	nop			; (mov r8, r8)
 8000286:	46bd      	mov	sp, r7
 8000288:	b002      	add	sp, #8
 800028a:	bd80      	pop	{r7, pc}
 800028c:	2000086c 	.word	0x2000086c
 8000290:	40007400 	.word	0x40007400

08000294 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b08a      	sub	sp, #40	; 0x28
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029c:	2314      	movs	r3, #20
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	0018      	movs	r0, r3
 80002a2:	2314      	movs	r3, #20
 80002a4:	001a      	movs	r2, r3
 80002a6:	2100      	movs	r1, #0
 80002a8:	f001 feb6 	bl	8002018 <memset>
  if(dacHandle->Instance==DAC)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a42      	ldr	r2, [pc, #264]	; (80003bc <HAL_DAC_MspInit+0x128>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d000      	beq.n	80002b8 <HAL_DAC_MspInit+0x24>
 80002b6:	e07c      	b.n	80003b2 <HAL_DAC_MspInit+0x11e>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80002b8:	4b41      	ldr	r3, [pc, #260]	; (80003c0 <HAL_DAC_MspInit+0x12c>)
 80002ba:	69da      	ldr	r2, [r3, #28]
 80002bc:	4b40      	ldr	r3, [pc, #256]	; (80003c0 <HAL_DAC_MspInit+0x12c>)
 80002be:	2180      	movs	r1, #128	; 0x80
 80002c0:	0589      	lsls	r1, r1, #22
 80002c2:	430a      	orrs	r2, r1
 80002c4:	61da      	str	r2, [r3, #28]
 80002c6:	4b3e      	ldr	r3, [pc, #248]	; (80003c0 <HAL_DAC_MspInit+0x12c>)
 80002c8:	69da      	ldr	r2, [r3, #28]
 80002ca:	2380      	movs	r3, #128	; 0x80
 80002cc:	059b      	lsls	r3, r3, #22
 80002ce:	4013      	ands	r3, r2
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d4:	4b3a      	ldr	r3, [pc, #232]	; (80003c0 <HAL_DAC_MspInit+0x12c>)
 80002d6:	695a      	ldr	r2, [r3, #20]
 80002d8:	4b39      	ldr	r3, [pc, #228]	; (80003c0 <HAL_DAC_MspInit+0x12c>)
 80002da:	2180      	movs	r1, #128	; 0x80
 80002dc:	0289      	lsls	r1, r1, #10
 80002de:	430a      	orrs	r2, r1
 80002e0:	615a      	str	r2, [r3, #20]
 80002e2:	4b37      	ldr	r3, [pc, #220]	; (80003c0 <HAL_DAC_MspInit+0x12c>)
 80002e4:	695a      	ldr	r2, [r3, #20]
 80002e6:	2380      	movs	r3, #128	; 0x80
 80002e8:	029b      	lsls	r3, r3, #10
 80002ea:	4013      	ands	r3, r2
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80002f0:	2114      	movs	r1, #20
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2230      	movs	r2, #48	; 0x30
 80002f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2203      	movs	r2, #3
 80002fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000304:	187a      	adds	r2, r7, r1
 8000306:	2390      	movs	r3, #144	; 0x90
 8000308:	05db      	lsls	r3, r3, #23
 800030a:	0011      	movs	r1, r2
 800030c:	0018      	movs	r0, r3
 800030e:	f000 fedd 	bl	80010cc <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000312:	4b2c      	ldr	r3, [pc, #176]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 8000314:	4a2c      	ldr	r2, [pc, #176]	; (80003c8 <HAL_DAC_MspInit+0x134>)
 8000316:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000318:	4b2a      	ldr	r3, [pc, #168]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 800031a:	2210      	movs	r2, #16
 800031c:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800031e:	4b29      	ldr	r3, [pc, #164]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000324:	4b27      	ldr	r3, [pc, #156]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 8000326:	2280      	movs	r2, #128	; 0x80
 8000328:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800032a:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 800032c:	2280      	movs	r2, #128	; 0x80
 800032e:	0092      	lsls	r2, r2, #2
 8000330:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000332:	4b24      	ldr	r3, [pc, #144]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 8000334:	2280      	movs	r2, #128	; 0x80
 8000336:	0112      	lsls	r2, r2, #4
 8000338:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800033a:	4b22      	ldr	r3, [pc, #136]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 800033c:	2220      	movs	r2, #32
 800033e:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000340:	4b20      	ldr	r3, [pc, #128]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000346:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 8000348:	0018      	movs	r0, r3
 800034a:	f000 fd27 	bl	8000d9c <HAL_DMA_Init>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 8000352:	f000 f8f3 	bl	800053c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a1a      	ldr	r2, [pc, #104]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	4b19      	ldr	r3, [pc, #100]	; (80003c4 <HAL_DAC_MspInit+0x130>)
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	625a      	str	r2, [r3, #36]	; 0x24

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <HAL_DAC_MspInit+0x138>)
 8000364:	4a1a      	ldr	r2, [pc, #104]	; (80003d0 <HAL_DAC_MspInit+0x13c>)
 8000366:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <HAL_DAC_MspInit+0x138>)
 800036a:	2210      	movs	r2, #16
 800036c:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800036e:	4b17      	ldr	r3, [pc, #92]	; (80003cc <HAL_DAC_MspInit+0x138>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <HAL_DAC_MspInit+0x138>)
 8000376:	2280      	movs	r2, #128	; 0x80
 8000378:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <HAL_DAC_MspInit+0x138>)
 800037c:	2280      	movs	r2, #128	; 0x80
 800037e:	0092      	lsls	r2, r2, #2
 8000380:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000382:	4b12      	ldr	r3, [pc, #72]	; (80003cc <HAL_DAC_MspInit+0x138>)
 8000384:	2280      	movs	r2, #128	; 0x80
 8000386:	0112      	lsls	r2, r2, #4
 8000388:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 800038a:	4b10      	ldr	r3, [pc, #64]	; (80003cc <HAL_DAC_MspInit+0x138>)
 800038c:	2220      	movs	r2, #32
 800038e:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000390:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <HAL_DAC_MspInit+0x138>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8000396:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <HAL_DAC_MspInit+0x138>)
 8000398:	0018      	movs	r0, r3
 800039a:	f000 fcff 	bl	8000d9c <HAL_DMA_Init>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <HAL_DAC_MspInit+0x112>
    {
      Error_Handler();
 80003a2:	f000 f8cb 	bl	800053c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a08      	ldr	r2, [pc, #32]	; (80003cc <HAL_DAC_MspInit+0x138>)
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <HAL_DAC_MspInit+0x138>)
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b00a      	add	sp, #40	; 0x28
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	40007400 	.word	0x40007400
 80003c0:	40021000 	.word	0x40021000
 80003c4:	20000828 	.word	0x20000828
 80003c8:	40020030 	.word	0x40020030
 80003cc:	20000880 	.word	0x20000880
 80003d0:	40020044 	.word	0x40020044

080003d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <MX_DMA_Init+0x48>)
 80003dc:	695a      	ldr	r2, [r3, #20]
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_DMA_Init+0x48>)
 80003e0:	2101      	movs	r1, #1
 80003e2:	430a      	orrs	r2, r1
 80003e4:	615a      	str	r2, [r3, #20]
 80003e6:	4b0d      	ldr	r3, [pc, #52]	; (800041c <MX_DMA_Init+0x48>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	2201      	movs	r2, #1
 80003ec:	4013      	ands	r3, r2
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2100      	movs	r1, #0
 80003f6:	200a      	movs	r0, #10
 80003f8:	f000 fae6 	bl	80009c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80003fc:	200a      	movs	r0, #10
 80003fe:	f000 faf8 	bl	80009f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000402:	2200      	movs	r2, #0
 8000404:	2100      	movs	r1, #0
 8000406:	200b      	movs	r0, #11
 8000408:	f000 fade 	bl	80009c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800040c:	200b      	movs	r0, #11
 800040e:	f000 faf0 	bl	80009f2 <HAL_NVIC_EnableIRQ>

}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	b002      	add	sp, #8
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	40021000 	.word	0x40021000

08000420 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <MX_GPIO_Init+0x2c>)
 8000428:	695a      	ldr	r2, [r3, #20]
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <MX_GPIO_Init+0x2c>)
 800042c:	2180      	movs	r1, #128	; 0x80
 800042e:	0289      	lsls	r1, r1, #10
 8000430:	430a      	orrs	r2, r1
 8000432:	615a      	str	r2, [r3, #20]
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <MX_GPIO_Init+0x2c>)
 8000436:	695a      	ldr	r2, [r3, #20]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	029b      	lsls	r3, r3, #10
 800043c:	4013      	ands	r3, r2
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	b002      	add	sp, #8
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	40021000 	.word	0x40021000

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000456:	f000 f9a7 	bl	80007a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045a:	f000 f82f 	bl	80004bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045e:	f7ff ffdf 	bl	8000420 <MX_GPIO_Init>
  MX_DMA_Init();
 8000462:	f7ff ffb7 	bl	80003d4 <MX_DMA_Init>
  MX_DAC_Init();
 8000466:	f7ff fedb 	bl	8000220 <MX_DAC_Init>
  MX_TIM6_Init();
 800046a:	f000 f8c9 	bl	8000600 <MX_TIM6_Init>
  MX_TIM7_Init();
 800046e:	f000 f903 	bl	8000678 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000472:	2380      	movs	r3, #128	; 0x80
 8000474:	0099      	lsls	r1, r3, #2
 8000476:	4a0d      	ldr	r2, [pc, #52]	; (80004ac <main+0x5c>)
 8000478:	480d      	ldr	r0, [pc, #52]	; (80004b0 <main+0x60>)
 800047a:	2300      	movs	r3, #0
 800047c:	9300      	str	r3, [sp, #0]
 800047e:	000b      	movs	r3, r1
 8000480:	2100      	movs	r1, #0
 8000482:	f000 fb4f 	bl	8000b24 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000486:	2380      	movs	r3, #128	; 0x80
 8000488:	0099      	lsls	r1, r3, #2
 800048a:	4a08      	ldr	r2, [pc, #32]	; (80004ac <main+0x5c>)
 800048c:	4808      	ldr	r0, [pc, #32]	; (80004b0 <main+0x60>)
 800048e:	2300      	movs	r3, #0
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	000b      	movs	r3, r1
 8000494:	2110      	movs	r1, #16
 8000496:	f000 fb45 	bl	8000b24 <HAL_DAC_Start_DMA>

  HAL_TIM_Base_Start(&htim6);
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <main+0x64>)
 800049c:	0018      	movs	r0, r3
 800049e:	f001 fc97 	bl	8001dd0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim7);
 80004a2:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <main+0x68>)
 80004a4:	0018      	movs	r0, r3
 80004a6:	f001 fc93 	bl	8001dd0 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004aa:	e7fe      	b.n	80004aa <main+0x5a>
 80004ac:	20000000 	.word	0x20000000
 80004b0:	2000086c 	.word	0x2000086c
 80004b4:	200008c4 	.word	0x200008c4
 80004b8:	20000904 	.word	0x20000904

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b093      	sub	sp, #76	; 0x4c
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	2414      	movs	r4, #20
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	0018      	movs	r0, r3
 80004c8:	2334      	movs	r3, #52	; 0x34
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f001 fda3 	bl	8002018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	0018      	movs	r0, r3
 80004d6:	2310      	movs	r3, #16
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f001 fd9c 	bl	8002018 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e0:	0021      	movs	r1, r4
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2202      	movs	r2, #2
 80004e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2201      	movs	r2, #1
 80004ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2210      	movs	r2, #16
 80004f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2200      	movs	r2, #0
 80004f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 ff5d 	bl	80013bc <HAL_RCC_OscConfig>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000506:	f000 f819 	bl	800053c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2207      	movs	r2, #7
 800050e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2100      	movs	r1, #0
 8000526:	0018      	movs	r0, r3
 8000528:	f001 face 	bl	8001ac8 <HAL_RCC_ClockConfig>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000530:	f000 f804 	bl	800053c <Error_Handler>
  }
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b013      	add	sp, #76	; 0x4c
 800053a:	bd90      	pop	{r4, r7, pc}

0800053c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <HAL_MspInit+0x44>)
 8000550:	699a      	ldr	r2, [r3, #24]
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <HAL_MspInit+0x44>)
 8000554:	2101      	movs	r1, #1
 8000556:	430a      	orrs	r2, r1
 8000558:	619a      	str	r2, [r3, #24]
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <HAL_MspInit+0x44>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	2201      	movs	r2, #1
 8000560:	4013      	ands	r3, r2
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <HAL_MspInit+0x44>)
 8000568:	69da      	ldr	r2, [r3, #28]
 800056a:	4b08      	ldr	r3, [pc, #32]	; (800058c <HAL_MspInit+0x44>)
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	0549      	lsls	r1, r1, #21
 8000570:	430a      	orrs	r2, r1
 8000572:	61da      	str	r2, [r3, #28]
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <HAL_MspInit+0x44>)
 8000576:	69da      	ldr	r2, [r3, #28]
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	055b      	lsls	r3, r3, #21
 800057c:	4013      	ands	r3, r2
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b002      	add	sp, #8
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	40021000 	.word	0x40021000

08000590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800059e:	e7fe      	b.n	800059e <HardFault_Handler+0x4>

080005a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b8:	f000 f93e 	bl	8000838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <DMA1_Channel2_3_IRQHandler+0x14>)
 80005ca:	0018      	movs	r0, r3
 80005cc:	f000 fc94 	bl	8000ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	20000828 	.word	0x20000828

080005dc <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 fc88 	bl	8000ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	20000880 	.word	0x20000880

080005f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000606:	003b      	movs	r3, r7
 8000608:	0018      	movs	r0, r3
 800060a:	2308      	movs	r3, #8
 800060c:	001a      	movs	r2, r3
 800060e:	2100      	movs	r1, #0
 8000610:	f001 fd02 	bl	8002018 <memset>

  htim6.Instance = TIM6;
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <MX_TIM6_Init+0x6c>)
 8000616:	4a16      	ldr	r2, [pc, #88]	; (8000670 <MX_TIM6_Init+0x70>)
 8000618:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_TIM6_Init+0x6c>)
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_TIM6_Init+0x6c>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16383;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_TIM6_Init+0x6c>)
 8000628:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_TIM6_Init+0x74>)
 800062a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_TIM6_Init+0x6c>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_TIM6_Init+0x6c>)
 8000634:	0018      	movs	r0, r3
 8000636:	f001 fb9f 	bl	8001d78 <HAL_TIM_Base_Init>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800063e:	f7ff ff7d 	bl	800053c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000642:	003b      	movs	r3, r7
 8000644:	2220      	movs	r2, #32
 8000646:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000648:	003b      	movs	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800064e:	003a      	movs	r2, r7
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_TIM6_Init+0x6c>)
 8000652:	0011      	movs	r1, r2
 8000654:	0018      	movs	r0, r3
 8000656:	f001 fc5d 	bl	8001f14 <HAL_TIMEx_MasterConfigSynchronization>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800065e:	f7ff ff6d 	bl	800053c <Error_Handler>
  }

}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b002      	add	sp, #8
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	200008c4 	.word	0x200008c4
 8000670:	40001000 	.word	0x40001000
 8000674:	00003fff 	.word	0x00003fff

08000678 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800067e:	003b      	movs	r3, r7
 8000680:	0018      	movs	r0, r3
 8000682:	2308      	movs	r3, #8
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f001 fcc6 	bl	8002018 <memset>

  htim7.Instance = TIM7;
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_TIM7_Init+0x6c>)
 800068e:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <MX_TIM7_Init+0x70>)
 8000690:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_TIM7_Init+0x6c>)
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_TIM7_Init+0x6c>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 511;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_TIM7_Init+0x6c>)
 80006a0:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_TIM7_Init+0x74>)
 80006a2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_TIM7_Init+0x6c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_TIM7_Init+0x6c>)
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 fb63 	bl	8001d78 <HAL_TIM_Base_Init>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80006b6:	f7ff ff41 	bl	800053c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006ba:	003b      	movs	r3, r7
 80006bc:	2220      	movs	r2, #32
 80006be:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c0:	003b      	movs	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80006c6:	003a      	movs	r2, r7
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_TIM7_Init+0x6c>)
 80006ca:	0011      	movs	r1, r2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 fc21 	bl	8001f14 <HAL_TIMEx_MasterConfigSynchronization>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 80006d6:	f7ff ff31 	bl	800053c <Error_Handler>
  }

}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b002      	add	sp, #8
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	20000904 	.word	0x20000904
 80006e8:	40001400 	.word	0x40001400
 80006ec:	000001ff 	.word	0x000001ff

080006f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <HAL_TIM_Base_MspInit+0x58>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d10c      	bne.n	800071c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_TIM_Base_MspInit+0x5c>)
 8000704:	69da      	ldr	r2, [r3, #28]
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <HAL_TIM_Base_MspInit+0x5c>)
 8000708:	2110      	movs	r1, #16
 800070a:	430a      	orrs	r2, r1
 800070c:	61da      	str	r2, [r3, #28]
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <HAL_TIM_Base_MspInit+0x5c>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	2210      	movs	r2, #16
 8000714:	4013      	ands	r3, r2
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800071a:	e010      	b.n	800073e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <HAL_TIM_Base_MspInit+0x60>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d10b      	bne.n	800073e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_TIM_Base_MspInit+0x5c>)
 8000728:	69da      	ldr	r2, [r3, #28]
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <HAL_TIM_Base_MspInit+0x5c>)
 800072c:	2120      	movs	r1, #32
 800072e:	430a      	orrs	r2, r1
 8000730:	61da      	str	r2, [r3, #28]
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_TIM_Base_MspInit+0x5c>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	2220      	movs	r2, #32
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b004      	add	sp, #16
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	40001000 	.word	0x40001000
 800074c:	40021000 	.word	0x40021000
 8000750:	40001400 	.word	0x40001400

08000754 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000756:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000758:	480d      	ldr	r0, [pc, #52]	; (8000790 <LoopForever+0x6>)
  ldr r1, =_edata
 800075a:	490e      	ldr	r1, [pc, #56]	; (8000794 <LoopForever+0xa>)
  ldr r2, =_sidata
 800075c:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <LoopForever+0xe>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000760:	e002      	b.n	8000768 <LoopCopyDataInit>

08000762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000766:	3304      	adds	r3, #4

08000768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800076c:	d3f9      	bcc.n	8000762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076e:	4a0b      	ldr	r2, [pc, #44]	; (800079c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000770:	4c0b      	ldr	r4, [pc, #44]	; (80007a0 <LoopForever+0x16>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000774:	e001      	b.n	800077a <LoopFillZerobss>

08000776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000778:	3204      	adds	r2, #4

0800077a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800077c:	d3fb      	bcc.n	8000776 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800077e:	f7ff ff39 	bl	80005f4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000782:	f001 fc25 	bl	8001fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000786:	f7ff fe63 	bl	8000450 <main>

0800078a <LoopForever>:

LoopForever:
    b LoopForever
 800078a:	e7fe      	b.n	800078a <LoopForever>
  ldr   r0, =_estack
 800078c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000794:	2000080c 	.word	0x2000080c
  ldr r2, =_sidata
 8000798:	08002078 	.word	0x08002078
  ldr r2, =_sbss
 800079c:	2000080c 	.word	0x2000080c
  ldr r4, =_ebss
 80007a0:	20000948 	.word	0x20000948

080007a4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC1_COMP_IRQHandler>
	...

080007a8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <HAL_Init+0x24>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_Init+0x24>)
 80007b2:	2110      	movs	r1, #16
 80007b4:	430a      	orrs	r2, r1
 80007b6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 f809 	bl	80007d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007be:	f7ff fec3 	bl	8000548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
}
 80007c4:	0018      	movs	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	40022000 	.word	0x40022000

080007d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <HAL_InitTick+0x5c>)
 80007da:	681c      	ldr	r4, [r3, #0]
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <HAL_InitTick+0x60>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	0019      	movs	r1, r3
 80007e2:	23fa      	movs	r3, #250	; 0xfa
 80007e4:	0098      	lsls	r0, r3, #2
 80007e6:	f7ff fc8f 	bl	8000108 <__udivsi3>
 80007ea:	0003      	movs	r3, r0
 80007ec:	0019      	movs	r1, r3
 80007ee:	0020      	movs	r0, r4
 80007f0:	f7ff fc8a 	bl	8000108 <__udivsi3>
 80007f4:	0003      	movs	r3, r0
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 f90b 	bl	8000a12 <HAL_SYSTICK_Config>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d001      	beq.n	8000804 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000800:	2301      	movs	r3, #1
 8000802:	e00f      	b.n	8000824 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b03      	cmp	r3, #3
 8000808:	d80b      	bhi.n	8000822 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	2301      	movs	r3, #1
 800080e:	425b      	negs	r3, r3
 8000810:	2200      	movs	r2, #0
 8000812:	0018      	movs	r0, r3
 8000814:	f000 f8d8 	bl	80009c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_InitTick+0x64>)
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800081e:	2300      	movs	r3, #0
 8000820:	e000      	b.n	8000824 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	b003      	add	sp, #12
 800082a:	bd90      	pop	{r4, r7, pc}
 800082c:	20000800 	.word	0x20000800
 8000830:	20000808 	.word	0x20000808
 8000834:	20000804 	.word	0x20000804

08000838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_IncTick+0x1c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	001a      	movs	r2, r3
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_IncTick+0x20>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	18d2      	adds	r2, r2, r3
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <HAL_IncTick+0x20>)
 800084a:	601a      	str	r2, [r3, #0]
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	20000808 	.word	0x20000808
 8000858:	20000944 	.word	0x20000944

0800085c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  return uwTick;
 8000860:	4b02      	ldr	r3, [pc, #8]	; (800086c <HAL_GetTick+0x10>)
 8000862:	681b      	ldr	r3, [r3, #0]
}
 8000864:	0018      	movs	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	20000944 	.word	0x20000944

08000870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	0002      	movs	r2, r0
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800087c:	1dfb      	adds	r3, r7, #7
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b7f      	cmp	r3, #127	; 0x7f
 8000882:	d809      	bhi.n	8000898 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	001a      	movs	r2, r3
 800088a:	231f      	movs	r3, #31
 800088c:	401a      	ands	r2, r3
 800088e:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <__NVIC_EnableIRQ+0x30>)
 8000890:	2101      	movs	r1, #1
 8000892:	4091      	lsls	r1, r2
 8000894:	000a      	movs	r2, r1
 8000896:	601a      	str	r2, [r3, #0]
  }
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b002      	add	sp, #8
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	e000e100 	.word	0xe000e100

080008a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	0002      	movs	r2, r0
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b7f      	cmp	r3, #127	; 0x7f
 80008b8:	d828      	bhi.n	800090c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ba:	4a2f      	ldr	r2, [pc, #188]	; (8000978 <__NVIC_SetPriority+0xd4>)
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	089b      	lsrs	r3, r3, #2
 80008c4:	33c0      	adds	r3, #192	; 0xc0
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	589b      	ldr	r3, [r3, r2]
 80008ca:	1dfa      	adds	r2, r7, #7
 80008cc:	7812      	ldrb	r2, [r2, #0]
 80008ce:	0011      	movs	r1, r2
 80008d0:	2203      	movs	r2, #3
 80008d2:	400a      	ands	r2, r1
 80008d4:	00d2      	lsls	r2, r2, #3
 80008d6:	21ff      	movs	r1, #255	; 0xff
 80008d8:	4091      	lsls	r1, r2
 80008da:	000a      	movs	r2, r1
 80008dc:	43d2      	mvns	r2, r2
 80008de:	401a      	ands	r2, r3
 80008e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	019b      	lsls	r3, r3, #6
 80008e6:	22ff      	movs	r2, #255	; 0xff
 80008e8:	401a      	ands	r2, r3
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	0018      	movs	r0, r3
 80008f0:	2303      	movs	r3, #3
 80008f2:	4003      	ands	r3, r0
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f8:	481f      	ldr	r0, [pc, #124]	; (8000978 <__NVIC_SetPriority+0xd4>)
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	089b      	lsrs	r3, r3, #2
 8000902:	430a      	orrs	r2, r1
 8000904:	33c0      	adds	r3, #192	; 0xc0
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800090a:	e031      	b.n	8000970 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800090c:	4a1b      	ldr	r2, [pc, #108]	; (800097c <__NVIC_SetPriority+0xd8>)
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	0019      	movs	r1, r3
 8000914:	230f      	movs	r3, #15
 8000916:	400b      	ands	r3, r1
 8000918:	3b08      	subs	r3, #8
 800091a:	089b      	lsrs	r3, r3, #2
 800091c:	3306      	adds	r3, #6
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	18d3      	adds	r3, r2, r3
 8000922:	3304      	adds	r3, #4
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	1dfa      	adds	r2, r7, #7
 8000928:	7812      	ldrb	r2, [r2, #0]
 800092a:	0011      	movs	r1, r2
 800092c:	2203      	movs	r2, #3
 800092e:	400a      	ands	r2, r1
 8000930:	00d2      	lsls	r2, r2, #3
 8000932:	21ff      	movs	r1, #255	; 0xff
 8000934:	4091      	lsls	r1, r2
 8000936:	000a      	movs	r2, r1
 8000938:	43d2      	mvns	r2, r2
 800093a:	401a      	ands	r2, r3
 800093c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	019b      	lsls	r3, r3, #6
 8000942:	22ff      	movs	r2, #255	; 0xff
 8000944:	401a      	ands	r2, r3
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	0018      	movs	r0, r3
 800094c:	2303      	movs	r3, #3
 800094e:	4003      	ands	r3, r0
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000954:	4809      	ldr	r0, [pc, #36]	; (800097c <__NVIC_SetPriority+0xd8>)
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	001c      	movs	r4, r3
 800095c:	230f      	movs	r3, #15
 800095e:	4023      	ands	r3, r4
 8000960:	3b08      	subs	r3, #8
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	430a      	orrs	r2, r1
 8000966:	3306      	adds	r3, #6
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	18c3      	adds	r3, r0, r3
 800096c:	3304      	adds	r3, #4
 800096e:	601a      	str	r2, [r3, #0]
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b003      	add	sp, #12
 8000976:	bd90      	pop	{r4, r7, pc}
 8000978:	e000e100 	.word	0xe000e100
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3b01      	subs	r3, #1
 800098c:	4a0c      	ldr	r2, [pc, #48]	; (80009c0 <SysTick_Config+0x40>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d901      	bls.n	8000996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000992:	2301      	movs	r3, #1
 8000994:	e010      	b.n	80009b8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <SysTick_Config+0x44>)
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	3a01      	subs	r2, #1
 800099c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099e:	2301      	movs	r3, #1
 80009a0:	425b      	negs	r3, r3
 80009a2:	2103      	movs	r1, #3
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff ff7d 	bl	80008a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <SysTick_Config+0x44>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <SysTick_Config+0x44>)
 80009b2:	2207      	movs	r2, #7
 80009b4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	00ffffff 	.word	0x00ffffff
 80009c4:	e000e010 	.word	0xe000e010

080009c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	210f      	movs	r1, #15
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	1c02      	adds	r2, r0, #0
 80009d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	0011      	movs	r1, r2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff ff5d 	bl	80008a4 <__NVIC_SetPriority>
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b004      	add	sp, #16
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	0002      	movs	r2, r0
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	0018      	movs	r0, r3
 8000a06:	f7ff ff33 	bl	8000870 <__NVIC_EnableIRQ>
}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b002      	add	sp, #8
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f7ff ffaf 	bl	8000980 <SysTick_Config>
 8000a22:	0003      	movs	r3, r0
}
 8000a24:	0018      	movs	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b002      	add	sp, #8
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d101      	bne.n	8000a3e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e015      	b.n	8000a6a <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	791b      	ldrb	r3, [r3, #4]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d106      	bne.n	8000a56 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff fc1f 	bl	8000294 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2202      	movs	r2, #2
 8000a5a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2201      	movs	r2, #1
 8000a66:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b002      	add	sp, #8
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	795b      	ldrb	r3, [r3, #5]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d101      	bne.n	8000ac4 <HAL_DAC_ConfigChannel+0x20>
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	e029      	b.n	8000b18 <HAL_DAC_ConfigChannel+0x74>
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	2202      	movs	r2, #2
 8000ace:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8000ad8:	4a11      	ldr	r2, [pc, #68]	; (8000b20 <HAL_DAC_ConfigChannel+0x7c>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	409a      	lsls	r2, r3
 8000ade:	0013      	movs	r3, r2
 8000ae0:	43da      	mvns	r2, r3
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	409a      	lsls	r2, r3
 8000afa:	0013      	movs	r3, r2
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2200      	movs	r2, #0
 8000b14:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b006      	add	sp, #24
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	00000ffe 	.word	0x00000ffe

08000b24 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	795b      	ldrb	r3, [r3, #5]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d101      	bne.n	8000b42 <HAL_DAC_Start_DMA+0x1e>
 8000b3e:	2302      	movs	r3, #2
 8000b40:	e092      	b.n	8000c68 <HAL_DAC_Start_DMA+0x144>
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2201      	movs	r2, #1
 8000b46:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	711a      	strb	r2, [r3, #4]
  
  if(Channel == DAC_CHANNEL_1)
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d12b      	bne.n	8000bac <HAL_DAC_Start_DMA+0x88>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	4a45      	ldr	r2, [pc, #276]	; (8000c70 <HAL_DAC_Start_DMA+0x14c>)
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	4a44      	ldr	r2, [pc, #272]	; (8000c74 <HAL_DAC_Start_DMA+0x150>)
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	4a43      	ldr	r2, [pc, #268]	; (8000c78 <HAL_DAC_Start_DMA+0x154>)
 8000b6a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	0149      	lsls	r1, r1, #5
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8000b7e:	6a3b      	ldr	r3, [r7, #32]
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	d009      	beq.n	8000b98 <HAL_DAC_Start_DMA+0x74>
 8000b84:	2b08      	cmp	r3, #8
 8000b86:	d00c      	beq.n	8000ba2 <HAL_DAC_Start_DMA+0x7e>
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d000      	beq.n	8000b8e <HAL_DAC_Start_DMA+0x6a>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000b8c:	e03a      	b.n	8000c04 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	3308      	adds	r3, #8
 8000b94:	617b      	str	r3, [r7, #20]
        break;
 8000b96:	e035      	b.n	8000c04 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	330c      	adds	r3, #12
 8000b9e:	617b      	str	r3, [r7, #20]
        break;
 8000ba0:	e030      	b.n	8000c04 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	3310      	adds	r3, #16
 8000ba8:	617b      	str	r3, [r7, #20]
        break;
 8000baa:	e02b      	b.n	8000c04 <HAL_DAC_Start_DMA+0xe0>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_DAC_Start_DMA+0x158>)
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_DAC_Start_DMA+0x15c>)
 8000bba:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	4a30      	ldr	r2, [pc, #192]	; (8000c84 <HAL_DAC_Start_DMA+0x160>)
 8000bc2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2180      	movs	r1, #128	; 0x80
 8000bd0:	0549      	lsls	r1, r1, #21
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 2 */
    switch(Alignment)
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	2b04      	cmp	r3, #4
 8000bda:	d009      	beq.n	8000bf0 <HAL_DAC_Start_DMA+0xcc>
 8000bdc:	2b08      	cmp	r3, #8
 8000bde:	d00c      	beq.n	8000bfa <HAL_DAC_Start_DMA+0xd6>
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d000      	beq.n	8000be6 <HAL_DAC_Start_DMA+0xc2>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000be4:	e00e      	b.n	8000c04 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	3314      	adds	r3, #20
 8000bec:	617b      	str	r3, [r7, #20]
        break;
 8000bee:	e009      	b.n	8000c04 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	3318      	adds	r3, #24
 8000bf6:	617b      	str	r3, [r7, #20]
        break;
 8000bf8:	e004      	b.n	8000c04 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	331c      	adds	r3, #28
 8000c00:	617b      	str	r3, [r7, #20]
        break;
 8000c02:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  /* Enable the DMA channel */
  if(Channel == DAC_CHANNEL_1)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d110      	bne.n	8000c2c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	0189      	lsls	r1, r1, #6
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	6898      	ldr	r0, [r3, #8]
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	f000 f901 	bl	8000e2c <HAL_DMA_Start_IT>
 8000c2a:	e00f      	b.n	8000c4c <HAL_DAC_Start_DMA+0x128>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2180      	movs	r1, #128	; 0x80
 8000c38:	0589      	lsls	r1, r1, #22
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	68d8      	ldr	r0, [r3, #12]
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	f000 f8f0 	bl	8000e2c <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6819      	ldr	r1, [r3, #0]
 8000c52:	2201      	movs	r2, #1
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	409a      	lsls	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2200      	movs	r2, #0
 8000c64:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	0018      	movs	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b006      	add	sp, #24
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	08000c89 	.word	0x08000c89
 8000c74:	08000cad 	.word	0x08000cad
 8000c78:	08000ccb 	.word	0x08000ccb
 8000c7c:	08000cfb 	.word	0x08000cfb
 8000c80:	08000d1f 	.word	0x08000d1f
 8000c84:	08000d3d 	.word	0x08000d3d

08000c88 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c94:	60fb      	str	r3, [r7, #12]
  
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff feea 	bl	8000a72 <HAL_DAC_ConvCpltCallbackCh1>
  
  hdac->State= HAL_DAC_STATE_READY;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	711a      	strb	r2, [r3, #4]
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b004      	add	sp, #16
 8000caa:	bd80      	pop	{r7, pc}

08000cac <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb8:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff fee0 	bl	8000a82 <HAL_DAC_ConvHalfCpltCallbackCh1>
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b004      	add	sp, #16
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b084      	sub	sp, #16
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd6:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	2204      	movs	r2, #4
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f7ff fed3 	bl	8000a92 <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State= HAL_DAC_STATE_READY;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	711a      	strb	r2, [r3, #4]
}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b004      	add	sp, #16
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f000 f82e 	bl	8000d6c <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2201      	movs	r2, #1
 8000d14:	711a      	strb	r2, [r3, #4]
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b004      	add	sp, #16
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b084      	sub	sp, #16
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2a:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 f824 	bl	8000d7c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b004      	add	sp, #16
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d48:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	2204      	movs	r2, #4
 8000d50:	431a      	orrs	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f000 f817 	bl	8000d8c <HAL_DACEx_ErrorCallbackCh2>
#endif 
  hdac->State= HAL_DAC_STATE_READY;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2201      	movs	r2, #1
 8000d62:	711a      	strb	r2, [r3, #4]
}
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b004      	add	sp, #16
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b002      	add	sp, #8
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b002      	add	sp, #8
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e036      	b.n	8000e20 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2221      	movs	r2, #33	; 0x21
 8000db6:	2102      	movs	r1, #2
 8000db8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <HAL_DMA_Init+0x8c>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	0018      	movs	r0, r3
 8000e04:	f000 f946 	bl	8001094 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2221      	movs	r2, #33	; 0x21
 8000e12:	2101      	movs	r1, #1
 8000e14:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2220      	movs	r2, #32
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
}  
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b004      	add	sp, #16
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	ffffc00f 	.word	0xffffc00f

08000e2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000e3a:	2317      	movs	r3, #23
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2220      	movs	r2, #32
 8000e46:	5c9b      	ldrb	r3, [r3, r2]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d101      	bne.n	8000e50 <HAL_DMA_Start_IT+0x24>
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	e04f      	b.n	8000ef0 <HAL_DMA_Start_IT+0xc4>
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2220      	movs	r2, #32
 8000e54:	2101      	movs	r1, #1
 8000e56:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2221      	movs	r2, #33	; 0x21
 8000e5c:	5c9b      	ldrb	r3, [r3, r2]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d13a      	bne.n	8000eda <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2221      	movs	r2, #33	; 0x21
 8000e68:	2102      	movs	r1, #2
 8000e6a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	438a      	bics	r2, r1
 8000e80:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f000 f8d7 	bl	800103c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d008      	beq.n	8000ea8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	210e      	movs	r1, #14
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	e00f      	b.n	8000ec8 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	210a      	movs	r1, #10
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	438a      	bics	r2, r1
 8000ec6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	e007      	b.n	8000eea <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2220      	movs	r2, #32
 8000ede:	2100      	movs	r1, #0
 8000ee0:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000ee2:	2317      	movs	r3, #23
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000eea:	2317      	movs	r3, #23
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	781b      	ldrb	r3, [r3, #0]
} 
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b006      	add	sp, #24
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	2204      	movs	r2, #4
 8000f16:	409a      	lsls	r2, r3
 8000f18:	0013      	movs	r3, r2
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	d024      	beq.n	8000f6a <HAL_DMA_IRQHandler+0x72>
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	2204      	movs	r2, #4
 8000f24:	4013      	ands	r3, r2
 8000f26:	d020      	beq.n	8000f6a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2220      	movs	r2, #32
 8000f30:	4013      	ands	r3, r2
 8000f32:	d107      	bne.n	8000f44 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2104      	movs	r1, #4
 8000f40:	438a      	bics	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4c:	2104      	movs	r1, #4
 8000f4e:	4091      	lsls	r1, r2
 8000f50:	000a      	movs	r2, r1
 8000f52:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d100      	bne.n	8000f5e <HAL_DMA_IRQHandler+0x66>
 8000f5c:	e06a      	b.n	8001034 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	0010      	movs	r0, r2
 8000f66:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000f68:	e064      	b.n	8001034 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	2202      	movs	r2, #2
 8000f70:	409a      	lsls	r2, r3
 8000f72:	0013      	movs	r3, r2
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	4013      	ands	r3, r2
 8000f78:	d02b      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0xda>
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d027      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2220      	movs	r2, #32
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d10b      	bne.n	8000fa6 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	210a      	movs	r1, #10
 8000f9a:	438a      	bics	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2221      	movs	r2, #33	; 0x21
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4091      	lsls	r1, r2
 8000fb2:	000a      	movs	r2, r1
 8000fb4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2220      	movs	r2, #32
 8000fba:	2100      	movs	r1, #0
 8000fbc:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d036      	beq.n	8001034 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	0010      	movs	r0, r2
 8000fce:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000fd0:	e030      	b.n	8001034 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	2208      	movs	r2, #8
 8000fd8:	409a      	lsls	r2, r3
 8000fda:	0013      	movs	r3, r2
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d028      	beq.n	8001034 <HAL_DMA_IRQHandler+0x13c>
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	2208      	movs	r2, #8
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	d024      	beq.n	8001034 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	210e      	movs	r1, #14
 8000ff6:	438a      	bics	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001002:	2101      	movs	r1, #1
 8001004:	4091      	lsls	r1, r2
 8001006:	000a      	movs	r2, r1
 8001008:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2221      	movs	r2, #33	; 0x21
 8001014:	2101      	movs	r1, #1
 8001016:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2220      	movs	r2, #32
 800101c:	2100      	movs	r1, #0
 800101e:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	2b00      	cmp	r3, #0
 8001026:	d005      	beq.n	8001034 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	0010      	movs	r0, r2
 8001030:	4798      	blx	r3
    }
   }
}  
 8001032:	e7ff      	b.n	8001034 <HAL_DMA_IRQHandler+0x13c>
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b004      	add	sp, #16
 800103a:	bd80      	pop	{r7, pc}

0800103c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001052:	2101      	movs	r1, #1
 8001054:	4091      	lsls	r1, r2
 8001056:	000a      	movs	r2, r1
 8001058:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b10      	cmp	r3, #16
 8001068:	d108      	bne.n	800107c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800107a:	e007      	b.n	800108c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68ba      	ldr	r2, [r7, #8]
 8001082:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	60da      	str	r2, [r3, #12]
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b004      	add	sp, #16
 8001092:	bd80      	pop	{r7, pc}

08001094 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <DMA_CalcBaseAndBitshift+0x30>)
 80010a2:	4694      	mov	ip, r2
 80010a4:	4463      	add	r3, ip
 80010a6:	2114      	movs	r1, #20
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff f82d 	bl	8000108 <__udivsi3>
 80010ae:	0003      	movs	r3, r0
 80010b0:	009a      	lsls	r2, r3, #2
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a03      	ldr	r2, [pc, #12]	; (80010c8 <DMA_CalcBaseAndBitshift+0x34>)
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80010bc:	46c0      	nop			; (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	b002      	add	sp, #8
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	bffdfff8 	.word	0xbffdfff8
 80010c8:	40020000 	.word	0x40020000

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010da:	e155      	b.n	8001388 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2101      	movs	r1, #1
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4091      	lsls	r1, r2
 80010e6:	000a      	movs	r2, r1
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d100      	bne.n	80010f4 <HAL_GPIO_Init+0x28>
 80010f2:	e146      	b.n	8001382 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x38>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b12      	cmp	r3, #18
 8001102:	d123      	bne.n	800114c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	0092      	lsls	r2, r2, #2
 800110e:	58d3      	ldr	r3, [r2, r3]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2207      	movs	r2, #7
 8001116:	4013      	ands	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	409a      	lsls	r2, r3
 800111e:	0013      	movs	r3, r2
 8001120:	43da      	mvns	r2, r3
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	691a      	ldr	r2, [r3, #16]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2107      	movs	r1, #7
 8001130:	400b      	ands	r3, r1
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	409a      	lsls	r2, r3
 8001136:	0013      	movs	r3, r2
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	08da      	lsrs	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3208      	adds	r2, #8
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	6939      	ldr	r1, [r7, #16]
 800114a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	409a      	lsls	r2, r3
 800115a:	0013      	movs	r3, r2
 800115c:	43da      	mvns	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2203      	movs	r2, #3
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	409a      	lsls	r2, r3
 8001172:	0013      	movs	r3, r2
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d00b      	beq.n	80011a0 <HAL_GPIO_Init+0xd4>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d007      	beq.n	80011a0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001194:	2b11      	cmp	r3, #17
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b12      	cmp	r3, #18
 800119e:	d130      	bne.n	8001202 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	409a      	lsls	r2, r3
 80011ae:	0013      	movs	r3, r2
 80011b0:	43da      	mvns	r2, r3
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	409a      	lsls	r2, r3
 80011c2:	0013      	movs	r3, r2
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d6:	2201      	movs	r2, #1
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	43da      	mvns	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	091b      	lsrs	r3, r3, #4
 80011ec:	2201      	movs	r2, #1
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2203      	movs	r2, #3
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	43da      	mvns	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	409a      	lsls	r2, r3
 8001224:	0013      	movs	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	055b      	lsls	r3, r3, #21
 800123a:	4013      	ands	r3, r2
 800123c:	d100      	bne.n	8001240 <HAL_GPIO_Init+0x174>
 800123e:	e0a0      	b.n	8001382 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001240:	4b57      	ldr	r3, [pc, #348]	; (80013a0 <HAL_GPIO_Init+0x2d4>)
 8001242:	699a      	ldr	r2, [r3, #24]
 8001244:	4b56      	ldr	r3, [pc, #344]	; (80013a0 <HAL_GPIO_Init+0x2d4>)
 8001246:	2101      	movs	r1, #1
 8001248:	430a      	orrs	r2, r1
 800124a:	619a      	str	r2, [r3, #24]
 800124c:	4b54      	ldr	r3, [pc, #336]	; (80013a0 <HAL_GPIO_Init+0x2d4>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	2201      	movs	r2, #1
 8001252:	4013      	ands	r3, r2
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001258:	4a52      	ldr	r2, [pc, #328]	; (80013a4 <HAL_GPIO_Init+0x2d8>)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	589b      	ldr	r3, [r3, r2]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2203      	movs	r2, #3
 800126a:	4013      	ands	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	220f      	movs	r2, #15
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	43da      	mvns	r2, r3
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	2390      	movs	r3, #144	; 0x90
 8001280:	05db      	lsls	r3, r3, #23
 8001282:	429a      	cmp	r2, r3
 8001284:	d019      	beq.n	80012ba <HAL_GPIO_Init+0x1ee>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a47      	ldr	r2, [pc, #284]	; (80013a8 <HAL_GPIO_Init+0x2dc>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d013      	beq.n	80012b6 <HAL_GPIO_Init+0x1ea>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a46      	ldr	r2, [pc, #280]	; (80013ac <HAL_GPIO_Init+0x2e0>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d00d      	beq.n	80012b2 <HAL_GPIO_Init+0x1e6>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a45      	ldr	r2, [pc, #276]	; (80013b0 <HAL_GPIO_Init+0x2e4>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d007      	beq.n	80012ae <HAL_GPIO_Init+0x1e2>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a44      	ldr	r2, [pc, #272]	; (80013b4 <HAL_GPIO_Init+0x2e8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d101      	bne.n	80012aa <HAL_GPIO_Init+0x1de>
 80012a6:	2304      	movs	r3, #4
 80012a8:	e008      	b.n	80012bc <HAL_GPIO_Init+0x1f0>
 80012aa:	2305      	movs	r3, #5
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x1f0>
 80012ae:	2303      	movs	r3, #3
 80012b0:	e004      	b.n	80012bc <HAL_GPIO_Init+0x1f0>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_Init+0x1f0>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x1f0>
 80012ba:	2300      	movs	r3, #0
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	2103      	movs	r1, #3
 80012c0:	400a      	ands	r2, r1
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012cc:	4935      	ldr	r1, [pc, #212]	; (80013a4 <HAL_GPIO_Init+0x2d8>)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012da:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	43da      	mvns	r2, r3
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	025b      	lsls	r3, r3, #9
 80012f2:	4013      	ands	r3, r2
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012fe:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001304:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43da      	mvns	r2, r3
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	029b      	lsls	r3, r3, #10
 800131c:	4013      	ands	r3, r2
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	035b      	lsls	r3, r3, #13
 8001346:	4013      	ands	r3, r2
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001352:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43da      	mvns	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	039b      	lsls	r3, r3, #14
 8001370:	4013      	ands	r3, r2
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	40da      	lsrs	r2, r3
 8001390:	1e13      	subs	r3, r2, #0
 8001392:	d000      	beq.n	8001396 <HAL_GPIO_Init+0x2ca>
 8001394:	e6a2      	b.n	80010dc <HAL_GPIO_Init+0x10>
  } 
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b006      	add	sp, #24
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010000 	.word	0x40010000
 80013a8:	48000400 	.word	0x48000400
 80013ac:	48000800 	.word	0x48000800
 80013b0:	48000c00 	.word	0x48000c00
 80013b4:	48001000 	.word	0x48001000
 80013b8:	40010400 	.word	0x40010400

080013bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d102      	bne.n	80013d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	f000 fb76 	bl	8001abc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2201      	movs	r2, #1
 80013d6:	4013      	ands	r3, r2
 80013d8:	d100      	bne.n	80013dc <HAL_RCC_OscConfig+0x20>
 80013da:	e08e      	b.n	80014fa <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013dc:	4bc5      	ldr	r3, [pc, #788]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	220c      	movs	r2, #12
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d00e      	beq.n	8001406 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013e8:	4bc2      	ldr	r3, [pc, #776]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	220c      	movs	r2, #12
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d117      	bne.n	8001424 <HAL_RCC_OscConfig+0x68>
 80013f4:	4bbf      	ldr	r3, [pc, #764]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	23c0      	movs	r3, #192	; 0xc0
 80013fa:	025b      	lsls	r3, r3, #9
 80013fc:	401a      	ands	r2, r3
 80013fe:	2380      	movs	r3, #128	; 0x80
 8001400:	025b      	lsls	r3, r3, #9
 8001402:	429a      	cmp	r2, r3
 8001404:	d10e      	bne.n	8001424 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001406:	4bbb      	ldr	r3, [pc, #748]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	029b      	lsls	r3, r3, #10
 800140e:	4013      	ands	r3, r2
 8001410:	d100      	bne.n	8001414 <HAL_RCC_OscConfig+0x58>
 8001412:	e071      	b.n	80014f8 <HAL_RCC_OscConfig+0x13c>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d000      	beq.n	800141e <HAL_RCC_OscConfig+0x62>
 800141c:	e06c      	b.n	80014f8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	f000 fb4c 	bl	8001abc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d107      	bne.n	800143c <HAL_RCC_OscConfig+0x80>
 800142c:	4bb1      	ldr	r3, [pc, #708]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4bb0      	ldr	r3, [pc, #704]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	0249      	lsls	r1, r1, #9
 8001436:	430a      	orrs	r2, r1
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	e02f      	b.n	800149c <HAL_RCC_OscConfig+0xe0>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10c      	bne.n	800145e <HAL_RCC_OscConfig+0xa2>
 8001444:	4bab      	ldr	r3, [pc, #684]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4baa      	ldr	r3, [pc, #680]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 800144a:	49ab      	ldr	r1, [pc, #684]	; (80016f8 <HAL_RCC_OscConfig+0x33c>)
 800144c:	400a      	ands	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	4ba8      	ldr	r3, [pc, #672]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4ba7      	ldr	r3, [pc, #668]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001456:	49a9      	ldr	r1, [pc, #676]	; (80016fc <HAL_RCC_OscConfig+0x340>)
 8001458:	400a      	ands	r2, r1
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	e01e      	b.n	800149c <HAL_RCC_OscConfig+0xe0>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b05      	cmp	r3, #5
 8001464:	d10e      	bne.n	8001484 <HAL_RCC_OscConfig+0xc8>
 8001466:	4ba3      	ldr	r3, [pc, #652]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4ba2      	ldr	r3, [pc, #648]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	02c9      	lsls	r1, r1, #11
 8001470:	430a      	orrs	r2, r1
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	4b9f      	ldr	r3, [pc, #636]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b9e      	ldr	r3, [pc, #632]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 800147a:	2180      	movs	r1, #128	; 0x80
 800147c:	0249      	lsls	r1, r1, #9
 800147e:	430a      	orrs	r2, r1
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e00b      	b.n	800149c <HAL_RCC_OscConfig+0xe0>
 8001484:	4b9b      	ldr	r3, [pc, #620]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b9a      	ldr	r3, [pc, #616]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 800148a:	499b      	ldr	r1, [pc, #620]	; (80016f8 <HAL_RCC_OscConfig+0x33c>)
 800148c:	400a      	ands	r2, r1
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	4b98      	ldr	r3, [pc, #608]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b97      	ldr	r3, [pc, #604]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001496:	4999      	ldr	r1, [pc, #612]	; (80016fc <HAL_RCC_OscConfig+0x340>)
 8001498:	400a      	ands	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d014      	beq.n	80014ce <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff f9da 	bl	800085c <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ae:	f7ff f9d5 	bl	800085c <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b64      	cmp	r3, #100	; 0x64
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e2fd      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c0:	4b8c      	ldr	r3, [pc, #560]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	029b      	lsls	r3, r3, #10
 80014c8:	4013      	ands	r3, r2
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0xf2>
 80014cc:	e015      	b.n	80014fa <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff f9c5 	bl	800085c <HAL_GetTick>
 80014d2:	0003      	movs	r3, r0
 80014d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff f9c0 	bl	800085c <HAL_GetTick>
 80014dc:	0002      	movs	r2, r0
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e2e8      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ea:	4b82      	ldr	r3, [pc, #520]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	029b      	lsls	r3, r3, #10
 80014f2:	4013      	ands	r3, r2
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x11c>
 80014f6:	e000      	b.n	80014fa <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2202      	movs	r2, #2
 8001500:	4013      	ands	r3, r2
 8001502:	d100      	bne.n	8001506 <HAL_RCC_OscConfig+0x14a>
 8001504:	e06c      	b.n	80015e0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001506:	4b7b      	ldr	r3, [pc, #492]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	220c      	movs	r2, #12
 800150c:	4013      	ands	r3, r2
 800150e:	d00e      	beq.n	800152e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001510:	4b78      	ldr	r3, [pc, #480]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	220c      	movs	r2, #12
 8001516:	4013      	ands	r3, r2
 8001518:	2b08      	cmp	r3, #8
 800151a:	d11f      	bne.n	800155c <HAL_RCC_OscConfig+0x1a0>
 800151c:	4b75      	ldr	r3, [pc, #468]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	23c0      	movs	r3, #192	; 0xc0
 8001522:	025b      	lsls	r3, r3, #9
 8001524:	401a      	ands	r2, r3
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	429a      	cmp	r2, r3
 800152c:	d116      	bne.n	800155c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152e:	4b71      	ldr	r3, [pc, #452]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2202      	movs	r2, #2
 8001534:	4013      	ands	r3, r2
 8001536:	d005      	beq.n	8001544 <HAL_RCC_OscConfig+0x188>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d001      	beq.n	8001544 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e2bb      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001544:	4b6b      	ldr	r3, [pc, #428]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	22f8      	movs	r2, #248	; 0xf8
 800154a:	4393      	bics	r3, r2
 800154c:	0019      	movs	r1, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00da      	lsls	r2, r3, #3
 8001554:	4b67      	ldr	r3, [pc, #412]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001556:	430a      	orrs	r2, r1
 8001558:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155a:	e041      	b.n	80015e0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d024      	beq.n	80015ae <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001564:	4b63      	ldr	r3, [pc, #396]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b62      	ldr	r3, [pc, #392]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 800156a:	2101      	movs	r1, #1
 800156c:	430a      	orrs	r2, r1
 800156e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff f974 	bl	800085c <HAL_GetTick>
 8001574:	0003      	movs	r3, r0
 8001576:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800157a:	f7ff f96f 	bl	800085c <HAL_GetTick>
 800157e:	0002      	movs	r2, r0
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e297      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158c:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2202      	movs	r2, #2
 8001592:	4013      	ands	r3, r2
 8001594:	d0f1      	beq.n	800157a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001596:	4b57      	ldr	r3, [pc, #348]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	22f8      	movs	r2, #248	; 0xf8
 800159c:	4393      	bics	r3, r2
 800159e:	0019      	movs	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	00da      	lsls	r2, r3, #3
 80015a6:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 80015a8:	430a      	orrs	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e018      	b.n	80015e0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ae:	4b51      	ldr	r3, [pc, #324]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 80015b4:	2101      	movs	r1, #1
 80015b6:	438a      	bics	r2, r1
 80015b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff f94f 	bl	800085c <HAL_GetTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff f94a 	bl	800085c <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e272      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2202      	movs	r2, #2
 80015dc:	4013      	ands	r3, r2
 80015de:	d1f1      	bne.n	80015c4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2208      	movs	r2, #8
 80015e6:	4013      	ands	r3, r2
 80015e8:	d036      	beq.n	8001658 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d019      	beq.n	8001626 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f2:	4b40      	ldr	r3, [pc, #256]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 80015f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f6:	4b3f      	ldr	r3, [pc, #252]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 80015f8:	2101      	movs	r1, #1
 80015fa:	430a      	orrs	r2, r1
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fe:	f7ff f92d 	bl	800085c <HAL_GetTick>
 8001602:	0003      	movs	r3, r0
 8001604:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001608:	f7ff f928 	bl	800085c <HAL_GetTick>
 800160c:	0002      	movs	r2, r0
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e250      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161a:	4b36      	ldr	r3, [pc, #216]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	2202      	movs	r2, #2
 8001620:	4013      	ands	r3, r2
 8001622:	d0f1      	beq.n	8001608 <HAL_RCC_OscConfig+0x24c>
 8001624:	e018      	b.n	8001658 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001626:	4b33      	ldr	r3, [pc, #204]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800162a:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 800162c:	2101      	movs	r1, #1
 800162e:	438a      	bics	r2, r1
 8001630:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001632:	f7ff f913 	bl	800085c <HAL_GetTick>
 8001636:	0003      	movs	r3, r0
 8001638:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff f90e 	bl	800085c <HAL_GetTick>
 8001640:	0002      	movs	r2, r0
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e236      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164e:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	2202      	movs	r2, #2
 8001654:	4013      	ands	r3, r2
 8001656:	d1f1      	bne.n	800163c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2204      	movs	r2, #4
 800165e:	4013      	ands	r3, r2
 8001660:	d100      	bne.n	8001664 <HAL_RCC_OscConfig+0x2a8>
 8001662:	e0b5      	b.n	80017d0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001664:	231f      	movs	r3, #31
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 800166e:	69da      	ldr	r2, [r3, #28]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	055b      	lsls	r3, r3, #21
 8001674:	4013      	ands	r3, r2
 8001676:	d111      	bne.n	800169c <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 800167a:	69da      	ldr	r2, [r3, #28]
 800167c:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 800167e:	2180      	movs	r1, #128	; 0x80
 8001680:	0549      	lsls	r1, r1, #21
 8001682:	430a      	orrs	r2, r1
 8001684:	61da      	str	r2, [r3, #28]
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 8001688:	69da      	ldr	r2, [r3, #28]
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	055b      	lsls	r3, r3, #21
 800168e:	4013      	ands	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001694:	231f      	movs	r3, #31
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	2201      	movs	r2, #1
 800169a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_RCC_OscConfig+0x344>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4013      	ands	r3, r2
 80016a6:	d11a      	bne.n	80016de <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_RCC_OscConfig+0x344>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_RCC_OscConfig+0x344>)
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	0049      	lsls	r1, r1, #1
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b6:	f7ff f8d1 	bl	800085c <HAL_GetTick>
 80016ba:	0003      	movs	r3, r0
 80016bc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c0:	f7ff f8cc 	bl	800085c <HAL_GetTick>
 80016c4:	0002      	movs	r2, r0
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e1f4      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_RCC_OscConfig+0x344>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4013      	ands	r3, r2
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d10e      	bne.n	8001704 <HAL_RCC_OscConfig+0x348>
 80016e6:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 80016e8:	6a1a      	ldr	r2, [r3, #32]
 80016ea:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <HAL_RCC_OscConfig+0x338>)
 80016ec:	2101      	movs	r1, #1
 80016ee:	430a      	orrs	r2, r1
 80016f0:	621a      	str	r2, [r3, #32]
 80016f2:	e035      	b.n	8001760 <HAL_RCC_OscConfig+0x3a4>
 80016f4:	40021000 	.word	0x40021000
 80016f8:	fffeffff 	.word	0xfffeffff
 80016fc:	fffbffff 	.word	0xfffbffff
 8001700:	40007000 	.word	0x40007000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10c      	bne.n	8001726 <HAL_RCC_OscConfig+0x36a>
 800170c:	4bca      	ldr	r3, [pc, #808]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 800170e:	6a1a      	ldr	r2, [r3, #32]
 8001710:	4bc9      	ldr	r3, [pc, #804]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001712:	2101      	movs	r1, #1
 8001714:	438a      	bics	r2, r1
 8001716:	621a      	str	r2, [r3, #32]
 8001718:	4bc7      	ldr	r3, [pc, #796]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 800171a:	6a1a      	ldr	r2, [r3, #32]
 800171c:	4bc6      	ldr	r3, [pc, #792]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 800171e:	2104      	movs	r1, #4
 8001720:	438a      	bics	r2, r1
 8001722:	621a      	str	r2, [r3, #32]
 8001724:	e01c      	b.n	8001760 <HAL_RCC_OscConfig+0x3a4>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b05      	cmp	r3, #5
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0x38c>
 800172e:	4bc2      	ldr	r3, [pc, #776]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001730:	6a1a      	ldr	r2, [r3, #32]
 8001732:	4bc1      	ldr	r3, [pc, #772]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001734:	2104      	movs	r1, #4
 8001736:	430a      	orrs	r2, r1
 8001738:	621a      	str	r2, [r3, #32]
 800173a:	4bbf      	ldr	r3, [pc, #764]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 800173c:	6a1a      	ldr	r2, [r3, #32]
 800173e:	4bbe      	ldr	r3, [pc, #760]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001740:	2101      	movs	r1, #1
 8001742:	430a      	orrs	r2, r1
 8001744:	621a      	str	r2, [r3, #32]
 8001746:	e00b      	b.n	8001760 <HAL_RCC_OscConfig+0x3a4>
 8001748:	4bbb      	ldr	r3, [pc, #748]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 800174a:	6a1a      	ldr	r2, [r3, #32]
 800174c:	4bba      	ldr	r3, [pc, #744]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 800174e:	2101      	movs	r1, #1
 8001750:	438a      	bics	r2, r1
 8001752:	621a      	str	r2, [r3, #32]
 8001754:	4bb8      	ldr	r3, [pc, #736]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001756:	6a1a      	ldr	r2, [r3, #32]
 8001758:	4bb7      	ldr	r3, [pc, #732]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 800175a:	2104      	movs	r1, #4
 800175c:	438a      	bics	r2, r1
 800175e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d014      	beq.n	8001792 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001768:	f7ff f878 	bl	800085c <HAL_GetTick>
 800176c:	0003      	movs	r3, r0
 800176e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001770:	e009      	b.n	8001786 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff f873 	bl	800085c <HAL_GetTick>
 8001776:	0002      	movs	r2, r0
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	4aaf      	ldr	r2, [pc, #700]	; (8001a3c <HAL_RCC_OscConfig+0x680>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e19a      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001786:	4bac      	ldr	r3, [pc, #688]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	2202      	movs	r2, #2
 800178c:	4013      	ands	r3, r2
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x3b6>
 8001790:	e013      	b.n	80017ba <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001792:	f7ff f863 	bl	800085c <HAL_GetTick>
 8001796:	0003      	movs	r3, r0
 8001798:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179a:	e009      	b.n	80017b0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179c:	f7ff f85e 	bl	800085c <HAL_GetTick>
 80017a0:	0002      	movs	r2, r0
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	4aa5      	ldr	r2, [pc, #660]	; (8001a3c <HAL_RCC_OscConfig+0x680>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e185      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b0:	4ba1      	ldr	r3, [pc, #644]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	2202      	movs	r2, #2
 80017b6:	4013      	ands	r3, r2
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017ba:	231f      	movs	r3, #31
 80017bc:	18fb      	adds	r3, r7, r3
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d105      	bne.n	80017d0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c4:	4b9c      	ldr	r3, [pc, #624]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80017c6:	69da      	ldr	r2, [r3, #28]
 80017c8:	4b9b      	ldr	r3, [pc, #620]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80017ca:	499d      	ldr	r1, [pc, #628]	; (8001a40 <HAL_RCC_OscConfig+0x684>)
 80017cc:	400a      	ands	r2, r1
 80017ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2210      	movs	r2, #16
 80017d6:	4013      	ands	r3, r2
 80017d8:	d063      	beq.n	80018a2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d12a      	bne.n	8001838 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017e2:	4b95      	ldr	r3, [pc, #596]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80017e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017e6:	4b94      	ldr	r3, [pc, #592]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80017e8:	2104      	movs	r1, #4
 80017ea:	430a      	orrs	r2, r1
 80017ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80017ee:	4b92      	ldr	r3, [pc, #584]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80017f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f2:	4b91      	ldr	r3, [pc, #580]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80017f4:	2101      	movs	r1, #1
 80017f6:	430a      	orrs	r2, r1
 80017f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fa:	f7ff f82f 	bl	800085c <HAL_GetTick>
 80017fe:	0003      	movs	r3, r0
 8001800:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001804:	f7ff f82a 	bl	800085c <HAL_GetTick>
 8001808:	0002      	movs	r2, r0
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e152      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001816:	4b88      	ldr	r3, [pc, #544]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181a:	2202      	movs	r2, #2
 800181c:	4013      	ands	r3, r2
 800181e:	d0f1      	beq.n	8001804 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001820:	4b85      	ldr	r3, [pc, #532]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001824:	22f8      	movs	r2, #248	; 0xf8
 8001826:	4393      	bics	r3, r2
 8001828:	0019      	movs	r1, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	00da      	lsls	r2, r3, #3
 8001830:	4b81      	ldr	r3, [pc, #516]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001832:	430a      	orrs	r2, r1
 8001834:	635a      	str	r2, [r3, #52]	; 0x34
 8001836:	e034      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	3305      	adds	r3, #5
 800183e:	d111      	bne.n	8001864 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001840:	4b7d      	ldr	r3, [pc, #500]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001844:	4b7c      	ldr	r3, [pc, #496]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001846:	2104      	movs	r1, #4
 8001848:	438a      	bics	r2, r1
 800184a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800184c:	4b7a      	ldr	r3, [pc, #488]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 800184e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001850:	22f8      	movs	r2, #248	; 0xf8
 8001852:	4393      	bics	r3, r2
 8001854:	0019      	movs	r1, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	00da      	lsls	r2, r3, #3
 800185c:	4b76      	ldr	r3, [pc, #472]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 800185e:	430a      	orrs	r2, r1
 8001860:	635a      	str	r2, [r3, #52]	; 0x34
 8001862:	e01e      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001864:	4b74      	ldr	r3, [pc, #464]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001868:	4b73      	ldr	r3, [pc, #460]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 800186a:	2104      	movs	r1, #4
 800186c:	430a      	orrs	r2, r1
 800186e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001870:	4b71      	ldr	r3, [pc, #452]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001874:	4b70      	ldr	r3, [pc, #448]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001876:	2101      	movs	r1, #1
 8001878:	438a      	bics	r2, r1
 800187a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187c:	f7fe ffee 	bl	800085c <HAL_GetTick>
 8001880:	0003      	movs	r3, r0
 8001882:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001886:	f7fe ffe9 	bl	800085c <HAL_GetTick>
 800188a:	0002      	movs	r2, r0
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e111      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001898:	4b67      	ldr	r3, [pc, #412]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 800189a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189c:	2202      	movs	r2, #2
 800189e:	4013      	ands	r3, r2
 80018a0:	d1f1      	bne.n	8001886 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2220      	movs	r2, #32
 80018a8:	4013      	ands	r3, r2
 80018aa:	d05c      	beq.n	8001966 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80018ac:	4b62      	ldr	r3, [pc, #392]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	220c      	movs	r2, #12
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b0c      	cmp	r3, #12
 80018b6:	d00e      	beq.n	80018d6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80018b8:	4b5f      	ldr	r3, [pc, #380]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	220c      	movs	r2, #12
 80018be:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d114      	bne.n	80018ee <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80018c4:	4b5c      	ldr	r3, [pc, #368]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	23c0      	movs	r3, #192	; 0xc0
 80018ca:	025b      	lsls	r3, r3, #9
 80018cc:	401a      	ands	r2, r3
 80018ce:	23c0      	movs	r3, #192	; 0xc0
 80018d0:	025b      	lsls	r3, r3, #9
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d10b      	bne.n	80018ee <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80018d6:	4b58      	ldr	r3, [pc, #352]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80018d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	025b      	lsls	r3, r3, #9
 80018de:	4013      	ands	r3, r2
 80018e0:	d040      	beq.n	8001964 <HAL_RCC_OscConfig+0x5a8>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d03c      	beq.n	8001964 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e0e6      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d01b      	beq.n	800192e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80018f6:	4b50      	ldr	r3, [pc, #320]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80018f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018fa:	4b4f      	ldr	r3, [pc, #316]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80018fc:	2180      	movs	r1, #128	; 0x80
 80018fe:	0249      	lsls	r1, r1, #9
 8001900:	430a      	orrs	r2, r1
 8001902:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7fe ffaa 	bl	800085c <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800190e:	f7fe ffa5 	bl	800085c <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e0cd      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001920:	4b45      	ldr	r3, [pc, #276]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	025b      	lsls	r3, r3, #9
 8001928:	4013      	ands	r3, r2
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x552>
 800192c:	e01b      	b.n	8001966 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800192e:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001934:	4943      	ldr	r1, [pc, #268]	; (8001a44 <HAL_RCC_OscConfig+0x688>)
 8001936:	400a      	ands	r2, r1
 8001938:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7fe ff8f 	bl	800085c <HAL_GetTick>
 800193e:	0003      	movs	r3, r0
 8001940:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001944:	f7fe ff8a 	bl	800085c <HAL_GetTick>
 8001948:	0002      	movs	r2, r0
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e0b2      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001956:	4b38      	ldr	r3, [pc, #224]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	025b      	lsls	r3, r3, #9
 800195e:	4013      	ands	r3, r2
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x588>
 8001962:	e000      	b.n	8001966 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001964:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	2b00      	cmp	r3, #0
 800196c:	d100      	bne.n	8001970 <HAL_RCC_OscConfig+0x5b4>
 800196e:	e0a4      	b.n	8001aba <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001970:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	220c      	movs	r2, #12
 8001976:	4013      	ands	r3, r2
 8001978:	2b08      	cmp	r3, #8
 800197a:	d100      	bne.n	800197e <HAL_RCC_OscConfig+0x5c2>
 800197c:	e078      	b.n	8001a70 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	2b02      	cmp	r3, #2
 8001984:	d14c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001986:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 800198c:	492e      	ldr	r1, [pc, #184]	; (8001a48 <HAL_RCC_OscConfig+0x68c>)
 800198e:	400a      	ands	r2, r1
 8001990:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7fe ff63 	bl	800085c <HAL_GetTick>
 8001996:	0003      	movs	r3, r0
 8001998:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199c:	f7fe ff5e 	bl	800085c <HAL_GetTick>
 80019a0:	0002      	movs	r2, r0
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e086      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ae:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	049b      	lsls	r3, r3, #18
 80019b6:	4013      	ands	r3, r2
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	220f      	movs	r2, #15
 80019c0:	4393      	bics	r3, r2
 80019c2:	0019      	movs	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80019ca:	430a      	orrs	r2, r1
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80019ce:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <HAL_RCC_OscConfig+0x690>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	0019      	movs	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	431a      	orrs	r2, r3
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80019e4:	430a      	orrs	r2, r1
 80019e6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 80019ee:	2180      	movs	r1, #128	; 0x80
 80019f0:	0449      	lsls	r1, r1, #17
 80019f2:	430a      	orrs	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7fe ff31 	bl	800085c <HAL_GetTick>
 80019fa:	0003      	movs	r3, r0
 80019fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a00:	f7fe ff2c 	bl	800085c <HAL_GetTick>
 8001a04:	0002      	movs	r2, r0
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e054      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	049b      	lsls	r3, r3, #18
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x644>
 8001a1e:	e04c      	b.n	8001aba <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <HAL_RCC_OscConfig+0x67c>)
 8001a26:	4908      	ldr	r1, [pc, #32]	; (8001a48 <HAL_RCC_OscConfig+0x68c>)
 8001a28:	400a      	ands	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7fe ff16 	bl	800085c <HAL_GetTick>
 8001a30:	0003      	movs	r3, r0
 8001a32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a34:	e015      	b.n	8001a62 <HAL_RCC_OscConfig+0x6a6>
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	00001388 	.word	0x00001388
 8001a40:	efffffff 	.word	0xefffffff
 8001a44:	fffeffff 	.word	0xfffeffff
 8001a48:	feffffff 	.word	0xfeffffff
 8001a4c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a50:	f7fe ff04 	bl	800085c <HAL_GetTick>
 8001a54:	0002      	movs	r2, r0
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e02c      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_RCC_OscConfig+0x708>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	049b      	lsls	r3, r3, #18
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x694>
 8001a6e:	e024      	b.n	8001aba <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e01f      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_RCC_OscConfig+0x708>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_RCC_OscConfig+0x708>)
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	23c0      	movs	r3, #192	; 0xc0
 8001a8c:	025b      	lsls	r3, r3, #9
 8001a8e:	401a      	ands	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d10e      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	23f0      	movs	r3, #240	; 0xf0
 8001aaa:	039b      	lsls	r3, r3, #14
 8001aac:	401a      	ands	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b008      	add	sp, #32
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0bf      	b.n	8001c5c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b61      	ldr	r3, [pc, #388]	; (8001c64 <HAL_RCC_ClockConfig+0x19c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d911      	bls.n	8001b0e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b5e      	ldr	r3, [pc, #376]	; (8001c64 <HAL_RCC_ClockConfig+0x19c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2201      	movs	r2, #1
 8001af0:	4393      	bics	r3, r2
 8001af2:	0019      	movs	r1, r3
 8001af4:	4b5b      	ldr	r3, [pc, #364]	; (8001c64 <HAL_RCC_ClockConfig+0x19c>)
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afc:	4b59      	ldr	r3, [pc, #356]	; (8001c64 <HAL_RCC_ClockConfig+0x19c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2201      	movs	r2, #1
 8001b02:	4013      	ands	r3, r2
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e0a6      	b.n	8001c5c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2202      	movs	r2, #2
 8001b14:	4013      	ands	r3, r2
 8001b16:	d015      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d006      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b22:	4b51      	ldr	r3, [pc, #324]	; (8001c68 <HAL_RCC_ClockConfig+0x1a0>)
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	4b50      	ldr	r3, [pc, #320]	; (8001c68 <HAL_RCC_ClockConfig+0x1a0>)
 8001b28:	21e0      	movs	r1, #224	; 0xe0
 8001b2a:	00c9      	lsls	r1, r1, #3
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b30:	4b4d      	ldr	r3, [pc, #308]	; (8001c68 <HAL_RCC_ClockConfig+0x1a0>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	22f0      	movs	r2, #240	; 0xf0
 8001b36:	4393      	bics	r3, r2
 8001b38:	0019      	movs	r1, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	4b4a      	ldr	r3, [pc, #296]	; (8001c68 <HAL_RCC_ClockConfig+0x1a0>)
 8001b40:	430a      	orrs	r2, r1
 8001b42:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d04c      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	4b44      	ldr	r3, [pc, #272]	; (8001c68 <HAL_RCC_ClockConfig+0x1a0>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	029b      	lsls	r3, r3, #10
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d120      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e07a      	b.n	8001c5c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6e:	4b3e      	ldr	r3, [pc, #248]	; (8001c68 <HAL_RCC_ClockConfig+0x1a0>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	049b      	lsls	r3, r3, #18
 8001b76:	4013      	ands	r3, r2
 8001b78:	d114      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e06e      	b.n	8001c5c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b86:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <HAL_RCC_ClockConfig+0x1a0>)
 8001b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	025b      	lsls	r3, r3, #9
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d108      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e062      	b.n	8001c5c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	4b34      	ldr	r3, [pc, #208]	; (8001c68 <HAL_RCC_ClockConfig+0x1a0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e05b      	b.n	8001c5c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba4:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <HAL_RCC_ClockConfig+0x1a0>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2203      	movs	r2, #3
 8001baa:	4393      	bics	r3, r2
 8001bac:	0019      	movs	r1, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <HAL_RCC_ClockConfig+0x1a0>)
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb8:	f7fe fe50 	bl	800085c <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc0:	e009      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc2:	f7fe fe4b 	bl	800085c <HAL_GetTick>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	4a27      	ldr	r2, [pc, #156]	; (8001c6c <HAL_RCC_ClockConfig+0x1a4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e042      	b.n	8001c5c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	4b24      	ldr	r3, [pc, #144]	; (8001c68 <HAL_RCC_ClockConfig+0x1a0>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	220c      	movs	r2, #12
 8001bdc:	401a      	ands	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d1ec      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001be8:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <HAL_RCC_ClockConfig+0x19c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2201      	movs	r2, #1
 8001bee:	4013      	ands	r3, r2
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d211      	bcs.n	8001c1a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_RCC_ClockConfig+0x19c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4393      	bics	r3, r2
 8001bfe:	0019      	movs	r1, r3
 8001c00:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <HAL_RCC_ClockConfig+0x19c>)
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c08:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_RCC_ClockConfig+0x19c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4013      	ands	r3, r2
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e020      	b.n	8001c5c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2204      	movs	r2, #4
 8001c20:	4013      	ands	r3, r2
 8001c22:	d009      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c24:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_RCC_ClockConfig+0x1a0>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4a11      	ldr	r2, [pc, #68]	; (8001c70 <HAL_RCC_ClockConfig+0x1a8>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_RCC_ClockConfig+0x1a0>)
 8001c34:	430a      	orrs	r2, r1
 8001c36:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c38:	f000 f820 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001c3c:	0001      	movs	r1, r0
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_RCC_ClockConfig+0x1a0>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	091b      	lsrs	r3, r3, #4
 8001c44:	220f      	movs	r2, #15
 8001c46:	4013      	ands	r3, r2
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_RCC_ClockConfig+0x1ac>)
 8001c4a:	5cd3      	ldrb	r3, [r2, r3]
 8001c4c:	000a      	movs	r2, r1
 8001c4e:	40da      	lsrs	r2, r3
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_ClockConfig+0x1b0>)
 8001c52:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7fe fdbb 	bl	80007d0 <HAL_InitTick>
  
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b004      	add	sp, #16
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40022000 	.word	0x40022000
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	00001388 	.word	0x00001388
 8001c70:	fffff8ff 	.word	0xfffff8ff
 8001c74:	08002060 	.word	0x08002060
 8001c78:	20000800 	.word	0x20000800

08001c7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b08f      	sub	sp, #60	; 0x3c
 8001c80:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c82:	2314      	movs	r3, #20
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	4a37      	ldr	r2, [pc, #220]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001c88:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c8a:	c313      	stmia	r3!, {r0, r1, r4}
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	4a35      	ldr	r2, [pc, #212]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xec>)
 8001c94:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c96:	c313      	stmia	r3!, {r0, r1, r4}
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb8:	220c      	movs	r2, #12
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d006      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0x52>
 8001cc0:	2b0c      	cmp	r3, #12
 8001cc2:	d043      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0xd0>
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d144      	bne.n	8001d52 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cc8:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ccc:	e044      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd0:	0c9b      	lsrs	r3, r3, #18
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2214      	movs	r2, #20
 8001cd8:	18ba      	adds	r2, r7, r2
 8001cda:	5cd3      	ldrb	r3, [r2, r3]
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001cde:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	1d3a      	adds	r2, r7, #4
 8001ce8:	5cd3      	ldrb	r3, [r2, r3]
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cee:	23c0      	movs	r3, #192	; 0xc0
 8001cf0:	025b      	lsls	r3, r3, #9
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	025b      	lsls	r3, r3, #9
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d109      	bne.n	8001d10 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cfe:	481c      	ldr	r0, [pc, #112]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d00:	f7fe fa02 	bl	8000108 <__udivsi3>
 8001d04:	0003      	movs	r3, r0
 8001d06:	001a      	movs	r2, r3
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	4353      	muls	r3, r2
 8001d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d0e:	e01a      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d12:	23c0      	movs	r3, #192	; 0xc0
 8001d14:	025b      	lsls	r3, r3, #9
 8001d16:	401a      	ands	r2, r3
 8001d18:	23c0      	movs	r3, #192	; 0xc0
 8001d1a:	025b      	lsls	r3, r3, #9
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d109      	bne.n	8001d34 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d22:	4814      	ldr	r0, [pc, #80]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d24:	f7fe f9f0 	bl	8000108 <__udivsi3>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	001a      	movs	r2, r3
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	4353      	muls	r3, r2
 8001d30:	637b      	str	r3, [r7, #52]	; 0x34
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d36:	480e      	ldr	r0, [pc, #56]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d38:	f7fe f9e6 	bl	8000108 <__udivsi3>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	001a      	movs	r2, r3
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	4353      	muls	r3, r2
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d4a:	e005      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d50:	e002      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d56:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b00f      	add	sp, #60	; 0x3c
 8001d60:	bd90      	pop	{r4, r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	08002040 	.word	0x08002040
 8001d68:	08002050 	.word	0x08002050
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	007a1200 	.word	0x007a1200
 8001d74:	02dc6c00 	.word	0x02dc6c00

08001d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e01e      	b.n	8001dc8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	223d      	movs	r2, #61	; 0x3d
 8001d8e:	5c9b      	ldrb	r3, [r3, r2]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d107      	bne.n	8001da6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	223c      	movs	r2, #60	; 0x3c
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7fe fca5 	bl	80006f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	223d      	movs	r2, #61	; 0x3d
 8001daa:	2102      	movs	r1, #2
 8001dac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3304      	adds	r3, #4
 8001db6:	0019      	movs	r1, r3
 8001db8:	0010      	movs	r0, r2
 8001dba:	f000 f82b 	bl	8001e14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	223d      	movs	r2, #61	; 0x3d
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b002      	add	sp, #8
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	223d      	movs	r2, #61	; 0x3d
 8001ddc:	2102      	movs	r1, #2
 8001dde:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2207      	movs	r2, #7
 8001de8:	4013      	ands	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d007      	beq.n	8001e02 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	223d      	movs	r2, #61	; 0x3d
 8001e06:	2101      	movs	r1, #1
 8001e08:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b004      	add	sp, #16
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a34      	ldr	r2, [pc, #208]	; (8001ef8 <TIM_Base_SetConfig+0xe4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d008      	beq.n	8001e3e <TIM_Base_SetConfig+0x2a>
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	05db      	lsls	r3, r3, #23
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d003      	beq.n	8001e3e <TIM_Base_SetConfig+0x2a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a30      	ldr	r2, [pc, #192]	; (8001efc <TIM_Base_SetConfig+0xe8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d108      	bne.n	8001e50 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2270      	movs	r2, #112	; 0x70
 8001e42:	4393      	bics	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a29      	ldr	r2, [pc, #164]	; (8001ef8 <TIM_Base_SetConfig+0xe4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d018      	beq.n	8001e8a <TIM_Base_SetConfig+0x76>
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	05db      	lsls	r3, r3, #23
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d013      	beq.n	8001e8a <TIM_Base_SetConfig+0x76>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a25      	ldr	r2, [pc, #148]	; (8001efc <TIM_Base_SetConfig+0xe8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00f      	beq.n	8001e8a <TIM_Base_SetConfig+0x76>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a24      	ldr	r2, [pc, #144]	; (8001f00 <TIM_Base_SetConfig+0xec>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00b      	beq.n	8001e8a <TIM_Base_SetConfig+0x76>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a23      	ldr	r2, [pc, #140]	; (8001f04 <TIM_Base_SetConfig+0xf0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d007      	beq.n	8001e8a <TIM_Base_SetConfig+0x76>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <TIM_Base_SetConfig+0xf4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d003      	beq.n	8001e8a <TIM_Base_SetConfig+0x76>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a21      	ldr	r2, [pc, #132]	; (8001f0c <TIM_Base_SetConfig+0xf8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d108      	bne.n	8001e9c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4a20      	ldr	r2, [pc, #128]	; (8001f10 <TIM_Base_SetConfig+0xfc>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	4393      	bics	r3, r2
 8001ea2:	001a      	movs	r2, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <TIM_Base_SetConfig+0xe4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00b      	beq.n	8001ee2 <TIM_Base_SetConfig+0xce>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <TIM_Base_SetConfig+0xf0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d007      	beq.n	8001ee2 <TIM_Base_SetConfig+0xce>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <TIM_Base_SetConfig+0xf4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d003      	beq.n	8001ee2 <TIM_Base_SetConfig+0xce>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a0b      	ldr	r2, [pc, #44]	; (8001f0c <TIM_Base_SetConfig+0xf8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d103      	bne.n	8001eea <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	615a      	str	r2, [r3, #20]
}
 8001ef0:	46c0      	nop			; (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b004      	add	sp, #16
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40012c00 	.word	0x40012c00
 8001efc:	40000400 	.word	0x40000400
 8001f00:	40002000 	.word	0x40002000
 8001f04:	40014000 	.word	0x40014000
 8001f08:	40014400 	.word	0x40014400
 8001f0c:	40014800 	.word	0x40014800
 8001f10:	fffffcff 	.word	0xfffffcff

08001f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	223c      	movs	r2, #60	; 0x3c
 8001f22:	5c9b      	ldrb	r3, [r3, r2]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e047      	b.n	8001fbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	223c      	movs	r2, #60	; 0x3c
 8001f30:	2101      	movs	r1, #1
 8001f32:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	223d      	movs	r2, #61	; 0x3d
 8001f38:	2102      	movs	r1, #2
 8001f3a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2270      	movs	r2, #112	; 0x70
 8001f50:	4393      	bics	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a16      	ldr	r2, [pc, #88]	; (8001fc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d00f      	beq.n	8001f90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	05db      	lsls	r3, r3, #23
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d009      	beq.n	8001f90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a11      	ldr	r2, [pc, #68]	; (8001fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d004      	beq.n	8001f90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a10      	ldr	r2, [pc, #64]	; (8001fcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d10c      	bne.n	8001faa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2280      	movs	r2, #128	; 0x80
 8001f94:	4393      	bics	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	223d      	movs	r2, #61	; 0x3d
 8001fae:	2101      	movs	r1, #1
 8001fb0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	223c      	movs	r2, #60	; 0x3c
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b004      	add	sp, #16
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40012c00 	.word	0x40012c00
 8001fc8:	40000400 	.word	0x40000400
 8001fcc:	40014000 	.word	0x40014000

08001fd0 <__libc_init_array>:
 8001fd0:	b570      	push	{r4, r5, r6, lr}
 8001fd2:	2600      	movs	r6, #0
 8001fd4:	4d0c      	ldr	r5, [pc, #48]	; (8002008 <__libc_init_array+0x38>)
 8001fd6:	4c0d      	ldr	r4, [pc, #52]	; (800200c <__libc_init_array+0x3c>)
 8001fd8:	1b64      	subs	r4, r4, r5
 8001fda:	10a4      	asrs	r4, r4, #2
 8001fdc:	42a6      	cmp	r6, r4
 8001fde:	d109      	bne.n	8001ff4 <__libc_init_array+0x24>
 8001fe0:	2600      	movs	r6, #0
 8001fe2:	f000 f821 	bl	8002028 <_init>
 8001fe6:	4d0a      	ldr	r5, [pc, #40]	; (8002010 <__libc_init_array+0x40>)
 8001fe8:	4c0a      	ldr	r4, [pc, #40]	; (8002014 <__libc_init_array+0x44>)
 8001fea:	1b64      	subs	r4, r4, r5
 8001fec:	10a4      	asrs	r4, r4, #2
 8001fee:	42a6      	cmp	r6, r4
 8001ff0:	d105      	bne.n	8001ffe <__libc_init_array+0x2e>
 8001ff2:	bd70      	pop	{r4, r5, r6, pc}
 8001ff4:	00b3      	lsls	r3, r6, #2
 8001ff6:	58eb      	ldr	r3, [r5, r3]
 8001ff8:	4798      	blx	r3
 8001ffa:	3601      	adds	r6, #1
 8001ffc:	e7ee      	b.n	8001fdc <__libc_init_array+0xc>
 8001ffe:	00b3      	lsls	r3, r6, #2
 8002000:	58eb      	ldr	r3, [r5, r3]
 8002002:	4798      	blx	r3
 8002004:	3601      	adds	r6, #1
 8002006:	e7f2      	b.n	8001fee <__libc_init_array+0x1e>
 8002008:	08002070 	.word	0x08002070
 800200c:	08002070 	.word	0x08002070
 8002010:	08002070 	.word	0x08002070
 8002014:	08002074 	.word	0x08002074

08002018 <memset>:
 8002018:	0003      	movs	r3, r0
 800201a:	1812      	adds	r2, r2, r0
 800201c:	4293      	cmp	r3, r2
 800201e:	d100      	bne.n	8002022 <memset+0xa>
 8002020:	4770      	bx	lr
 8002022:	7019      	strb	r1, [r3, #0]
 8002024:	3301      	adds	r3, #1
 8002026:	e7f9      	b.n	800201c <memset+0x4>

08002028 <_init>:
 8002028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800202e:	bc08      	pop	{r3}
 8002030:	469e      	mov	lr, r3
 8002032:	4770      	bx	lr

08002034 <_fini>:
 8002034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800203a:	bc08      	pop	{r3}
 800203c:	469e      	mov	lr, r3
 800203e:	4770      	bx	lr
